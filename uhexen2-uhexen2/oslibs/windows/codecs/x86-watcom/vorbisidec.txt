https://github.com/sezero/tremor.git - sezero-lowmem branch
configured with: --enable-low-accuracy --enable-64kHz-limit

removed procedures not used in uhexen2:

diff --git a/info.c b/info.c
index 416e40b..4c9c266 100644
--- a/info.c
+++ b/info.c
@@ -34,62 +34,6 @@ static void _v_readstring(oggpack_buffer *o,char *buf,int bytes){
   }
 }
 
-STIN int _v_toupper(int c) {
-  return (c >= 'a' && c <= 'z') ? (c & ~('a' - 'A')) : c;
-}
-
-/* This is more or less the same as strncasecmp - but that doesn't exist
- * everywhere, and this is a fairly trivial function, so we include it */
-static int tagcompare(const char *s1, const char *s2, int n){
-  int c=0;
-  while(c < n){
-    if(_v_toupper(s1[c]) != _v_toupper(s2[c]))
-      return !0;
-    c++;
-  }
-  return 0;
-}
-
-char *vorbis_comment_query(vorbis_comment *vc, char *tag, int count){
-  long i;
-  int found = 0;
-  int taglen = strlen(tag)+1; /* +1 for the = we append */
-  VAR_STACK(char,fulltag,taglen+1);
-
-  strcpy(fulltag, tag);
-  strcat(fulltag, "=");
-  
-  for(i=0;i<vc->comments;i++){
-    if(!tagcompare(vc->user_comments[i], fulltag, taglen)){
-      if(count == found)
-	/* We return a pointer to the data, not a copy */
-	return vc->user_comments[i] + taglen;
-      else
-	found++;
-    }
-  }
-  return NULL; /* didn't find anything */
-}
-
-int vorbis_comment_query_count(vorbis_comment *vc, char *tag){
-  int i,count=0;
-  int taglen = strlen(tag)+1; /* +1 for the = we append */
-  VAR_STACK(char,fulltag,taglen+1);
-  strcpy(fulltag,tag);
-  strcat(fulltag, "=");
-
-  for(i=0;i<vc->comments;i++){
-    if(!tagcompare(vc->user_comments[i], fulltag, taglen))
-      count++;
-  }
-
-  return count;
-}
-
-void vorbis_comment_init(vorbis_comment *vc){
-  memset(vc,0,sizeof(*vc));
-}
-
 void vorbis_comment_clear(vorbis_comment *vc){
   if(vc){
     long i;
diff --git a/vorbisfile.c b/vorbisfile.c
index 074945b..9f4b7a6 100644
--- a/vorbisfile.c
+++ b/vorbisfile.c
@@ -686,13 +686,6 @@ static int _fetch_and_process_packet(OggVorbis_File *vf,
   return ret;
 }
 
-/* if, eg, 64 bit stdio is configured by default, this will build with
-   fseek64 */
-static int _fseek64_wrap(FILE *f,ogg_int64_t off,int whence){
-  if(f==NULL)return -1;
-  return fseek(f,off,whence);
-}
-
 static int _ov_open1(void *f,OggVorbis_File *vf,const char *initial,
 		     long ibytes, ov_callbacks callbacks){
   int offsettest=(f?callbacks.seek_func(f,0,SEEK_CUR):-1);
@@ -790,54 +783,6 @@ int ov_open_callbacks(void *f,OggVorbis_File *vf,const char *initial,long ibytes
   return _ov_open2(vf);
 }
 
-int ov_open(FILE *f,OggVorbis_File *vf,const char *initial,long ibytes){
-  ov_callbacks callbacks = {
-    (size_t (*)(void *, size_t, size_t, void *))  fread,
-    (int (*)(void *, ogg_int64_t, int))              _fseek64_wrap,
-    (int (*)(void *))                             fclose,
-    (long (*)(void *))                            ftell
-  };
-
-  return ov_open_callbacks((void *)f, vf, initial, ibytes, callbacks);
-}
-
-int ov_fopen(const char *path,OggVorbis_File *vf){
-  int ret;
-  FILE *f = fopen(path,"rb");
-  if(!f) return -1;
-
-  ret = ov_open(f,vf,NULL,0);
-  if(ret) fclose(f);
-  return ret;
-}
-
-/* Only partially open the vorbis file; test for Vorbisness, and load
-   the headers for the first chain.  Do not seek (although test for
-   seekability).  Use ov_test_open to finish opening the file, else
-   ov_clear to close/free it. Same return codes as open. */
-
-int ov_test_callbacks(void *f,OggVorbis_File *vf,const char *initial,long ibytes,
-    ov_callbacks callbacks)
-{
-  return _ov_open1(f,vf,initial,ibytes,callbacks);
-}
-
-int ov_test(FILE *f,OggVorbis_File *vf,const char *initial,long ibytes){
-  ov_callbacks callbacks = {
-    (size_t (*)(void *, size_t, size_t, void *))  fread,
-    (int (*)(void *, ogg_int64_t, int))              _fseek64_wrap,
-    (int (*)(void *))                             fclose,
-    (long (*)(void *))                            ftell
-  };
-
-  return ov_test_callbacks((void *)f, vf, initial, ibytes, callbacks);
-}
-  
-int ov_test_open(OggVorbis_File *vf){
-  if(vf->ready_state!=PARTOPEN)return OV_EINVAL;
-  return _ov_open2(vf);
-}
-
 /* How many logical bitstreams in this physical bitstream? */
 long ov_streams(OggVorbis_File *vf){
   return vf->links;
@@ -848,95 +793,6 @@ long ov_seekable(OggVorbis_File *vf){
   return vf->seekable;
 }
 
-/* returns the bitrate for a given logical bitstream or the entire
-   physical bitstream.  If the file is open for random access, it will
-   find the *actual* average bitrate.  If the file is streaming, it
-   returns the nominal bitrate (if set) else the average of the
-   upper/lower bounds (if set) else -1 (unset).
-
-   If you want the actual bitrate field settings, get them from the
-   vorbis_info structs */
-
-long ov_bitrate(OggVorbis_File *vf,int i){
-  if(vf->ready_state<OPENED)return OV_EINVAL;
-  if(i>=vf->links)return OV_EINVAL;
-  if(!vf->seekable && i!=0)return ov_bitrate(vf,0);
-  if(i<0){
-    ogg_int64_t bits=0;
-    int i;
-    for(i=0;i<vf->links;i++)
-      bits+=(vf->offsets[i+1]-vf->dataoffsets[i])*8;
-    /* This once read: return(rint(bits/ov_time_total(vf,-1)));
-     * gcc 3.x on x86 miscompiled this at optimisation level 2 and above,
-     * so this is slightly transformed to make it work.
-     */
-    return bits*1000/ov_time_total(vf,-1);
-  }else{
-    if(vf->seekable){
-      /* return the actual bitrate */
-      return (vf->offsets[i+1]-vf->dataoffsets[i])*8000/ov_time_total(vf,i);
-    }else{
-      /* return nominal if set */
-      if(vf->vi.bitrate_nominal>0){
-	return vf->vi.bitrate_nominal;
-      }else{
-	if(vf->vi.bitrate_upper>0){
-	  if(vf->vi.bitrate_lower>0){
-	    return (vf->vi.bitrate_upper+vf->vi.bitrate_lower)/2;
-	  }else{
-	    return vf->vi.bitrate_upper;
-	  }
-	}
-	return OV_FALSE;
-      }
-    }
-  }
-}
-
-/* returns the actual bitrate since last call.  returns -1 if no
-   additional data to offer since last call (or at beginning of stream),
-   EINVAL if stream is only partially open 
-*/
-long ov_bitrate_instant(OggVorbis_File *vf){
-  long ret;
-  if(vf->ready_state<OPENED)return OV_EINVAL;
-  if(vf->samptrack==0)return OV_FALSE;
-  ret=vf->bittrack/vf->samptrack*vf->vi.rate;
-  vf->bittrack=0;
-  vf->samptrack=0;
-  return ret;
-}
-
-/* Guess */
-long ov_serialnumber(OggVorbis_File *vf,int i){
-  if(i>=vf->links)return ov_serialnumber(vf,vf->links-1);
-  if(!vf->seekable && i>=0)return ov_serialnumber(vf,-1);
-  if(i<0){
-    return vf->current_serialno;
-  }else{
-    return vf->serialnos[i];
-  }
-}
-
-/* returns: total raw (compressed) length of content if i==-1
-            raw (compressed) length of that logical bitstream for i==0 to n
-	    OV_EINVAL if the stream is not seekable (we can't know the length)
-	    or if stream is only partially open
-*/
-ogg_int64_t ov_raw_total(OggVorbis_File *vf,int i){
-  if(vf->ready_state<OPENED)return OV_EINVAL;
-  if(!vf->seekable || i>=vf->links)return OV_EINVAL;
-  if(i<0){
-    ogg_int64_t acc=0;
-    int i;
-    for(i=0;i<vf->links;i++)
-      acc+=ov_raw_total(vf,i);
-    return acc;
-  }else{
-    return vf->offsets[i+1]-vf->offsets[i];
-  }
-}
-
 /* returns: total PCM length (samples) of content if i==-1 PCM length
 	    (samples) of that logical bitstream for i==0 to n
 	    OV_EINVAL if the stream is not seekable (we can't know the
@@ -1440,71 +1296,6 @@ int ov_time_seek(OggVorbis_File *vf,ogg_int64_t milliseconds){
   }
 }
 
-/* page-granularity version of ov_time_seek 
-   returns zero on success, nonzero on failure */
-int ov_time_seek_page(OggVorbis_File *vf,ogg_int64_t milliseconds){
-  /* translate time to PCM position and call ov_pcm_seek */
-
-  int link=-1;
-  ogg_int64_t pcm_total=ov_pcm_total(vf,-1);
-  ogg_int64_t time_total=ov_time_total(vf,-1);
-
-  if(vf->ready_state<OPENED)return OV_EINVAL;
-  if(!vf->seekable)return OV_ENOSEEK;
-  if(milliseconds<0 || milliseconds>time_total)return OV_EINVAL;
-  
-  /* which bitstream section does this time offset occur in? */
-  for(link=vf->links-1;link>=0;link--){
-    pcm_total-=vf->pcmlengths[link*2+1];
-    time_total-=ov_time_total(vf,link);
-    if(milliseconds>=time_total)break;
-  }
-
-  /* enough information to convert time offset to pcm offset */
-  {
-    int ret=_set_link_number(vf,link);
-    if(ret)return ret;
-    return 
-      ov_pcm_seek_page(vf,pcm_total+(milliseconds-time_total)*
-		       vf->vi.rate/1000);
-  }
-}
-
-/* tell the current stream offset cursor.  Note that seek followed by
-   tell will likely not give the set offset due to caching */
-ogg_int64_t ov_raw_tell(OggVorbis_File *vf){
-  if(vf->ready_state<OPENED)return OV_EINVAL;
-  return vf->offset;
-}
-
-/* return PCM offset (sample) of next PCM sample to be read */
-ogg_int64_t ov_pcm_tell(OggVorbis_File *vf){
-  if(vf->ready_state<OPENED)return OV_EINVAL;
-  return vf->pcm_offset;
-}
-
-/* return time offset (milliseconds) of next PCM sample to be read */
-ogg_int64_t ov_time_tell(OggVorbis_File *vf){
-  int link=0;
-  ogg_int64_t pcm_total=0;
-  ogg_int64_t time_total=0;
-  
-  if(vf->ready_state<OPENED)return OV_EINVAL;
-  if(vf->seekable){
-    pcm_total=ov_pcm_total(vf,-1);
-    time_total=ov_time_total(vf,-1);
-  
-    /* which bitstream section does this time offset occur in? */
-    for(link=vf->links-1;link>=0;link--){
-      pcm_total-=vf->pcmlengths[link*2+1];
-      time_total-=ov_time_total(vf,link);
-      if(vf->pcm_offset>=pcm_total)break;
-    }
-  }
-
-  return time_total+(1000*vf->pcm_offset-pcm_total)/vf->vi.rate;
-}
-
 /*  link:   -1) return the vorbis_info struct for the bitstream section
                 currently being decoded
            0-n) to request information for a specific bitstream section
@@ -1524,18 +1315,6 @@ vorbis_info *ov_info(OggVorbis_File *vf,int link){
   return &vf->vi;
 }
 
-/* grr, strong typing, grr, no templates/inheritence, grr */
-vorbis_comment *ov_comment(OggVorbis_File *vf,int link){
-  if(vf->seekable){
-    if(link>=vf->links)return NULL;
-    if(link>=0){
-      int ret=_set_link_number_preserve_pos(vf,link);
-      if(ret)return NULL;
-    }
-  }
-  return &vf->vc;
-}
-
 /* up to this point, everything could more or less hide the multiple
    logical bitstream nature of chaining from the toplevel application
    if the toplevel application didn't particularly care.  However, at

