this patch adds initial support for standalone free contents.
see the documentation file StandaloneMods.txt for details.

diff --git a/engine/h2shared/quakefs.c b/engine/h2shared/quakefs.c
index 133567f..a59e585 100644
--- a/engine/h2shared/quakefs.c
+++ b/engine/h2shared/quakefs.c
@@ -58,6 +58,7 @@ static searchpath_t	*fs_base_searchpaths;	/* without gamedirs */
 static const char	*fs_basedir;
 static char	fs_gamedir[MAX_OSPATH];
 static char	fs_userdir[MAX_OSPATH];
+static char	fs_dirstdalone[MAX_QPATH];	/* gamedir for standalone games */
 char	fs_gamedir_nopath[MAX_QPATH];
 
 unsigned int	gameflags;
@@ -309,7 +310,7 @@ static pack_t *FS_LoadPackFile (const char *packfile, int paknum, qboolean base_
 		CRC_ProcessByte (&crc, ((byte *)info)[i]);
 
 	/* check for modifications */
-	if (base_fs)
+	if (base_fs && !(gameflags & GAME_STANDALONE))
 		gameflags |= check_known_paks (paknum, numpackfiles, crc);
 	else	gameflags |= GAME_MODIFIED;
 
@@ -487,6 +488,10 @@ void FS_Gamedir (const char *dir)
 /* check for reserved gamedirs */
 	if (!q_strcasecmp(dir, "hw"))
 	{
+	/* standalone games don't touch Raven directories and they
+	 * don't have an additional directory for hexenworld, either. */
+		if (gameflags & GAME_STANDALONE)
+			return;	/* don't even bother for a message. */
 #if defined(H2W)
 	/* that we reached here means the hw server decided to abandon
 	 * whatever the previous mod it was running and went back to
@@ -524,6 +529,30 @@ void FS_Gamedir (const char *dir)
 		return;
 	}
 
+	if (gameflags & GAME_STANDALONE && !q_strcasecmp(dir, fs_dirstdalone))
+	{
+#ifndef H2W
+	/* same as the data1 above, but for standalone mods. */
+		return;
+#else	/* hw case : */
+	/* Standalone mods don't have an additional directory for hw.
+	 * that we reached here means the hw server decided to abandon
+	 * whatever the previous mod it was running and went back to
+	 * pure hw. weird.. do as he wishes anyway and adjust our variables. */
+		FSERR_MakePath_BUF(__thisfunc__, __LINE__, FS_BASEDIR,
+					fs_gamedir, sizeof(fs_gamedir), fs_dirstdalone);
+		FSERR_MakePath_BUF(__thisfunc__, __LINE__, FS_USERBASE,
+					fs_userdir, sizeof(fs_userdir), fs_dirstdalone);
+		qerr_strlcpy(__thisfunc__, __LINE__, fs_gamedir_nopath, fs_dirstdalone,
+						sizeof(fs_gamedir_nopath));
+# ifdef SERVERONLY
+	/* change the *gamedir serverinfo properly */
+		Info_SetValueForStarKey (svs.info, "*gamedir", fs_dirstdalone, MAX_SERVERINFO_STRING);
+# endif /* HWSV */
+		return;
+#endif	/* H2W */
+	}
+
 /* a new gamedir: let's set it here. */
 	FS_AddGameDirectory(dir, false);
 #if defined(H2W) && defined(SERVERONLY)
@@ -1167,8 +1196,36 @@ static int CheckRegistered (void)
 FS_Init
 ================
 */
+static void FS_InitRaven (void);
+static void FS_InitStandalone (void);
+
 void FS_Init (void)
 {
+	if (!COM_CheckParm ("-standalone"))
+	{
+		FS_InitRaven();
+	}
+	else
+	{
+		int		i;
+
+		i = COM_CheckParm ("-basegame");
+		if (i == 0)
+			Sys_Error ("standalone games require a valid -basegame argument");
+		if (i >= com_argc - 1 || !com_argv[i + 1][0])
+			Sys_Error ("-basegame requires a valid game directory name as argument");
+		qerr_strlcpy (__thisfunc__, __LINE__, fs_dirstdalone, com_argv[i + 1], sizeof(fs_dirstdalone));
+		/* check for reserved directory names: */
+		if (!q_strcasecmp(fs_dirstdalone, "data1") ||
+		    !q_strcasecmp(fs_dirstdalone, "portals") ||
+		    !q_strcasecmp(fs_dirstdalone, "hw"))
+			Sys_Error ("standalone game shouldn't use a reserved directory name (%s)", fs_dirstdalone);
+		FS_InitStandalone();
+	}
+}
+
+static void FS_InitRaven (void)
+{
 	qboolean check_portals = false;
 	int	i;
 
@@ -1496,6 +1553,87 @@ char *FS_MakePath_VABUF (int base, int *error, char *buf, size_t siz, const char
 	return p;
 }
 
+static void FS_InitStandalone (void)
+{
+	int		i;
+	char	*flagstring;
+	unsigned int	flags;
+
+	gameflags |= GAME_STANDALONE;
+
+	Cvar_RegisterVariable (&oem);
+	Cvar_RegisterVariable (&registered);
+
+	Cmd_AddCommand ("path", FS_Path_f);
+#if !defined(SERVERONLY)
+	Cmd_AddCommand ("maplist", FS_Maplist_f);
+#endif	/* SERVERONLY */
+
+	i = COM_CheckParm ("-basedir");
+	if (i && i < com_argc-1)
+	{
+		fs_basedir = com_argv[i+1];
+		if (!*fs_basedir) Sys_Error("Bad argument to -basedir");
+#if !DO_USERDIRS
+		host_parms->userdir = com_argv[i+1];
+#endif
+		Sys_Printf ("%s: basedir changed to: %s\n", __thisfunc__, fs_basedir);
+	}
+	else
+	{
+		fs_basedir = host_parms->basedir;
+	}
+
+	FS_AddGameDirectory (fs_dirstdalone, true);
+
+	/* force-add the registered flags: */
+	Cvar_SetROM ("registered", "1");
+	gameflags |= GAME_REGISTERED;
+	Sys_Printf ("Playing standalone/mod version.\n");
+
+/* this is the end of our base searchpath:
+ * any set gamedirs, such as those from -game commandline
+ * arguments, from exec'ed configs or the ones dictated by
+ * the server, will be freed up to here upon a new gamedir
+ * command */
+	fs_base_searchpaths = fs_searchpaths;
+
+	i = COM_CheckParm ("-game");
+	if (i != 0)
+	{
+		/* add basedir/gamedir as an override game */
+		if (i < com_argc - 1)
+			FS_Gamedir (com_argv[i+1]);
+	}
+
+	flagstring = (char *)FS_LoadZoneFile ("stdalone.flg", Z_MAINZONE, NULL);
+	if (!flagstring)
+	{
+		flags = 0;
+		Sys_Printf ("Warning: couldn't load standalone game flags\n");
+	}
+	else
+	{
+		/* see which game modes it requires: */
+		flags = (unsigned int) atoi(flagstring);
+		if (flags & GAME_WANT_PORTALS)
+		{
+			gameflags |= GAME_PORTALS;
+		}
+		Z_Free (flagstring);
+	}
+#if defined(H2W)
+	gameflags |= GAME_HEXENWORLD;
+	if (flags & GAME_ONLY_HEXEN2)
+		Sys_Error ("This standalone game cannot be run with HexenWorld");
+#else
+	if (flags & GAME_ONLY_H2W)
+		Sys_Error ("This standalone game is for HexenWorld only.");
+	if (sv_protocol == PROTOCOL_RAVEN_111 && flags & GAME_PORTALS)
+		Sys_Error ("Old protocol requested but the game requires mission pack support.");
+#endif	/* H2W */
+}
+
 const char *FS_GetBasedir (void)
 {
 	return fs_basedir;
diff --git a/engine/h2shared/quakefs.h b/engine/h2shared/quakefs.h
index 6d554bd..b4cfbe3 100644
--- a/engine/h2shared/quakefs.h
+++ b/engine/h2shared/quakefs.h
@@ -45,6 +45,12 @@
 
 #define	GAME_MODIFIED		(1 << 16)
 
+#define	GAME_STANDALONE		(1 << 31)
+/* standalone game requirement flags : */
+#define	GAME_WANT_PORTALS	(1 << 7)
+#define	GAME_ONLY_HEXEN2	(1 << 15)
+#define	GAME_ONLY_H2W		(1 << 16)
+
 extern	char	fs_gamedir_nopath[MAX_QPATH];
 
 const char *FS_GetBasedir (void);

-- 
1.7.1
