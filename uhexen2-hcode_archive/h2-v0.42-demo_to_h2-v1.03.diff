diff -urNp h2-0.42-demo/ai.hc h2-1.03/ai.hc
--- h2-0.42-demo/ai.hc	1997-08-28 02:38:10.000000000 +0300
+++ h2-1.03/ai.hc	1997-09-04 21:57:40.000000000 +0300
@@ -35,6 +35,7 @@ void()SpiderMeleeBegin;
 void()spider_onwall_wait;
 float(entity targ , entity from)infront_of_ent;
 void(entity proj)mezzo_choose_roll;
+void()hive_die;
 
 //void()check_climb;
 
@@ -124,7 +125,9 @@ vector	spot1, spot2;
 
     traceline (spot1, spot2, TRUE, forent);   // see through other monsters
 
-	if (trace_inopen && trace_inwater)//FIXME?  Translucent water?
+	if(trace_ent.thingtype>=THINGTYPE_WEBS)
+		traceline (trace_endpos, spot2, TRUE, trace_ent);
+	else if (trace_inopen && trace_inwater)//FIXME?  Translucent water?
 		return FALSE;			// sight line crossed contents
 
 	if (trace_fraction == 1)
@@ -273,9 +276,9 @@ void() HuntTarget =
 void SightSound (void)
 {
 	if (self.classname == "monster_archer")
-		sound (self, CHAN_WEAPON, "archer/sight.wav", 1, ATTN_NORM);
+		sound (self, CHAN_VOICE, "archer/sight.wav", 1, ATTN_NORM);
 	else if (self.classname == "monster_archer_lord")
-		sound (self, CHAN_WEAPON, "archer/sight2.wav", 1, ATTN_NORM);
+		sound (self, CHAN_VOICE, "archer/sight2.wav", 1, ATTN_NORM);
 	else if (self.classname == "monster_mummy")
 		sound (self, CHAN_WEAPON, "mummy/sight.wav", 1, ATTN_NORM);
 	else if (self.classname == "monster_mummy_lord")
@@ -779,42 +782,59 @@ float monster_spawn_precache (void)
 float have_monsters;
 	if (self.spawnflags & IMP)
 	{
+		precache_model2 ("models/imp.mdl");
+		precache_model2 ("models/h_imp.mdl");//empty for now
 		precache_sound2("imp/up.wav");
 		precache_sound2("imp/die.wav");
-		precache_sound2("imp/swoophit.wav");
 		precache_sound2("imp/swoop.wav");
 		precache_sound2("imp/fly.wav");
-		precache_sound2("imp/fireball.wav");
-		precache_sound2("imp/shard.wav");
-		precache_model2 ("models/imp.mdl");
-		precache_model2 ("models/h_imp.mdl");//empty for now
 		precache_model2 ("models/shardice.mdl");
 		precache_model ("models/fireball.mdl");
+		precache_sound2("imp/swoophit.wav");
+		precache_sound2("imp/fireball.wav");
+		precache_sound2("imp/shard.wav");
+		precache_sound("hydra/turn-s.wav");
 		have_monsters=TRUE;
 	}
 	if (self.spawnflags & ARCHER)
 	{
-		precache_model ("models/archer.mdl");
-		precache_model ("models/h_ogre.mdl");
+		precache_archer();
 		have_monsters=TRUE;
 	}
 	if (self.spawnflags & WIZARD)
 	{
-		precache_model ("models/skullwiz.mdl");
-		precache_model ("models/skulbook.mdl");
-		precache_model ("models/skulhead.mdl");
-		precache_model ("models/skulshot.mdl");
-		precache_model ("models/spider.mdl");
+		precache_model("models/skullwiz.mdl");
+		precache_model("models/skulbook.mdl");
+		precache_model("models/skulhead.mdl");
+		precache_model("models/skulshot.mdl");
+		precache_model("models/spider.mdl");
+		precache_sound("skullwiz/death.wav");
+		precache_sound("skullwiz/blinkspk.wav");
+		precache_sound("skullwiz/growl.wav");
+		precache_sound("skullwiz/scream.wav");
+		precache_sound("skullwiz/pain.wav");
+		precache_sound("skullwiz/gate.wav");
+		precache_sound("skullwiz/blinkin.wav");
+		precache_sound("skullwiz/blinkout.wav");
+		precache_sound("skullwiz/push.wav");
+		precache_sound("skullwiz/firemisl.wav");
+		precache_spider();
 		have_monsters=TRUE;
 	}
 	if (self.spawnflags & SCORPION)
 	{
-		precache_model ("models/scorpion.mdl");
+		precache_model2("models/scorpion.mdl");
+		precache_sound2("scorpion/awaken.wav");
+		precache_sound2("scorpion/walk.wav");
+		precache_sound2("scorpion/clawsnap.wav");
+		precache_sound2("scorpion/tailwhip.wav");
+		precache_sound2("scorpion/pain.wav");
+		precache_sound2("scorpion/death.wav");
 		have_monsters=TRUE;
 	}
 	if(self.spawnflags & SPIDER)
 	{
-		precache_model ("models/spider.mdl");
+		precache_spider();
 		have_monsters=TRUE;
 	}
 	return have_monsters;
@@ -1101,3 +1121,6 @@ void func_monsterspawn_spot (void)
 		self.use=spawnspot_activate;
 }
 
+void hive_die(){}
+void spawn_ghost (entity attacker){}
+
diff -urNp h2-0.42-demo/allplay.hc h2-1.03/allplay.hc
--- h2-0.42-demo/allplay.hc	1997-08-28 02:38:10.000000000 +0300
+++ h2-1.03/allplay.hc	1997-09-04 21:57:40.000000000 +0300
@@ -15,7 +15,7 @@ void PlayerSpeed_Calc (void)
 		self.hasted=.93;
 
 	if (self.artifact_active & ART_HASTE)
-		self.hasted *= 2;
+		self.hasted *= 2.75;
 
 	if (self.hull==HULL_CROUCH)   // Player crouched
 		self.hasted *= .6;
@@ -205,7 +205,18 @@ void DeathSound ()
 			sound (self, CHAN_VOICE, "player/paldieh2.wav", 1, ATTN_NONE);
 		return;
 	}
-	StandardPain();
+	else
+	{
+		if(self.playerclass==CLASS_ASSASSIN)
+			if (random() > 0.5)
+				sound (self, CHAN_VOICE, "player/assdie1.wav", 1, ATTN_NORM);
+			else 
+				sound (self, CHAN_VOICE, "player/assdie2.wav", 1, ATTN_NORM);
+		else if (random() > 0.5)
+			sound (self, CHAN_VOICE, "player/paldie1.wav", 1, ATTN_NORM);
+		else 
+			sound (self, CHAN_VOICE, "player/paldie2.wav", 1, ATTN_NORM);
+	}
 	return;
 }
 
@@ -247,25 +258,53 @@ entity new;
 void ThrowHead (string gibname, float dm)
 {
 vector org;
+	if(self.decap==2)
+	{//Brains!
+		if(self.movedir=='0 0 0')
+		{
+			self.movedir=normalize(self.origin+self.view_ofs-self.enemy.origin+self.enemy.proj_ofs);
+			self.movedir_z=0;
+		}
+		traceline(self.origin + self.view_ofs, self.origin+self.view_ofs+self.movedir*100, FALSE, self);
+		if (trace_fraction < 1&&!trace_ent.flags2&FL_ALIVE)
+		{
+			self.wallspot=trace_endpos;
+			ZeBrains(trace_endpos, trace_plane_normal, random(1.3,2), rint(random(1)),random(360));
+		}
+		else
+			self.wallspot='0 0 0';
+	}
+
 	setmodel (self, gibname);
 	self.frame = 0;
-	self.movetype = MOVETYPE_BOUNCE;
 	self.takedamage = DAMAGE_NO;
 	if(self.classname!="player")
 		self.solid = SOLID_BBOX;
+	self.movetype = MOVETYPE_BOUNCE;
 
 	self.mass = 1;
 	self.view_ofs = '0 0 8';
 	self.proj_ofs='0 0 2';
-	setsize (self, '-4 -4 -4', '4 4 4');
 	self.hull=HULL_POINT;
 	org=self.origin;
 	org_z=self.absmax_z - 4;
+	setsize (self, '-4 -4 -4', '4 4 4');
 	setorigin(self,org);
-	self.velocity = VelocityForDamage (dm);
 	self.flags(-)FL_ONGROUND;
 	self.avelocity = randomv('0 -600 0', '0 600 0');
 
+	if(self.decap==2)
+		self.velocity = VelocityForDamage (dm)+'0 0 50';
+	else
+		self.velocity = VelocityForDamage (dm)+'0 0 200';
+
+	if(self.decap==2||(self.decap==1&&vlen(self.velocity)>300))
+	{
+		if(self.wallspot=='0 0 0')
+			self.wallspot=org;
+		self.pausetime=time+5;//watch splat or body
+	}
+
 	self.think=PlayerDead;
 	thinktime self : 1;
 }
@@ -283,6 +322,8 @@ void PlayerUnCrouching ()
 
 	setsize (self, '-16 -16 0', '16 16 56');	
 	self.hull=HULL_PLAYER;
+	if (self.viewentity.classname=="chasecam")
+		self.view_ofs = '0 0 0';
 
 	PlayerSpeed_Calc();
 	self.crouch_time = time;
@@ -295,8 +336,13 @@ void PlayerUnCrouching ()
 
 void PlayerCrouching ()
 {
+	if (self.health <= 0)
+		return;
+
 	setsize (self,'-16 -16 0','16 16 28');
 	self.hull=HULL_CROUCH;
+	if (self.viewentity.classname=="chasecam")
+		self.view_ofs = '0 0 0';
 	self.absorb_time=time + 0.3;
 
 	PlayerSpeed_Calc();
@@ -390,6 +436,15 @@ entity headless;
 
 void PlayerDie ()
 {
+	if(self.viewentity!=self)
+	{
+		if(self.viewentity.classname=="chasecam")
+			remove(self.viewentity);
+		self.viewentity=self;
+		CameraViewPort(self,self);
+		CameraViewAngles(self,self);
+	}
+
 	msg_entity=self;
 	WriteByte(MSG_ONE, SVC_CLEAR_VIEW_FLAGS);
 	WriteByte(MSG_ONE,255);
@@ -429,16 +484,22 @@ void PlayerDie ()
 	{
 		shatter();
 		ThrowHead(self.headmodel,self.health);
+		if(self.health<-99)
+			self.health=-99;
 		return;
 	}
     else if(self.decap)
     {
         DecapPlayer();
+		if(self.health<-99)
+			self.health=-99;
         return;
     }
     else if(self.health < -40||self.model=="models/sheep.mdl")//self.modelindex==modelindex_sheep)
 	{
         GibPlayer ();
+		if(self.health<-99)
+			self.health=-99;
 		return;
 	}
 
@@ -454,6 +515,8 @@ void PlayerDie ()
 		self.act_state=ACT_DEAD;
 		player_frames();
 	}
+	if(self.health<-99)
+		self.health=-99;
 }
 
 void set_suicide_frame ()
diff -urNp h2-0.42-demo/altdeath.hc h2-1.03/altdeath.hc
--- h2-0.42-demo/altdeath.hc	1997-08-28 02:38:10.000000000 +0300
+++ h2-1.03/altdeath.hc	1997-09-02 21:31:52.000000000 +0300
@@ -113,7 +113,6 @@ void shatter ()
 {
 vector dir,spin,org;
 float numshards,maxshards,rng;
-float sound_vol;
 string type;
 	if(self.movechain!=world&&!self.movechain.flags&FL_CLIENT)
 		remove(self.movechain);
@@ -130,17 +129,11 @@ string type;
 		particleexplosion(org,14,25,50);
 //		particle2(org,'-50 -50 -50','50 50 50',145,14,50);
 		if(self.deathtype=="ice shatter")
-		{
-			sound_vol = 1;
 			rng=600;
-		}
 		else
-		{
-			sound_vol = 0.25;
 			rng=self.size_x/2;
-		}
 		if(self.classname!="snowball")
-			sound(self,CHAN_BODY,"misc/icestatx.wav",sound_vol,ATTN_NORM);
+			sound(self,CHAN_BODY,"misc/icestatx.wav",1,ATTN_NORM);
 		type="ice";
 	}
 	else if(self.deathtype=="stone crumble")
diff -urNp h2-0.42-demo/archer.hc h2-1.03/archer.hc
--- h2-0.42-demo/archer.hc	1997-08-28 02:38:10.000000000 +0300
+++ h2-1.03/archer.hc	1997-09-04 21:57:40.000000000 +0300
@@ -131,7 +131,9 @@ void archer_duck () [++ $duck1..$duck14]
 		if (self.classname == "monster_archer")
 			sound (self, CHAN_VOICE, "archer/growl.wav", 1, ATTN_NORM);
 		else
-			sound (self, CHAN_VOICE, "archer/growl2.wav", 1, ATTN_NORM);
+			sound (self, CHAN_VOICE, "archer/pain2.wav", 1, ATTN_NORM);
+	else if (self.frame == $duck5)	
+			setsize(self,'-16 -16 0','16 16 28');
 	else if (self.frame==$duck7)
 	{
 		archer_check_defense();
@@ -141,13 +143,14 @@ void archer_duck () [++ $duck1..$duck14]
 
 void archer_check_defense()
 {
-	if(skill/10+self.skin/5<random())
+	entity enemy_proj;
+
+	if(random(2)>skill/10+self.skin/2)
 		return;
 
 	if (self.enemy.last_attack+0.5<time&&self.oldenemy.last_attack+0.5<time)
 		return;
 
-entity enemy_proj;
 	enemy_proj=look_projectiles();
 
 	if(!enemy_proj)
@@ -165,7 +168,6 @@ entity enemy_proj;
 			self.frame=$duck6;
 		else
 		{
-			setsize(self, '-16 -16 0', '16 16 28');
 			self.think=archer_duck;
 			thinktime self : 0;
 		}
@@ -239,7 +241,7 @@ void archer_dying (void) [++ $deathA1..$
 void() archer_die =
 {
 	// check for gib
-	if (self.health < -40)
+	if (self.health < -30)
 	{
 		chunk_death();
 		return;
@@ -293,7 +295,7 @@ void archer_pain (entity attacker, float
 		archer_pain_anim();
 }
 
-void archer_launcharrow (float arrowtype,vector spot1)
+void archer_launcharrow (float arrowtype,vector spot1,vector spot2)
 {
 	self.last_attack=time;
 
@@ -301,20 +303,22 @@ void archer_launcharrow (float arrowtype
 	if (arrowtype==GREEN_ARROW)
 	{
 		sound (self, CHAN_WEAPON, "archer/arrowg.wav", 1, ATTN_NORM);
-		Create_Missile(self,self.enemy,spot1, "models/akarrow.mdl","green_arrow",0,1000,archer_arrow_touch);
+		Create_Missile(self,spot1,spot2, "models/akarrow.mdl","green_arrow",0,1000,archer_arrow_touch);
 	}
 	else if (arrowtype==RED_ARROW)
 	{
 		sound (self, CHAN_WEAPON, "archer/arrowr.wav", 1, ATTN_NORM);
 		CreateRedFlash(spot1);
-		Create_Missile(self,self.enemy,spot1,"models/akarrow.mdl","red_arrow",1,1000,archer_arrow_touch);
+		Create_Missile(self,spot1,spot2,"models/akarrow.mdl","red_arrow",1,1000,archer_arrow_touch);
 	}
 	else
 	{
 		sound (self, CHAN_WEAPON, "archer/arrowg.wav", 1, ATTN_NORM);
 		CreateRedFlash(spot1);
-		Create_Missile(self,self.enemy,spot1,"models/akarrow.mdl","gold_arrow",2,1000,archer_arrow_touch);
+		Create_Missile(self,spot1,spot2,"models/akarrow.mdl","gold_arrow",2,1000,archer_arrow_touch);
 	}
+	newmis.drawflags(+)MLS_ABSLIGHT;
+	newmis.abslight=0.5;
 	thinktime newmis : 2.5;
 }
 /*-----------------------------------------
@@ -365,18 +369,24 @@ vector spot1, spot2;
 		{
 			tspeed=vlen(self.enemy.velocity);
 			if(tspeed>100)
-				spot2=extrapolate_pos_for_speed(spot1,1000,self.enemy,0.7);
+				spot2=extrapolate_pos_for_speed(spot1,1000,self.enemy,0.3);
 		}
 
-		if (!spot2)
+		if(spot2=='0 0 0')
+		{
 			spot2 = self.enemy.origin + self.enemy.view_ofs;
-
 			traceline (spot1, spot2, FALSE, self);
 
+			if(trace_ent.thingtype>=THINGTYPE_WEBS)
+				traceline (trace_endpos, spot2, FALSE, trace_ent);
+
 			if (trace_ent == self.enemy) 
 				ok=TRUE;
-			else if (trace_ent.health<=25&&trace_ent.takedamage&&(!trace_ent.flags&FL_MONSTER||trace_ent.classname=="player_sheep"))
+			else if((trace_ent.health<=25||trace_ent.thingtype>=THINGTYPE_WEBS)&&trace_ent.takedamage&&(!trace_ent.flags&FL_MONSTER||trace_ent.classname=="player_sheep"))
 				ok=TRUE;
+		}
+		else
+			ok=TRUE;
 
 		if(ok)
 		{	
@@ -393,16 +403,16 @@ vector spot1, spot2;
 			if (self.classname=="monster_archer")
 			{
 				if (random(1) < chance)			
-					archer_launcharrow(RED_ARROW,spot1);
+					archer_launcharrow(RED_ARROW,spot1,spot2);
 				else
-					archer_launcharrow(GREEN_ARROW,spot1);
+					archer_launcharrow(GREEN_ARROW,spot1,spot2);
 			}
 			else // Archer Lord
 			{
 				if (random(1) < chance)			
-					archer_launcharrow(GOLD_ARROW,spot1);
+					archer_launcharrow(GOLD_ARROW,spot1,spot2);
 				else
-					archer_launcharrow(RED_ARROW,spot1);
+					archer_launcharrow(RED_ARROW,spot1,spot2);
 			}
 			self.attack_finished = time + random(.5,1);
 			if(!self.skin)
@@ -508,9 +518,12 @@ vector spot1,spot2;
 
 		traceline (spot1, spot2, FALSE, self);
 
+		if (trace_ent.thingtype >= THINGTYPE_WEBS)
+			traceline(trace_endpos, spot2, FALSE, trace_ent);
+
 		if (trace_ent != self.enemy)
 		{
-		    if (trace_ent.health > 25 || !trace_ent.takedamage ||
+		    if ((trace_ent.health > 25 && trace_ent.thingtype!=THINGTYPE_GLASS) || !trace_ent.takedamage ||
 			(trace_ent.flags & FL_MONSTER && trace_ent.classname!="player_sheep"))
 		    {
 			sound (self, CHAN_WEAPON, "misc/null.wav", 1, ATTN_NORM);
@@ -557,9 +570,12 @@ void archerdraw () [++ $tranA1..$tranA13
 
 		traceline (spot1, spot2, FALSE, self);
 
+		if (trace_ent.thingtype >= THINGTYPE_WEBS)
+			traceline(trace_endpos, spot2, FALSE, trace_ent);
+
 		if (trace_ent != self.enemy)
 		{
-		    if (trace_ent.health > 25 || !trace_ent.takedamage ||
+		    if ((trace_ent.health > 25 && trace_ent.thingtype!=THINGTYPE_GLASS) || !trace_ent.takedamage ||
 			(trace_ent.flags & FL_MONSTER && trace_ent.classname!="player_sheep"))
 		    {
 			sound (self, CHAN_WEAPON, "misc/null.wav", 1, ATTN_NORM);
@@ -707,16 +723,7 @@ void monster_archer ()
 
 	if (!self.flags2 & FL_SUMMONED)
 	{
-		precache_model ("models/archer.mdl");
-		precache_model ("models/archerhd.mdl");
-		precache_model ("models/gspark.spr");
-		precache_sound ("archer/arrowg.wav");
-		precache_sound ("archer/arrowr.wav");
-		precache_sound ("archer/growl.wav");
-		precache_sound ("archer/pain.wav");
-		precache_sound ("archer/sight.wav");
-		precache_sound ("archer/death.wav");
-		precache_sound ("archer/draw.wav");
+		precache_archer();
 	}
 
 	CreateEntityNew(self,ENT_ARCHER,"models/archer.mdl",archer_die);
@@ -845,8 +852,11 @@ float ArcherCheckAttack (void)
 
 	traceline (spot1, spot2, FALSE, self);
 
+	if(trace_ent.thingtype>=THINGTYPE_WEBS)
+		traceline (trace_endpos, spot2, FALSE, trace_ent);
+
 	if (trace_ent != targ)
-		if(trace_ent.health>25||!trace_ent.takedamage||(trace_ent.flags&FL_MONSTER&&trace_ent.classname!="player_sheep"))
+		if((trace_ent.health>25&&trace_ent.thingtype!=THINGTYPE_GLASS)||!trace_ent.takedamage||(trace_ent.flags&FL_MONSTER&&trace_ent.classname!="player_sheep"))
 		{	
 			self.attack_state = AS_STRAIGHT;					
 			return FALSE;
@@ -858,7 +868,7 @@ float ArcherCheckAttack (void)
 	//     80% at MELEE range		
 	enemy_range = range(self.enemy);
 	if (enemy_range == RANGE_MELEE)
-		chance = 0.50;
+		chance = 0.40;
 	else if (enemy_range == RANGE_NEAR)
 		chance = 0.3;
 	else if (enemy_range == RANGE_MID)
diff -urNp h2-0.42-demo/artifact.hc h2-1.03/artifact.hc
--- h2-0.42-demo/artifact.hc	1997-08-28 02:38:10.000000000 +0300
+++ h2-1.03/artifact.hc	1997-09-04 21:57:40.000000000 +0300
@@ -49,7 +49,9 @@ void artifact_touch()
 	}
 	else if(self.netname == STR_SUPERHEALTHBOOST) // 5 limit
 	{
-		if ((other.cnt_sh_boost + 1) > 5)
+		if (deathmatch&&(other.cnt_sh_boost + 1) > 2)
+			return;	
+		else if ((other.cnt_sh_boost + 1) > 5)
 			return;	
 		else
 			other.cnt_sh_boost += 1; 
@@ -91,7 +93,7 @@ void artifact_touch()
 	}
 	else if(self.netname == STR_GLYPH)
 	{
-		if(other.playerclass==CLASS_NECROMANCER)
+		if(other.playerclass==CLASS_CRUSADER)
 		{
 			if ((other.cnt_glyph + 5) > 50)
 				return;	
@@ -164,9 +166,8 @@ void artifact_touch()
 	}
 	else
 	{
-		sprint (other, STR_THE);
+		sprint (other, STR_YOUHAVEACQUIRED);
 		sprint (other, self.netname);
-		sprint (other, STR_ISYOURS);
 	}
 
 	sprint (other,"\n");
@@ -333,9 +334,13 @@ void use_super_healthboost()
 {
 	self.healthtime = time + .05;
 
-	if(self.health<1000)
+	if(self.health<-100)
+		self.health=1;
+	else if(self.health<0)
+		self.health+=100;
+	else if (self.health < 899)
 		self.health = self.health + 100;
-	if (self.health > 999)
+	else if (self.health > 999)
 		self.health = 999;
 
 	self.cnt_sh_boost -= 1;
diff -urNp h2-0.42-demo/assgren.hc h2-1.03/assgren.hc
--- h2-0.42-demo/assgren.hc	1997-08-28 02:38:10.000000000 +0300
+++ h2-1.03/assgren.hc	1997-09-03 09:13:42.000000000 +0300
@@ -18,9 +18,6 @@ $base BASE skin
 $skin skin
 $flags 0
 
-// O.S.: what frame was here in original demo???  $select1 is 1, not 0.
-$frame UNKNOWN      
-
 $frame select1      select2      select3      select4      select5      
 $frame select6      
 
@@ -71,7 +68,7 @@ entity missile;
 			missile.velocity = v_forward*missile.speed + v_up * 200 + crandom()*v_right*10 + crandom()*v_up*10;
 		else
 		{
-			missile.velocity = aim(self, missile.o_angle,10000);
+			missile.velocity = aim(self, missile.o_angle,1000);
 	        missile.velocity = missile.velocity * missile.speed;
             missile.velocity_z = 200;
 		}
@@ -97,10 +94,10 @@ float attack_counter,number_explosions;
         while(attack_counter<number_explosions)
         {
 			attack_counter+=1;
-			if(random()<0.5)
+//			if(random()<0.5)
 				missile=spawn_temp();
-			else
-				missile=spawn();
+//			else
+//				missile=spawn();
             missile.owner=self.owner;
             missile.classname="minigrenade";
 			if(self.classname=="multigrenade")
@@ -176,7 +173,7 @@ entity missile;
 			missile.velocity = v_forward*missile.speed + v_up * 200 + crandom()*v_right*10 + crandom()*v_up*10;
 		else
 		{
-			missile.velocity = aim(self, missile.o_angle,10000);
+			missile.velocity = aim(self, missile.o_angle,1000);
 	        missile.velocity = missile.velocity * missile.speed;
             missile.velocity_z = 200;
 		}
diff -urNp h2-0.42-demo/boner.hc h2-1.03/boner.hc
--- h2-0.42-demo/boner.hc	1997-08-28 02:38:10.000000000 +0300
+++ h2-1.03/boner.hc	1997-09-04 21:57:40.000000000 +0300
@@ -190,7 +190,7 @@ string hitsound;
 	else
 	{
 		hitsound="necro/bonenwal.wav";
-		T_RadiusDamage(self,self.owner,self.dmg*2,self);
+		T_RadiusDamage(self,self.owner,self.dmg*2,self.owner);
 	}
 //FIXME: add sprite, particles, sound
 	starteffect(CE_WHITE_SMOKE, self.origin,'0 0 0', HX_FRAME_TIME);
@@ -208,11 +208,12 @@ vector shard_vel;
 	newmis.movetype=MOVETYPE_BOUNCE;
 	newmis.solid=SOLID_BBOX;
 	newmis.touch=bone_shard_touch;
-	newmis.dmg=10;
+	newmis.dmg=15;
 
 	newmis.speed=777;
 	trace_fraction=0;
-	while(trace_fraction!=1)
+	trace_ent=world;
+	while(trace_fraction!=1&&!trace_ent.takedamage)
 	{
 		shard_vel=randomv('1 1 1','-1 -1 -1');
 		traceline(self.origin,self.origin+shard_vel*36,TRUE,self);
@@ -239,21 +240,13 @@ float shard_count;
 
 void bone_power_touch ()
 {
-if (other==self.owner)
-	return;
-
 vector randomvec;
+
 	sound(self,CHAN_WEAPON,"necro/bonephit.wav",1,ATTN_NORM);
 
 	if(other.takedamage)
-		T_Damage(other, self,self.owner,self.dmg);
-	else
-		T_RadiusDamage(self, self.owner,self.dmg*2,self.owner);
-
-	self.solid=SOLID_NOT;
-	bone_shatter();
-	starteffect(CE_BONE_EXPLOSION, self.origin-self.movedir*6,'0 0 0', HX_FRAME_TIME);
-
+	{
+		T_Damage(other, self,self.owner,self.dmg*2);
 		randomvec=randomv('-20 -20 -20','20 20 20');
 		starteffect(CE_GHOST, self.origin-self.movedir*8+randomvec,'0 0 30'+randomvec, 0.1);
 		randomvec=randomv('-20 -20 -20','20 20 20');
@@ -262,13 +255,24 @@ vector randomvec;
 		starteffect(CE_GHOST, self.origin-self.movedir*8+randomvec,'0 0 30'+randomvec, 0.1);
 		randomvec=randomv('-20 -20 -20','20 20 20');
 		starteffect(CE_GHOST, self.origin-self.movedir*8+randomvec,'0 0 30'+randomvec, 0.1);
+	}
+	self.flags2(+)FL2_ADJUST_MON_DAM;
+	T_RadiusDamage(self,self.owner,self.dmg,other);
 
+	self.solid=SOLID_NOT;
+	bone_shatter();
+	starteffect(CE_BONE_EXPLOSION, self.origin-self.movedir*6,'0 0 0', HX_FRAME_TIME);
 	particle4(self.origin,50,random(368,384),PARTICLETYPE_GRAV,10);
 	remove(self);	
 }
 
 void power_trail()
 {
+	if(self.owner.classname!="player")
+		bprint("ERROR: Bone powered owner not player!\n");
+	if(self.touch==SUB_Null)
+		bprint("ERROR: Bone powered touch is null!\n");
+
 	particle4(self.origin,10,random(368,384),PARTICLETYPE_SLOWGRAV,3);
 	thinktime self : 0.05;
 }
@@ -334,8 +338,8 @@ vector org;
 	{
 		self.punchangle_x=-2;
 		sound(self,CHAN_WEAPON,"necro/bonefpow.wav",1,ATTN_NORM);
-		self.attack_finished=time + 1;
-		newmis.dmg=50;
+		self.attack_finished=time + 1.3;
+		newmis.dmg=200;
 		newmis.frags=TRUE;
 		newmis.takedamage=DAMAGE_YES;
 		newmis.health=3;
@@ -417,10 +421,7 @@ void boneshard_fire (void)
 		boneshard_ready();
 	else if(self.weaponframe==$fire3)
 		if(self.artifact_active&ART_TOMEOFPOWER)
-		{
 			bone_fire(TRUE,'0 0 0');
-			self.attack_finished = time + 1;
-		}
 		else
 			bone_normal();
 
diff -urNp h2-0.42-demo/camera.hc h2-1.03/camera.hc
--- h2-0.42-demo/camera.hc	1997-08-28 02:38:10.000000000 +0300
+++ h2-1.03/camera.hc	1997-09-04 21:57:40.000000000 +0300
@@ -1,6 +1,26 @@
 /*
  * $Header: /H3/game/hcode/camera.hc 20    9/09/97 3:59p Mgummelt $
  */
+void(entity voyeur, entity viewthing) CameraViewPort =
+{//FIXME: Doesn't seem to work if it's out of vis- only 
+//	remembers last spot it was at last time it WAS in vis
+	msg_entity = voyeur;                        
+	WriteByte (MSG_ONE, SVC_SETVIEWPORT);   
+	WriteEntity (MSG_ONE, viewthing);      
+};
+
+void(entity voyeur, entity viewthing) CameraViewAngles =
+{//FIXME: Doesn't seem to work if it's out of vis- only 
+//	remembers last angles it was at last time it WAS in vis
+	msg_entity = voyeur;                        
+	WriteByte (MSG_ONE, SVC_SETVIEWANGLES); 
+	if(viewthing.classname=="camera_remote")
+		WriteAngle(MSG_ONE, 360-viewthing.angles_x);
+	else
+		WriteAngle(MSG_ONE, viewthing.angles_x);
+	WriteAngle(MSG_ONE, viewthing.angles_y);
+	WriteAngle(MSG_ONE, viewthing.angles_z);
+};
 
 /*QUAKED target_null (1 0 0) (-8 -8 -8) (8 8 8)
 A null target for the camera 
@@ -42,6 +62,9 @@ void CameraUse (void)
 
 	stuffcmd (other, "bf\n");
 
+	if(deathmatch)
+		other.view_ofs='0 0 0';
+
 	other.cameramode = self;
 	other.camera_time = time + self.wait;
 
@@ -49,9 +72,7 @@ void CameraUse (void)
 	other.lastweapon = other.weaponmodel;
 	other.weaponmodel = string_null;
 
-	msg_entity = other;
-	WriteByte (MSG_ONE, 5);					// 5 = SVC_SETVIEWPORT
-	WriteEntity (MSG_ONE, self);
+	CameraViewPort(other,self);
 	WriteByte (MSG_ONE, 10);				// 10 = SVC_SETVIEWANGLES
 	WriteAngle (MSG_ONE,360 - self.angles_x);		// pitch
 	WriteAngle (MSG_ONE,self.angles_y);		// yaw
@@ -73,18 +94,15 @@ void CameraReturn(void)
 
 	self.cameramode = world;
 	self.weaponmodel = self.lastweapon;
+	self.view_ofs=self.proj_ofs+'0 0 6';
 
 	stuffcmd (self, "bf\n");
 
-	msg_entity = self;
 	self.angles = self.oldangles;
+	self.idealroll = 0;
 
-	WriteByte (MSG_ONE, 5);					// 5 = SVC_SETVIEWPORT
-	WriteEntity (MSG_ONE, self);
-	WriteByte (MSG_ONE, 10);				// 10 = SVC_SETVIEWANGLES
-	WriteAngle (MSG_ONE, self.angles_x);
-	WriteAngle (MSG_ONE, self.angles_y);
-	WriteAngle (MSG_ONE, self.angles_z);
+	CameraViewPort(self,self);
+	CameraViewAngles(self,self);
 
 	snd_ent = spawn ();
 	snd_ent.origin = self.origin;
@@ -147,3 +165,68 @@ void camera_remote (void)
 	setsize(self, '-1 -1 0', '1 1 1');
 }
 
+void CameraThink ()
+{
+vector viewdir;
+vector spot1,spot2;
+	self.level=cvar("chase_back");
+	if(self.cnt<self.level)
+		self.cnt+=1;
+	else if(self.cnt>self.level)
+		self.cnt-=1;
+
+	makevectors(self.owner.v_angle);
+	viewdir=normalize(v_forward);
+	spot1=self.owner.origin+self.owner.proj_ofs+'0 0 6';
+	spot2=spot1-viewdir*self.cnt;
+	traceline(spot1,spot2,TRUE,self.owner);
+
+	viewdir=normalize(spot1-trace_endpos);
+	setorigin(self,trace_endpos+viewdir*4);
+
+	self.think=CameraThink;
+	thinktime self : 0;
+}
+
+void MakeCamera ()
+{
+	if(self.viewentity.classname=="chasecam")
+	{
+//Turn off camera view
+		CameraViewPort(self,self);
+		CameraViewAngles(self,self);
+		remove(self.viewentity);
+		self.viewentity=self;
+		self.view_ofs=self.proj_ofs+'0 0 6';
+		self.attack_finished=0;
+		self.weaponmodel=self.lastweapon;
+		W_SetCurrentWeapon();
+	}
+	else
+	{
+		self.lastweapon=self.weaponmodel;
+		self.oldweapon=0;
+		self.weaponmodel="";
+		makevectors(self.v_angle);
+		self.viewentity=spawn();
+		self.viewentity.owner=self;
+		self.viewentity.angles=self.angles;
+		self.viewentity.level=cvar("chase_back");
+		if(!self.viewentity.level)
+			self.viewentity.level=68;
+		self.viewentity.cnt=4;
+		self.viewentity.classname="chasecam";
+		self.view_ofs='0 0 0';
+
+		setmodel(self.viewentity,"models/null.spr");
+		setsize(self.viewentity, '0 0 0','0 0 0');
+		setorigin(self.viewentity,self.origin+self.proj_ofs+'0 0 6'-v_forward*4);
+
+		CameraViewPort(self,self.viewentity);
+		CameraViewAngles(self,self.viewentity);
+
+		self.viewentity.think=CameraThink;
+		thinktime self.viewentity : 0;
+	}
+}
+
diff -urNp h2-0.42-demo/chunk.hc h2-1.03/chunk.hc
--- h2-0.42-demo/chunk.hc	1997-08-28 02:38:10.000000000 +0300
+++ h2-1.03/chunk.hc	1997-09-04 21:57:40.000000000 +0300
@@ -3,6 +3,53 @@
  */
 void ThrowSolidHead (float dm);
 
+void blood_splatter()
+{
+	SpawnPuff(self.origin,normalize(self.velocity)*-20,10,self);
+	remove(self);
+}
+
+void ThrowBlood (vector org,vector dir)
+{
+entity blood;
+	blood=spawn_temp();
+	blood.solid=SOLID_BBOX;
+	blood.movetype=MOVETYPE_TOSS;
+	blood.touch=blood_splatter;
+	blood.velocity=dir;
+	blood.avelocity=randomv('-700 -700 -700','700 700 700');
+	blood.thingtype=THINGTYPE_FLESH;
+
+	setmodel(blood,"models/bldspot4.spr");  // 8 x 8 sprite size
+	setsize(blood,'0 0 0','0 0 0');
+	setorigin(blood,org);
+}
+
+void ZeBrains (vector spot, vector normal, float scaling, float face, float roll)
+{
+	newmis=spawn();
+	newmis.scale=scaling;
+	newmis.angles=vectoangles(normal);
+	if(face)
+		newmis.angles_y+=180;
+	newmis.angles_z=roll;
+
+	setmodel(newmis,"models/brains.mdl");
+	setsize(newmis,'0 0 0','0 0 0');
+	setorigin(newmis,spot+normal*1);
+
+	newmis.think=corpseblink;
+	thinktime newmis : 30;
+
+	spot=newmis.origin;
+	makevectors(normal);
+	ThrowBlood(spot,(normal+random(0.75,0.75)*v_up+random(0.75,0.75)*v_right)*random(200,400));
+	ThrowBlood(spot,(normal+random(0.75,0.75)*v_up+random(0.75,0.75)*v_right)*random(200,400));
+	ThrowBlood(spot,(normal+random(0.75,0.75)*v_up+random(0.75,0.75)*v_right)*random(200,400));
+	ThrowBlood(spot,(normal+random(0.75,0.75)*v_up+random(0.75,0.75)*v_right)*random(200,400));
+	ThrowBlood(spot,(normal+random(0.75,0.75)*v_up+random(0.75,0.75)*v_right)*random(200,400));
+}
+
 void ChunkRemove (void)
 {
 	chunk_cnt-=1;
@@ -155,7 +202,16 @@ void CreateModelChunks (vector space,flo
 	}
 	else if (self.thingtype==THINGTYPE_FLESH)
 	{
-		if (final < 0.33)
+		if(self.model=="models/spider.mdl")
+		{
+			if (final < 0.33)
+				setmodel (chunk, "models/sflesh1.mdl");
+			else if (final < 0.66)
+				setmodel (chunk, "models/sflesh2.mdl");
+			else
+				setmodel (chunk, "models/sflesh3.mdl");
+		}
+		else if (final < 0.33)
 			setmodel (chunk, "models/flesh1.mdl");
 		else if (final < 0.66)
 			setmodel (chunk, "models/flesh2.mdl");
@@ -164,18 +220,6 @@ void CreateModelChunks (vector space,flo
 		if(self.classname=="hive")
 			chunk.skin=1;
 	}
-	else if (self.thingtype == THINGTYPE_GREYSTONE)
-	{
-		if (final < 0.25)
-			setmodel (chunk, "models/schunk1.mdl");
-		else if (final < 0.5)
-			setmodel (chunk, "models/schunk2.mdl");
-		else if (final < 0.75)
-			setmodel (chunk, "models/schunk3.mdl");
-		else
-			setmodel (chunk, "models/schunk4.mdl");
-		chunk.skin = 0;
-	}
 	else if (self.thingtype==THINGTYPE_BROWNSTONE)
 	{
 		if (final < 0.25)
@@ -325,8 +369,18 @@ void CreateModelChunks (vector space,flo
 		chunk.drawflags(+)DRF_TRANSLUCENT|MLS_ABSLIGHT;
 		chunk.abslight=0.5;
 	}
-	else
-		return;
+	else// if (self.thingtype==THINGTYPE_GREYSTONE)
+	{
+		if (final < 0.25)
+			setmodel (chunk, "models/schunk1.mdl");
+		else if (final < 0.50)
+			setmodel (chunk, "models/schunk2.mdl");
+		else if (final < 0.75)
+			setmodel (chunk, "models/schunk3.mdl");
+		else 
+			setmodel (chunk, "models/schunk4.mdl");
+		chunk.skin = 0;
+	}
 
 	setsize (chunk, '0 0 0', '0 0 0');
 	chunk.movetype = MOVETYPE_BOUNCE;
@@ -337,6 +391,9 @@ void CreateModelChunks (vector space,flo
 	chunk.avelocity_y = random(1200);
 	chunk.avelocity_z = random(1200);
 
+	if(self.classname=="monster_eidolon")
+		chunk.scale=random(2.1,2.5);
+	else
 		chunk.scale = random(scalemod,scalemod + .1);
 
 	chunk.ltime = time;
@@ -451,6 +508,19 @@ void BloodSplat(void)
 
 }
 
+void chunk_reset ()
+{
+	chunk_cnt=FALSE;
+	remove(self);
+}
+
+void make_chunk_reset ()
+{
+	newmis=spawn();
+	newmis.think=chunk_reset;
+	thinktime newmis : 1.5;
+}
+
 void chunk_death (void)
 {
 	vector space;
@@ -468,19 +538,19 @@ void chunk_death (void)
 	model_cnt = spacecube / 8192;   // (16 * 16 * 16)
 
 	if ((self.thingtype==THINGTYPE_GLASS) || (self.thingtype==THINGTYPE_CLEARGLASS) || (self.thingtype==THINGTYPE_REDGLASS))
-		sound (self, CHAN_VOICE, "fx/glassbrk.wav", 1, ATTN_NORM);
+		deathsound="fx/glassbrk.wav";
 	else if ((self.thingtype==THINGTYPE_WOOD) || (self.thingtype==THINGTYPE_WOOD_METAL))
 		if(self.classname=="bolt")
-			sound (self, CHAN_VOICE, "assassin/arrowbrk.wav", 1, ATTN_NORM);
+			deathsound="assassin/arrowbrk.wav";
 		else	
-			sound (self, CHAN_VOICE, "fx/woodbrk.wav", 1, ATTN_NORM);
+			deathsound="fx/woodbrk.wav";
 	else if ((self.thingtype==THINGTYPE_GREYSTONE) || (self.thingtype==THINGTYPE_BROWNSTONE) || 
 		(self.thingtype==THINGTYPE_WOOD_STONE) || (self.thingtype==THINGTYPE_METAL_STONE))
-		sound (self, CHAN_VOICE, "fx/wallbrk.wav", 1, ATTN_NORM);
+		deathsound="fx/wallbrk.wav";
 	else if ((self.thingtype==THINGTYPE_METAL) || (self.thingtype==THINGTYPE_METAL_CLOTH))
-		sound (self, CHAN_VOICE, "fx/metalbrk.wav", 1, ATTN_NORM);
+		deathsound="fx/metalbrk.wav";
 	else if ((self.thingtype==THINGTYPE_CLOTH) || (self.thingtype==THINGTYPE_REDGLASS))
-		sound (self, CHAN_VOICE, "fx/clothbrk.wav", 1, ATTN_NORM);
+		deathsound="fx/clothbrk.wav";
 	else if (self.thingtype==THINGTYPE_FLESH)
 	{
 		//Made temporary changes to make weapons look and sound
@@ -490,16 +560,19 @@ void chunk_death (void)
 		else
 			deathsound="player/gib1.wav";
 		sound(self,CHAN_AUTO,deathsound,1,ATTN_NORM);
+		self.level=-666;
 	}
 	else if (self.thingtype==THINGTYPE_CLAY)
-		sound (self, CHAN_VOICE, "fx/claybrk.wav", 1, ATTN_NORM);
+		deathsound="fx/claybrk.wav";
 	else if ((self.thingtype==THINGTYPE_LEAVES)  || (self.thingtype==THINGTYPE_WOOD_LEAF))
-		sound (self, CHAN_VOICE, "fx/leafbrk.wav", 1, ATTN_NORM);
+		deathsound="fx/leafbrk.wav";
 	else if (self.thingtype==THINGTYPE_ICE)
-		sound (self, CHAN_VOICE, "misc/icestatx.wav", 1, ATTN_NORM);
+		deathsound="misc/icestatx.wav";
 	else
-		sound (self, CHAN_VOICE, "fx/wallbrk.wav", 1, ATTN_NORM);
+		deathsound="fx/wallbrk.wav";
 
+	if(self.level!=-666)
+		sound (self, CHAN_VOICE, deathsound, 1, ATTN_NORM);
 	// Scale        0 - 50,000   small 
 	//		   50,000 - 500,000  medium
 	//	      500,000            large
@@ -532,7 +605,7 @@ void chunk_death (void)
 
 	while (model_cnt>0)
 	{
-		if (chunk_cnt < CHUNK_MAX)
+		if (chunk_cnt < CHUNK_MAX*2)
 		{
 			CreateModelChunks(space,scalemod);
 			chunk_cnt+=1;
@@ -540,6 +613,8 @@ void chunk_death (void)
 
 		model_cnt-=1;
 	}
+	
+	make_chunk_reset();
 
 	if(self.classname=="monster_eidolon")
 		return;
diff -urNp h2-0.42-demo/client.hc h2-1.03/client.hc
--- h2-0.42-demo/client.hc	1997-08-28 02:38:10.000000000 +0300
+++ h2-1.03/client.hc	1997-09-04 21:57:40.000000000 +0300
@@ -11,6 +11,21 @@ void() DecrementSuperHealth;
 void CheckRings (void);
 
 
+void FreezeAllEntities(void)
+{
+	entity search;
+
+	search = nextent(world);
+	while(search != world)
+	{
+		if (search.classname != "player")
+		{
+			thinktime search : 99999;
+		}
+		search = nextent(search);
+	}
+}
+
 /*
 =============================================================================
 
@@ -176,6 +191,115 @@ void() execute_changelevel =
 	}	
 };
 
+void FindDMLevel(void)
+{
+	serverflags (+) SFL_NEW_UNIT;
+
+	nextmap = string_null;
+
+	if (cvar("registered"))
+	{
+		if (mapname == "demo1")
+			nextmap = "demo2";
+		else if (mapname == "demo2")
+			nextmap = "demo3";
+		else if (mapname == "demo3")
+			nextmap = "village1";
+		else if (mapname == "village1")
+			nextmap = "village2";
+		else if (mapname == "village2")
+			nextmap = "village3";
+		else if (mapname == "village3")
+			nextmap = "village4";
+		else if (mapname == "village4")
+			nextmap = "village5";
+		else if (mapname == "village5")
+			nextmap = "rider1a";
+		else if (mapname == "rider1a")
+			nextmap = "demo1";
+
+		else if (mapname == "meso1")
+			nextmap = "meso2";
+		else if (mapname == "meso2")
+			nextmap = "meso3";
+		else if (mapname == "meso3")
+			nextmap = "meso4";
+		else if (mapname == "meso4")
+			nextmap = "meso5";
+		else if (mapname == "meso5")
+			nextmap = "meso6";
+		else if (mapname == "meso6")
+			nextmap = "meso8";
+		else if (mapname == "meso8")
+			nextmap = "meso9";
+		else if (mapname == "meso9")
+			nextmap = "meso1";
+
+		else if (mapname == "egypt1")
+			nextmap = "egypt2";
+		else if (mapname == "egypt2")
+			nextmap = "egypt3";
+		else if (mapname == "egypt3")
+			nextmap = "egypt4";
+		else if (mapname == "egypt4")
+			nextmap = "egypt5";
+		else if (mapname == "egypt5")
+			nextmap = "egypt6";
+		else if (mapname == "egypt6")
+			nextmap = "egypt7";
+		else if (mapname == "egypt7")
+			nextmap = "rider2c";
+		else if (mapname == "rider2c")
+			nextmap = "egypt1";
+
+		else if (mapname == "romeric1")
+			nextmap = "romeric2";
+		else if (mapname == "romeric2")
+			nextmap = "romeric3";
+		else if (mapname == "romeric3")
+			nextmap = "romeric4";
+		else if (mapname == "romeric4")
+			nextmap = "romeric5";
+		else if (mapname == "romeric5")
+			nextmap = "romeric6";
+		else if (mapname == "romeric6")
+			nextmap = "romeric7";
+		else if (mapname == "romeric7")
+			nextmap = "romeric1";
+
+		else if (mapname == "cath")
+			nextmap = "tower";
+		else if (mapname == "tower")
+			nextmap = "castle4";
+		else if (mapname == "castle4")
+			nextmap = "castle5";
+		else if (mapname == "castle5")
+			nextmap = "eidolon";
+		else if (mapname == "eidolon")
+			nextmap = "cath";
+
+		else if (mapname == "ravdm1")
+			nextmap = "ravdm2";
+		else if (mapname == "ravdm2")
+			nextmap = "ravdm3";
+		else if (mapname == "ravdm3")
+			nextmap = "ravdm4";
+		else if (mapname == "ravdm4")
+			nextmap = "ravdm5";
+		else if (mapname == "ravdm5")
+			nextmap = "ravdm1";
+	}
+	else
+	{
+		if (mapname == "demo1")
+			nextmap = "demo2";
+		else if (mapname == "demo2")
+			nextmap = "ravdm1";
+		else if (mapname == "ravdm1")
+			nextmap = "demo1";
+	}
+}
+
 void() changelevel_touch =
 {
 
@@ -204,17 +328,14 @@ void() changelevel_touch =
 		bprint (" exited the level\n");
 	}
 	
-	if (deathmatch && mapname == "demo2" && !cvar("registered"))
-		nextmap = "ravdm1";
+	if (deathmatch)
+		FindDMLevel();
 	else
 	{
 		nextmap = self.map;
 		nextstartspot = self.target;
 	}
 
-	if (deathmatch)
-		serverflags (+) SFL_NEW_UNIT;
-
 	SUB_UseTargets ();
 
 	if (!cvar("registered") && nextmap == "village1")
@@ -224,6 +345,7 @@ void() changelevel_touch =
 		intermission_exittime = time + 20;
 		WriteByte (MSG_ALL, SVC_INTERMISSION);
 		WriteByte (MSG_ALL, 5);
+		FreezeAllEntities();
 		return;
 	}
 
@@ -371,7 +493,8 @@ entity() SelectSpawnPoint =
 		{
 			spot = find(spot, classname, "info_player_coop");
 			if (spot != world && 
-			    (spot.targetname == startspot))
+			    (spot.targetname == startspot) ||
+				(startspot == string_null && spot.spawnflags & 1))
 			{
 				thing = findradius(spot.origin, 64);
 				ok = TRUE;
@@ -479,14 +602,14 @@ entity spot;
 	self.movetype = MOVETYPE_WALK;
 	self.deathtype="";
 	self.viewentity=self;
+	self.wallspot='0 0 0';
 	self.scale=1;
 	self.skin=0;
-	self.drawflags=0;
+	self.drawflags=self.abslight=self.effects=0;
 	self.flags(+)FL_CLIENT;
 	self.flags2(+)FL_ALIVE;
 	self.air_finished = time + 12;
 	self.dmg = 2;   		// initial water damage
-	self.effects=0;
 	self.thingtype=THINGTYPE_FLESH;
 	self.adjust_velocity = '-999 -999 -999';
 //Reset all time-based fields
@@ -543,10 +666,23 @@ entity spot;
 		}
 	}
 
-	if(!self.max_health)
+	if(self.max_health<=0)
 		stats_NewPlayer(self);
-	
+	else
 		self.health = self.max_health;
+	
+	if(self.max_health<=0||self.health<=0)
+	{
+		dprint("ERROR: Respawned Dead!\n");
+		dprintf("Class: %s\n",self.playerclass);
+		dprint("Map: ");
+		dprint(mapname);
+		dprint("\n");
+		dprintf("Max: %s\n",self.max_health);
+		dprintf("Health: %s\n",self.health);
+		dprint("Autofix: health default to 100\n");
+		self.health=self.max_health=100;
+	}
 
 	self.deadflag = DEAD_NO;
 
@@ -651,6 +787,7 @@ entity spot;
 
 	self.movetype=MOVETYPE_WALK;
 	self.viewentity=self;
+	self.wallspot='0 0 0';
 	self.deathtype="";
 	self.act_state =
 	self.onfire=
@@ -805,25 +942,12 @@ void() NextLevel =
 {
 	entity o;
 
-	if (mapname == "demo1")
-	{
-		mapname = "demo2";
-		o = spawn ();
-		o.map = mapname;
-	}
-	else if (mapname == "demo2")
-	{
-		mapname = "ravdm1";
-		o = spawn ();
-		o.map = mapname;
-	}
-	else if (mapname == "ravdm1")
-	{
-		mapname = "demo1";
-		o = spawn ();
-		o.map = mapname;
-	}
-	else
+	FindDMLevel();
+
+	o = spawn();
+	o.map = nextmap;
+
+	if (nextmap == "")
 	{
 		// find a trigger changelevel
 		o = find(world, classname, "trigger_changelevel");
@@ -831,14 +955,11 @@ void() NextLevel =
 		// go back to start if no trigger_changelevel
 		if (!o)
 		{
-			mapname = "start";
-			o = spawn ();
+			mapname = "demo1";
 			o.map = mapname;
 		}
 	}
 
-	nextmap = o.map;
-
 	gameover = TRUE;
 	
 	if (o.nextthink < time)
@@ -1027,7 +1148,6 @@ void() PlayerJump =
 
 
 
-.float dmgtime;
 
 /*
 ===========
@@ -1204,6 +1324,7 @@ void CheckCrouch (void)
 
 void CheckIncapacities ()
 {
+vector dir;
 	if(self.frozen>0)
 		if(self.flags2&FL_ALIVE&&self.health)
 		{
@@ -1224,6 +1345,7 @@ void CheckIncapacities ()
 					self.skin=self.oldskin;
 				self.colormap=0;
 				self.abslight=0;
+				self.thingtype=THINGTYPE_FLESH;
 				self.drawflags(-)DRF_TRANSLUCENT|MLS_ABSLIGHT;
 				self.frozen=FALSE;
 				self.artifact_active(-)ARTFLAG_FROZEN;
@@ -1233,8 +1355,38 @@ void CheckIncapacities ()
 			self.frozen=self.pausetime=self.teleport_time=0;
 
 
-	if(self.pausetime>time)
+	if(self.pausetime>time&&self.model!=self.headmodel)
 	{
+		if(self.model=="models/flesh1.mdl")
+		{
+			dir=normalize(self.wallspot-self.origin+self.view_ofs);
+			dir=vectoangles(dir);
+			self.o_angle_x=dir_x*-1;
+			self.o_angle_y=dir_y;
+			self.o_angle_z=self.v_angle_z;
+		}
+		else if(!self.flags2&FL_ALIVE&&self.enemy.flags2&FL_ALIVE)//&&visible(self.enemy))
+		{//face enemy
+			self.o_angle=normalize(self.enemy.origin+self.enemy.proj_ofs-self.origin+self.view_ofs);
+			self.o_angle=vectoangles(self.o_angle);
+			self.o_angle_x*=-1;//have to reverse the pitch
+			if(self.o_angle_y>180)
+				self.o_angle_y-=360;
+			else if(self.o_angle_y<-180)
+				self.o_angle_y+=360;
+			self.o_angle_z=self.v_angle_z;
+			self.o_angle-=self.v_angle;
+			if(self.o_angle_x>7)
+				self.o_angle_x=7;
+			else if(self.o_angle_x<-7)
+				self.o_angle_x=-7;
+			if(self.o_angle_y>10)
+				self.o_angle_y=10;
+			else if(self.o_angle_y<-10)
+				self.o_angle_y=-10;
+			self.o_angle+=self.v_angle;
+		}
+
         msg_entity = self;
 	    WriteByte (MSG_ONE, 10);
         WriteAngle (MSG_ONE, self.o_angle_x);
@@ -1274,6 +1426,7 @@ void() PlayerPreThink =
 	}
 
 	if (self.view_ofs == '0 0 0'&&
+		self.viewentity.classname!="chasecam"&&
 		!self.button0&&!self.button2)//Causing them to not be able to respawn?
 		return;		// intermission or finale
 
@@ -1295,9 +1448,15 @@ void() PlayerPreThink =
 
 	if(self.viewentity!=self)
 	{
-		self.weaponmodel=self.viewentity.weaponmodel;
-		self.weaponframe=self.viewentity.weaponframe;
-		CameraView(self, self.viewentity);
+		CameraViewPort(self,self.viewentity);
+		if(self.viewentity.classname!="chasecam")//&&self.viewentity.classname!="camera_remote")
+		{
+			self.weaponframe=self.viewentity.weaponframe;
+			self.weaponmodel=self.viewentity.weaponmodel;
+			CameraViewAngles(self,self.viewentity);
+		}
+		else
+			self.weaponmodel="";
 	}
 
 	makevectors (self.v_angle);		// is this still used
@@ -1450,7 +1609,9 @@ void CheckRings (void)
 				self.ring_flight = 0;
 				self.rings (-) RING_FLIGHT;
 				self.rings_active (-) RING_FLIGHT;
-				player_fly();
+				player_stopfly();
+				if (deathmatch)
+					self.cnt_flight -= 1;
 			}
 			self.ring_flight_time = time + 1;
 		}
@@ -1669,7 +1830,13 @@ void() CheckPowerups =
 		}
 	}
 
-	if(self.camera_time < time && self.cameramode != world)
+	if(self.cameramode != world)
+		if(deathmatch)
+		{
+			if(self.velocity!='0 0 0'||self.pain_finished>time||self.button0||self.button2)
+				CameraReturn ();
+		}
+		else if (self.camera_time < time)
 			CameraReturn ();
 };
 
@@ -1693,7 +1860,7 @@ void PlayerTouch (void)
 		return;
 	}
 
-	if(((vlen(self.velocity)*(self.mass/10)>=100&&self.last_onground+0.3<time)||other.thingtype==THINGTYPE_GLASS)&&self.last_impact+0.1<=time)
+	if(((vlen(self.velocity)*(self.mass/10)>=100&&self.last_onground+0.3<time)||other.thingtype>=THINGTYPE_WEBS)&&self.last_impact+0.1<=time)
 		obj_fly_hurt(other);
 
 	if(other==world)
@@ -1723,6 +1890,9 @@ void() PlayerPostThink =
 
 	W_WeaponFrame ();
 
+	if(self.viewentity.classname=="chasecam")
+		self.weaponmodel="";
+
 // check to see if player landed and play landing sound	
 	if ((self.jump_flag*(self.mass/10) < -300) && (self.flags & FL_ONGROUND) && (self.health > 0))
 	{
@@ -1940,7 +2110,7 @@ string deathstring, deathstring2,iclass;
 				deathstring = " tripped on ";
 				deathstring2 = "'s tripwire glyph!\n";
 			}
-			else if(iclass=="stickmine")
+			else if(iclass=="fireballblast")
 			{
 				deathstring = " was blown away by ";
 				deathstring2 = "'s delayed fireball glyph!\n";
@@ -2228,8 +2398,8 @@ string deathstring, deathstring2,iclass;
 				bprint (" got Horshacked!\n");
 			if (attacker.classname == "monster_fallen_angel")
 				bprint (" was felled by the Fallen Angel\n");
-			if (attacker.classname == "monster_fallen_angel")
-				bprint (" was whooped by a Fallen Angel Lord!\n");
+			if (attacker.classname == "monster_fallen_angel_lord")
+				bprint (" was decimated by a Fallen Angel Lord!\n");
 			if (attacker.classname == "monster_golem_bronze")
 				if(targ.decap==1)
 					bprint ("'s head was taken as a trophy for the Bronze Golem!\n");
@@ -2239,7 +2409,9 @@ string deathstring, deathstring2,iclass;
 					bprint (" was squished like an insect by a Bronze Golem!\n");
 			if (attacker.classname == "monster_golem_iron")
 			{
-				if(targ.decap==2)
+				if (inflictor.classname == "golem_iron_proj")
+					bprint(" felt the sting of the Iron Golem's jewel!\n");
+				else if(targ.decap==2)
 					bprint ("'s brains make nice wall decorations!\n");
 				else
 					bprint (" was crushed by the Iron Golem's fist!\n");
@@ -2249,6 +2421,8 @@ string deathstring, deathstring2,iclass;
 					bprint (" is feeling a little light-headed!\n");
 				else
 					bprint (" was pummeled by a Stone Golem!\n");
+			if (attacker.classname == "monster_golem_crystal")
+				bprint (" was mangled by the Enchanted Crystal Golem!\n");
 			if (attacker.classname == "monster_hydra")
 				bprint (" becomes food for the Hydra!\n");
 			if (attacker.classname == "monster_imp_fire")
@@ -2276,12 +2450,7 @@ string deathstring, deathstring2,iclass;
 			if (attacker.classname == "monster_skull_wizard")
 				bprint (" succumbed to the Skull Wizard's magic!\n");
 			if (attacker.classname == "monster_skull_wizard_lord")
-			{
-			    if (targ.netname == "Fallacy" || targ.netname == "Rubicant")
-				bprint (" got Skull-Fucked!\n");
-			    else
-				bprint (" got Skull-buggeried!\n");
-			}
+				bprint (" was Skull-duggeried!\n");
 			if (attacker.classname == "monster_snake")
 				bprint (" was bitten by the lethal Cobra!\n");
 			if (attacker.classname == "monster_spider_red_large")
@@ -2292,6 +2461,24 @@ string deathstring, deathstring2,iclass;
 				bprint (" was overwhelmed by the Golden Spiders!\n");
 			if (attacker.classname == "monster_spider_yellow_small")
 				bprint (" is a meal for the spiders!\n");
+			if (attacker.classname == "rider_famine")
+				bprint(" was drained of life-force by Famine!\n");
+			if (attacker.classname == "rider_death")
+				if(inflictor==attacker)
+					bprint(" was snuffed out of existance by Death!\n");
+				else if(inflictor.netname=="deathbone")
+					bprint(" had his bones crushed to a fine powder by Death!\n");
+				else if(iclass=="deathmissile")
+					bprint(" was shot down by Death's crimson bolts!\n");
+				else
+					bprint(" was smitten by Death's unholy fire\n");
+			if (attacker.classname == "rider_pestilence")
+				if(targ.deathtype=="poison")
+					bprint(" was poisoned to death by Pestilence's Crossbow!\n");
+				else
+					bprint("'s rotted corpse is the possession of Pestilence!\n");
+			if (attacker.classname == "rider_war")
+				bprint(" was taught the true meaning of War!\n");
 			if (attacker.classname == "monster_eidolon")
 				if(inflictor==attacker)
 					bprint(" was squashed like an insect by Eidolon!\n");
diff -urNp h2-0.42-demo/constant.hc h2-1.03/constant.hc
--- h2-0.42-demo/constant.hc	1997-08-28 02:38:10.000000000 +0300
+++ h2-1.03/constant.hc	1997-09-04 21:57:40.000000000 +0300
@@ -40,7 +40,7 @@ float FL_SPECIAL_ABILITY2		= 8388608;  /
 //edict.flags2
 //FIXME: Shielded and small may be able to be determined by
 //other means...
-float FL_SHIELDED				= 1;
+float FL2_ADJUST_MON_DAM		= 1;		//Do more damage to monsters
 float FL_NODAMAGE				= 2;		//Special flag put on a missle to make it not do damage- used only by mezzoman
 float FL_SMALL					= 4;		//Small enough to be crsuhed underfoot
 float FL_ALIVE					= 8;		//Dead or alive.
diff -urNp h2-0.42-demo/cube.hc h2-1.03/cube.hc
--- h2-0.42-demo/cube.hc	1997-08-28 02:38:10.000000000 +0300
+++ h2-1.03/cube.hc	1997-09-04 21:57:40.000000000 +0300
@@ -51,7 +51,7 @@ void cube_fire(void)
 	float Distance;
 	entity temp;
 
-	if (time > self.monster_duration || self.owner.health <= 0)
+	if (time > self.monster_duration || self.owner.health <= 0 || self.shot_cnt >= 10)
 	{
 		self.owner.artifact_flags(-)self.artifact_flags;
 		remove(self);
@@ -99,6 +99,8 @@ void cube_fire(void)
 					self.adjust_velocity = CubeDirection[random(0,5)];
 					self.abslight = 1;
 
+					self.shot_cnt += 1;
+
 					do_fireball('0 0 0');
 				}
 				else 
@@ -263,7 +265,8 @@ void UseCubeOfForce(void)
 	cube.th_die = CubeDie;
 
 	thinktime cube : 0.01;
-	cube.monster_duration = time + 30;
+	cube.monster_duration = time + 45;
+	cube.shot_cnt = 0;
 
 	cube.movedir = '100 100 0';
 	cube.count = random(360);
diff -urNp h2-0.42-demo/damage.hc h2-1.03/damage.hc
--- h2-0.42-demo/damage.hc	1997-08-28 02:38:10.000000000 +0300
+++ h2-1.03/damage.hc	1997-09-04 21:57:40.000000000 +0300
@@ -60,33 +60,48 @@ explosions and melee attacks.
 float(entity targ, entity inflictor) CanDamage =
 {
 // bmodels need special checking because their origin is 0,0,0
-vector inflictor_org;
+vector inflictor_org,targ_org,ofs;
+float targ_rad,loop_cnt;
+
+	if(inflictor.flags2&FL_ALIVE)
+		inflictor_org = inflictor.origin+inflictor.proj_ofs;
+	else
+		inflictor_org = (inflictor.absmin+inflictor.absmax)*0.5;
+
+	targ_org=(targ.absmin+targ.absmax)*0.5;
+//	targ_rad=targ.maxs_x;
+	targ_rad=15;
 
-	inflictor_org = (inflictor.absmin+inflictor.absmin)*0.5;
 	if (targ.movetype == MOVETYPE_PUSH)
 	{
-		traceline(inflictor_org, 0.5*(targ.absmin+targ.absmax), TRUE, self);
+		traceline(inflictor_org, targ_org, TRUE, self);
 		if (trace_fraction == 1)
 			return TRUE;
 		if (trace_ent == targ)
 			return TRUE;
 		return FALSE;
 	}
-	traceline (inflictor_org, targ.origin, TRUE, self);
-	if (trace_fraction == 1)
-		return TRUE;
-	traceline (inflictor_org, targ.origin + '15 15 0', TRUE, self);
-	if (trace_fraction == 1)
-		return TRUE;
-	traceline (inflictor_org, targ.origin + '-15 -15 0', TRUE, self);
-	if (trace_fraction == 1)
-		return TRUE;
-	traceline (inflictor_org, targ.origin + '-15 15 0', TRUE, self);
-	if (trace_fraction == 1)
-		return TRUE;
-	traceline (inflictor_org, targ.origin + '15 -15 0', TRUE, self);
-	if (trace_fraction == 1)
-		return TRUE;
+	
+	ofs='0 0 0';
+	loop_cnt=5;
+	while(loop_cnt)
+	{
+		if(loop_cnt!=5)
+		{
+			if(loop_cnt<3)
+				ofs_x=targ_rad*-1;
+			else
+				ofs_x=targ_rad;
+			if(loop_cnt==3||loop_cnt==2)
+				ofs_y=targ_rad*-1;
+			else
+				ofs_y=targ_rad;
+		}
+		traceline(inflictor_org, targ_org + ofs, TRUE, self);
+		if (trace_fraction == 1)
+			return TRUE;
+		loop_cnt-=1;
+	}
 //	dprintv("Can't damage from %s",inflictor_org);
 //	dprintv(" to %s\n",targ_org);
 	return FALSE;
@@ -155,6 +170,7 @@ Killed
 void(entity targ, entity attacker, entity inflictor) Killed =
 {
 entity oself;
+float exp_bonus;
 	oself = self;
 	self = targ;
 
@@ -185,6 +201,7 @@ entity oself;
 	}
 
 //Check for decapitation death
+	self.movedir='0 0 0';
 	if(self.model!="models/sheep.mdl"&&self.deathtype!="teledeath"&&self.deathtype!="teledeath2"&&self.deathtype!="teledeath3"&&self.deathtype != "teledeath4")
 		if
 		(inflictor.classname=="ax_blade"||
@@ -200,6 +217,12 @@ entity oself;
 				self.decap=2;
 			else
 				self.decap=TRUE;
+		else if(vlen(inflictor.origin-self.origin+self.view_ofs)<=17&&self.health>=-40&&self.health<-10)
+			if(random()<0.4)
+			{
+				self.movedir=normalize(self.origin+self.view_ofs-inflictor.origin);
+				self.decap=2;
+			}
 
 	if(self.skin==GLOBAL_SKIN_STONE||self.frozen>0)
 	{	//Frozen or stoned
@@ -218,6 +241,14 @@ entity oself;
 	if (self.classname == "player")
 		ClientObituary(self, attacker, inflictor);
 
+	if(attacker.deadflag<DEAD_DYING)
+	{
+		if(attacker.model=="models/sheep.mdl"&&attacker.flags&FL_CLIENT)
+		{//3000 exp bonus for killing as sheep.
+			sound (attacker, CHAN_BODY, "misc/comm.wav", 1, ATTN_NORM);
+			centerprint(attacker,"Sheep kill BONUS!!!\n");
+			exp_bonus=3000;
+		}
 
 		if(deathmatch)
 		{
@@ -242,7 +273,7 @@ entity oself;
 						drop_level(targ,1); //If killed by a lower level player, lose 1 level
 
 				if(attacker != targ)
-						AwardExperience(attacker,self,self.experience_value);
+						AwardExperience(attacker,self,self.experience_value+exp_bonus);
 
 				if(FindExpLeader()!=lastleader)
 				{//Tell everyone if the king of the hill has changed
@@ -252,13 +283,14 @@ entity oself;
 				}
 			}
 		}
+		else if(self.classname=="player"&&attacker.classname=="player"&&(coop||teamplay&&attacker.team==self.team))
+			drop_level(attacker,1);	//Killed friend in coop, lose a level
 
 		else if(attacker.flags&FL_CLIENT&&attacker!=self.controller)
-			AwardExperience(attacker,self,self.experience_value);
+			AwardExperience(attacker,self,self.experience_value+exp_bonus);
+	}
 
 	self.enemy = attacker;
-	if (attacker.enemy == self)
-		attacker.enemy = world;
 
 // bump the monster counter
 	if (self.flags & FL_MONSTER)
@@ -277,6 +309,9 @@ entity oself;
 	if(pointcontents(self.origin+self.view_ofs)==CONTENT_WATER)
 		DeathBubbles(20);
 
+	if(attacker.classname=="rider_death")
+		spawn_ghost(attacker);
+
 	if(oself!=targ)
 	{
 		if(self.classname=="player")
@@ -510,9 +545,9 @@ entity holdent;
 	}
 
 	// Nothing but melee weapons hurt the snake
-	if ((targ.classname == "monster_snake") && 
-		((!inflictor.classname == "player") || (!attacker.classname == "player")))
-		return;
+//	if ((targ.classname == "monster_snake") && 
+//		((!inflictor.classname == "player") || (!attacker.classname == "player")))
+//		return;
 
 	if(targ.health<=0)
 	{
@@ -560,7 +595,7 @@ entity holdent;
 // do the damage
 	targ.health = targ.health - total_damage;
 
-	if(targ.health<1.0000)
+	if(targ.health>=0&&targ.health<1.0000)//No more Zombie mode!!! (Sorry!)
 		targ.health=-0.1;
 
 	if (targ.health <=0 && targ.classname == "player" && targ.cnt_sh_boost)
@@ -570,6 +605,9 @@ entity holdent;
 			holdent = self;
 			self = targ;
 			use_super_healthboost();
+			centerprint(self,"Saved by the Mystic Urn!\n");
+			sound (self, CHAN_AUTO, "misc/comm.wav", 1, ATTN_NORM);
+			self.deathtype="";
 			self = holdent;
 			return;
 		}
@@ -582,6 +620,7 @@ entity holdent;
 		self = targ;	
 		if (Pal_DivineIntervention())
 		{
+			self.deathtype="";
 			self = holdent;
 			return;
 		}
@@ -655,7 +694,7 @@ T_RadiusDamage
 //void(entity loser)SpawnFlameOn;
 void(entity inflictor, entity attacker, float damage, entity ignore) T_RadiusDamage =
 {
-float 	points,inertia;
+float 	points,inertia,radius;
 entity	head;
 vector	inflictor_org, org;
 
@@ -664,7 +703,11 @@ vector	inflictor_org, org;
 //			other objects with a radius damage death (namely: exploding barrels)
 
 	inflictor_org = (inflictor.absmin+inflictor.absmax)*0.5;
-	head = findradius(inflictor_org, damage+40);
+	if(inflictor.classname=="circfire")
+		radius=150;
+	else
+		radius=damage+40;
+	head = findradius(inflictor_org, radius);
 
 	if(inflictor.classname=="fireballblast")
 		damage+=attacker.level*33;
@@ -681,12 +724,15 @@ vector	inflictor_org, org;
 					points = 0;
 				points = damage - points;
 				if (head == attacker)
-					if(attacker.classname=="monster_eidolon")
+					if(attacker.classname=="monster_eidolon"||attacker.playerclass==CLASS_NECROMANCER)//Necromancer takes no radius damage from his own magic
 						points = 0;
 					else if(inflictor.model=="models/assgren.mdl")//Some more resistance to the Assassin's own Big One
-						points = points*0.25;
+						points*=0.25;
 					else
-						points = points*0.5;
+						points*=0.5;
+
+				if ((head.flags & FL_MONSTER) && (self.flags2 & FL2_ADJUST_MON_DAM))
+					points = 2;
 
 		//following stops multiple grenades from blowing each other up
 				if(head.owner==inflictor.owner&&
@@ -712,18 +758,20 @@ vector	inflictor_org, org;
 						}
 						if(inflictor.classname=="fireballblast")
 						{
-							if(points>10)
-								points=10;
+							if(points>10||points<5)
+								points=random(5,10);
 
-							points=5;
-							if(other.flags&FL_FIREHEAL)
+							if(head.flags&FL_FIREHEAL)
 							{
-								other.health=other.health+points;
-								if(other.health>other.max_health)
-									other.health=other.max_health;
+								if(head.health+points<=head.max_health)
+									head.health=head.health+points;
+								else
+									head.health=head.max_health;
 							}
-							else if(!other.flags&FL_FIRERESIST)
+							else if(!head.flags&FL_FIRERESIST)
 							{
+								if(head.health<=points)
+									points=1000;
 								T_Damage (head, inflictor, attacker, points);
 							}
 						}
diff -urNp h2-0.42-demo/doors.hc h2-1.03/doors.hc
--- h2-0.42-demo/doors.hc	1997-08-28 02:38:10.000000000 +0300
+++ h2-1.03/doors.hc	1997-08-31 14:13:24.000000000 +0300
@@ -300,7 +300,7 @@ void new_movedir (vector movin,float dir
 		self.movedir = self.movedir * -1;
 
 	self.pos1 = self.angles;
-	self.pos2 = self.angles + self.movedir * self.flags;
+	self.pos2 = self.angles + self.movedir * self.dflags;
 }
 
 void door_go_up()
@@ -414,7 +414,7 @@ void door_use()
 
 
 // defined in triggers.hc
-float check_puzzle_pieces(entity client, float remove_pieces);
+float check_puzzle_pieces(entity client, float remove_pieces, float inverse);
 
 /*
  * door_trigger_touch() -- Called when someone touches a door.
@@ -424,6 +424,7 @@ void door_trigger_touch()
 {
 	entity door;
 	string temp;
+	float removepp, inversepp;
 
 //	if(!other.flags2&FL_ALIVE)
 //		return;
@@ -438,20 +439,10 @@ void door_trigger_touch()
 	self = self.owner;
 	if(!deathmatch)
 	{
-		if (self.spawnflags & DOOR_NO_PP)
-		{
-			if (check_puzzle_pieces(other, self.spawnflags & DOOR_REMOVE_PP))
-			{
-				if (self.no_puzzle_msg && !deathmatch)
-				{
-					temp = getstring(self.no_puzzle_msg);
-					centerprint (other, temp);
-					door.attack_finished = time + 2;
-				}
-				return;
-			}
-		}
-		else if (!check_puzzle_pieces(other, self.spawnflags & DOOR_REMOVE_PP))
+		removepp = (self.spawnflags & DOOR_REMOVE_PP);
+		inversepp = (self.spawnflags & DOOR_NO_PP);
+
+		if (!check_puzzle_pieces(other,removepp,inversepp))
 		{
 			if (self.no_puzzle_msg && !deathmatch) 
 			{
@@ -492,6 +483,7 @@ void door_killed()
 void door_touch()
 {
 	string temp;
+	float removepp, inversepp;
 
 //	if(!other.flags2&FL_ALIVE)
 //		return;
@@ -529,21 +521,10 @@ void door_touch()
 
 // FIXME: blink key on player's status bar
 	
-      if (self.spawnflags & DOOR_NO_PP)
-      {
-	if (check_puzzle_pieces(other, self.spawnflags & DOOR_REMOVE_PP))
-	{
-		if (self.no_puzzle_msg && !deathmatch)
-		{
-			temp = getstring(self.no_puzzle_msg);
-			centerprint (other, temp);
-		}
-		return;
-	}
-      }
-      else
-      {
-	if (!check_puzzle_pieces(other, self.spawnflags & DOOR_REMOVE_PP))
+	removepp = (self.spawnflags & DOOR_REMOVE_PP);
+	inversepp = (self.spawnflags & DOOR_NO_PP);
+
+	if (!check_puzzle_pieces(other,removepp,inversepp))
 	{
 		if (self.no_puzzle_msg && !deathmatch)
 		{
@@ -552,8 +533,6 @@ void door_touch()
 		}
 		return;
 	}
-      }
-
 	self.touch = SUB_Null;
 	if (self.enemy) 
 		self.enemy.touch = SUB_Null;	// get paired door
@@ -846,21 +825,24 @@ vector newvect;
 	if(self.strength==2)
 		cvar_set ("sv_gravity", "100");
 
+	self.dflags=self.flags;
+	self.flags=0;
+
 	if(self.v_angle!='0 0 0')
 	{
 		if(random()>0.5&&self.v_angle_x!=0)
 		{
-			self.cnt=self.flags=self.v_angle_x;
+			self.cnt=self.dflags=self.v_angle_x;
 			new_movedir('1 0 0',self.cnt);
 		}
 		else if(random()>0.5&&self.v_angle_y!=0)
 		{
-			self.cnt=self.flags=self.v_angle_y;
+			self.cnt=self.dflags=self.v_angle_y;
 			new_movedir('0 1 0',self.cnt);
 		}
 		else if(self.v_angle_z!=0)
 		{
-			self.cnt=self.flags=self.v_angle_z;
+			self.cnt=self.dflags=self.v_angle_z;
 			new_movedir('0 0 1',self.cnt);
 		}
 	}
@@ -1435,6 +1417,9 @@ void func_door_rotating()
 {
 vector	vec;
 
+	self.dflags=self.flags;//don't ask
+	self.flags=0;
+
 	// set the axis of rotation
 	if (self.spawnflags & 64)
 		self.movedir = '0 0 1';
@@ -1450,21 +1435,17 @@ vector	vec;
 	// CHEAT hack to get the puzzle piece flags stored in the 
 	// same area, without re-arranging the fields so that the
 	// designers don't complain
-	if (self.spawnflags & 64)
-		self.spawnflags -= 64;
-	if (self.spawnflags & 128)
-		self.spawnflags -= 128;
+	self.spawnflags (-) 192;
 	if (self.spawnflags & 8) 
-		self.spawnflags = self.spawnflags & 64;
+		self.spawnflags (+) DOOR_REMOVE_PP;
 	if (self.spawnflags & 16) 
-		self.spawnflags = self.spawnflags & 128;
+		self.spawnflags (+) DOOR_NO_PP;
 
 	if (self.spawnflags & 32) 
 		self.spawnflags (+) DOOR_TOGGLE;
 	
 	self.pos1 = self.angles;
-	self.pos2 = self.angles + self.movedir * self.flags;
-	self.flags = FALSE;
+	self.pos2 = self.angles + self.movedir * self.dflags;
 
 	self.max_health = self.health;
 	self.solid = SOLID_BSP;
diff -urNp h2-0.42-demo/entity.hc h2-1.03/entity.hc
--- h2-0.42-demo/entity.hc	1997-08-28 02:38:10.000000000 +0300
+++ h2-1.03/entity.hc	1997-09-04 21:57:40.000000000 +0300
@@ -313,6 +313,7 @@ void end_sys_fields;
 		float crouch_stuck;		// If set this means the player has released the crouch key in an area too small to uncrouch in
 		float divine_time;		// Amount of time flash happens in divine intervention
 		float act_state;		// Anim info
+		float raven_cnt;		// Number of raven's this guys has in the world
 	};
 	struct
 	{ // Fallen Angel
@@ -460,6 +461,10 @@ void end_sys_fields;
 	{   // Soul spheres
 		float sound_time;
 	};
+	struct
+	{	// Cube of force
+		float shot_cnt;   // Number of shots the force cube has shot
+	};
 };
 
 // Once we can do unions above end_sys, have this with the field 'playerclass'
@@ -703,3 +708,13 @@ entity	sight_entity;	//So monsters wake 
 .entity viewentity;
 .float sv_flags;		//temp serverflags fix
 
+.float	dmgtime;
+.float	healamount, healtype;
+.float anglespeed;
+.float angletime;
+.float movetime;
+.float hit_z;
+.float torncount;
+.entity path_last;
+.float dflags;
+
diff -urNp h2-0.42-demo/explode.hc h2-1.03/explode.hc
--- h2-0.42-demo/explode.hc	1997-08-28 02:38:10.000000000 +0300
+++ h2-1.03/explode.hc	1997-09-01 07:18:34.000000000 +0300
@@ -56,6 +56,7 @@ void DarkExplosion ()
 entity ignore;
 	if(self.classname=="timebomb")
 	{
+		sound(self,CHAN_AUTO,"weapons/explode.wav",1,ATTN_NORM);
 		ignore=self.enemy;
 	}
 	else if(self.classname=="pincer")
@@ -186,6 +187,7 @@ vector stickdir;
 		}
 		else
 		{
+			setorigin(self,self.origin+normalize(self.velocity)*-3);
 	        sound(self,CHAN_WEAPON,"weapons/met2stn.wav",1,ATTN_NORM);
 			SpawnPuff(self.origin+v_forward*8,'0 0 0'-v_forward*24,10,world);
 		}
diff -urNp h2-0.42-demo/fablade.hc h2-1.03/fablade.hc
--- h2-0.42-demo/fablade.hc	1997-08-28 02:38:10.000000000 +0300
+++ h2-1.03/fablade.hc	1997-09-04 21:57:40.000000000 +0300
@@ -34,15 +34,15 @@ float	damg;
 		return;
 	}
 
-	damg = random(12,22);
+	damg = random(8,16);
 	
 	if (other.health)
 		T_Damage (other, self, self.owner, damg );
 
 
-	CreateGreenSmoke(self.origin, '0 0 8', HX_FRAME_TIME * 4);
-	sound (self, CHAN_WEAPON, "weapons/explode.wav", 1, ATTN_NORM);
+	sound (self, CHAN_WEAPON, "weapons/expsmall.wav", 1, ATTN_NORM);
 	self.origin = self.origin - 8*normalize(self.velocity);
+	CreateGreenSmoke(self.origin, '0 0 8', HX_FRAME_TIME * 4);
 	remove(self);
 };
 
diff -urNp h2-0.42-demo/fangel.hc h2-1.03/fangel.hc
--- h2-0.42-demo/fangel.hc	1997-08-28 02:38:10.000000000 +0300
+++ h2-1.03/fangel.hc	1997-09-04 21:57:40.000000000 +0300
@@ -98,6 +98,9 @@ entity item;
 vector vec, realVec;
 float dot;
 
+	if(range(self.enemy)<=RANGE_MELEE)
+		return FALSE;
+
 	if(fov(self,self.enemy,30)&&self.enemy.last_attack+0.75>time)
 	{
 		self.th_save = self.think;
@@ -212,6 +215,7 @@ vector vec;
 void() fangel_init =
 {  // Set the fallen angel ready
 	self.ideal_yaw = vectoyaw(self.enemy.origin - self.origin);
+	self.think=self.th_stand;
 	thinktime self : random(.1,.6);
 	self.count = 0;
 	self.monster_stage = FANGEL_STAGE_FLY;
@@ -220,15 +224,26 @@ void() fangel_init =
 
 	self.monster_awake = TRUE;
 
+	if (self.skin)
+		self.drawflags (+) MLS_POWERMODE;
+
 	fangel_find_spot();
 };
 
 
 void fangel_wait (void)
 {
-    if(random() < 0.5)
+	thinktime self : 0.15;
 	if(LocateTarget()) // We found a target
 		fangel_init();
+	else if(random(100)<5&&self.t_width<time)
+	{
+		self.t_width=time+7;
+		if(self.skin)
+			sound(self,CHAN_AUTO,"fangel/ambi2.wav",random(0.5,1),ATTN_NORM);
+		else
+			sound(self,CHAN_AUTO,"fangel/ambi1.wav",random(0.5,1),ATTN_NORM);
+	}
 }
 
 void fangel_sidestep (void) 
@@ -237,7 +252,7 @@ float retval;
 float dist;
 float chance;
 
-	self.monster_duration = self.monster_duration - 1;
+	self.monster_duration -= 1;
 
 	dist = random(1,4);  // Movement distance this turn
 	
@@ -405,26 +420,26 @@ void () fangel_wing_fire =
 
 float fangel_fly_offsets[20] =
 {
-	-0.4,
-	-0.2,
-	0,
 	0,
+	0.1,
 	0.2,
+	0.3,
 	0.4,
-	0.4,
-	0.6,
+	0.5,
 	0.6,
+	0.7,
+	0.8,
+	0.9,
+	1,
+	0.9,
 	0.8,
+	0.7,
 	0.6,
+	0.5,
 	0.4,
-	0,
-	0,
-	-0.2,
-	-0.4,
-	-0.8,
-	-0.8,
-	-0.8,
-	-0.4
+	0.3,
+	0.2,
+	0.1
 };
 
 // Frame Code
@@ -436,18 +451,15 @@ float chance;
 	self.think = fangel_blockframes;
 	thinktime self : HX_FRAME_TIME;
 
+	if(self.velocity!='0 0 0')
+		self.velocity=self.velocity*0.7;
+
 	// Turn to face the attacker
 	ai_face();
 
 	check_z_move(3);
 //	movestep(0,0,-1, FALSE);   // Float down while deflecting shots
 
-	if (self.frame==$fblock21)		//	Only deflect after this frame
-	{
-		if(self.movechain)
-			remove(self.movechain);
-		self.movechain=world;
-	}
 
 
 	if (self.fangel_Count)
@@ -455,9 +467,18 @@ float chance;
 	   self.fangel_Count -= 1;
 	   RetVal = 3;
 	}
+	else if(fov(self,self.enemy,30)&&self.enemy.last_attack+0.75>time)
+		self.fangel_Count+=1;
 	else
 		RetVal = AdvanceFrame($fblock1,$fblock21);
 
+	if (self.frame==$fblock21)		//	Only deflect after this frame
+	{
+		if(self.movechain)
+			remove(self.movechain);
+		self.movechain=world;
+	}
+
 	if (RetVal == AF_END)
 	{
 		self.takedamage = DAMAGE_YES;
@@ -486,7 +507,13 @@ float chance;
 
 void() fangel_deathframes =
 {
-entity stemp,skull;
+entity stemp;//,skull;
+
+	if(self.health<=-40)
+	{
+		chunk_death();
+		return;
+	}
 
 	self.think = fangel_deathframes;
 	thinktime self : HX_FRAME_TIME;
@@ -505,6 +532,7 @@ entity stemp,skull;
 			self.frame = 27;
 	}
 
+/*Should she spew a head if not chunked?
 	if (self.frame == $fdeth40)
 	{
 		skull= spawn();
@@ -519,6 +547,7 @@ entity stemp,skull;
 		skull.think = MakeSolidCorpse;
 		setorigin(skull,self.origin);
 	}
+*/
 
 	if (AdvanceFrame($fdeth1,$fdeth40) == AF_BEGINNING)
 		remove(self);
@@ -541,7 +570,7 @@ void fangel_flyforward (void)
 	AdvanceFrame($fmove1,$fmove20);
 	self.frame += 1;
 
-	fangel_move(3+fangel_fly_offsets[self.frame - $fmove1]);
+	fangel_move(3*fangel_fly_offsets[self.frame - $fmove1]);
 
 	if (self.frame == $fmove2)
 		sound (self, CHAN_WEAPON, "fangel/fly.wav", 1, ATTN_NORM);
@@ -557,7 +586,7 @@ void fangel_flyforward (void)
 void fangel_flyother (void)
 {
 	AdvanceFrame($ffly1,$ffly30);
-	fangel_move(3+fangel_fly_offsets[rint((self.frame - $ffly1)*.65)]);
+	fangel_move(3*fangel_fly_offsets[rint((self.frame - $ffly1)*.65)]);
 
 	if (self.frame == $ffly1) 
 		sound (self, CHAN_WEAPON, "fangel/fly.wav", 1, ATTN_NORM);
@@ -577,7 +606,7 @@ void() fangel_flyframes =
 
 	fangel_check_incoming();
 
-	if(self.velocity)
+	if(self.velocity!='0 0 0')
 		self.velocity=self.velocity*0.7;
 
 	if (self.monster_stage == FANGEL_STAGE_FLY)
@@ -692,7 +721,9 @@ void() fangel_wingframes =
 			{
 				if (self.shoot_cnt < 10)
 				{
-					traceline(self.origin,(self.enemy.absmin+self.enemy.absmax)*0.5,TRUE,self);
+				vector org;
+					org=self.origin-'0 0 5';
+					traceline(org,(self.enemy.absmin+self.enemy.absmax)*0.5,TRUE,self);
 					if (trace_fraction==1)
 					{
 						self.effects(+)EF_MUZZLEFLASH;
@@ -703,15 +734,15 @@ void() fangel_wingframes =
 						WriteByte (MSG_BROADCAST, 1);					//time
 						WriteByte (MSG_BROADCAST, rint(random(0,4)));			//color
 
-						WriteCoord (MSG_BROADCAST, self.origin_x);
-						WriteCoord (MSG_BROADCAST, self.origin_y);
-						WriteCoord (MSG_BROADCAST, self.origin_z);
+						WriteCoord (MSG_BROADCAST, org_x);
+						WriteCoord (MSG_BROADCAST, org_y);
+						WriteCoord (MSG_BROADCAST, org_z);
 
 						WriteCoord (MSG_BROADCAST, trace_endpos_x);
 						WriteCoord (MSG_BROADCAST, trace_endpos_y);
 						WriteCoord (MSG_BROADCAST, trace_endpos_z);		
 
-						LightningDamage (self.origin, trace_endpos, self, 10,"sunbeam");
+						LightningDamage (self.origin, trace_endpos, self, 3,"sunbeam");
 
 						self.frame -= 1;
 						self.shoot_cnt += 1;
@@ -736,7 +767,7 @@ void(entity attacker, float damage) fang
 	self.pain_finished=time + 1 + self.skin;
 
 	if (self.health < 50)
-		self.drawflags (-) DRF_TRANSLUCENT;
+		self.drawflags (-) DRF_TRANSLUCENT|MLS_POWERMODE;
 
 	if ((self.frame >= $ffly11 && self.frame <= $ffly13) ||
 	    (self.frame >= $ffly26 && self.frame <= $ffly28))
@@ -781,15 +812,17 @@ void() init_fangel =
 	self.hull = HULL_BIG;
 	if (self.classname == "monster_fallen_angel")
 	{
+		precache_sound2("fangel/ambi1.wav");
 		self.skin = 0;
-		self.health = 275;
-		self.experience_value = 125;
+		self.health = 250;
+		self.experience_value = 150;
 	}
 	else
 	{
+		precache_sound2("fangel/ambi2.wav");
 		self.skin = 1;
-		self.health = 600;
-		self.experience_value = 350;
+		self.health = 500;
+		self.experience_value = 400;
 	}
 
 	self.th_stand = fangel_flyframes;
@@ -799,12 +832,13 @@ void() init_fangel =
 	self.th_die = fangel_deathframes;
 	self.th_missile = fangel_handframes;
 	self.th_melee = fangel_wingframes;
+	self.headmodel="models/h_fangel.mdl";
 
 	total_monsters += 1;
 	
 	self.ideal_yaw = self.angles * '0 1 0';
 	self.yaw_speed = fangel_move_speed;
-	self.view_ofs = '0 0 0';
+	self.view_ofs = '0 0 -5';
 	self.use = monster_use;
 	self.mintel = 3;
 
@@ -815,7 +849,10 @@ void() init_fangel =
 		self.drawflags (+) DRF_TRANSLUCENT;
 
 	self.pausetime = 99999999;
-	self.th_stand ();
+	self.frame=$fhand1;
+	self.think=fangel_wait;
+	thinktime self : 0;
+//	self.th_stand ();
 };
 
 
diff -urNp h2-0.42-demo/faspell.hc h2-1.03/faspell.hc
--- h2-0.42-demo/faspell.hc	1997-08-28 02:38:10.000000000 +0300
+++ h2-1.03/faspell.hc	1997-09-04 21:57:40.000000000 +0300
@@ -43,12 +43,10 @@ float	damg;
 
 	T_RadiusDamage (self, self.owner, damg, other);
 
+	sound (self, CHAN_WEAPON, "weapons/explode.wav", 1, ATTN_NORM);
+
 	self.origin = self.origin - 8*normalize(self.velocity);
-	WriteByte(MSG_BROADCAST, SVC_TEMPENTITY);
-	WriteByte(MSG_BROADCAST, TE_EXPLOSION);
-	WriteCoord(MSG_BROADCAST, self.origin_x);
-	WriteCoord(MSG_BROADCAST, self.origin_y);
-	WriteCoord(MSG_BROADCAST, self.origin_z);
+	CreateRedSpark(self.origin);
 	remove(self);
 };
 
diff -urNp h2-0.42-demo/fight.hc h2-1.03/fight.hc
--- h2-0.42-demo/fight.hc	1997-08-28 02:38:10.000000000 +0300
+++ h2-1.03/fight.hc	1997-09-04 21:57:40.000000000 +0300
@@ -50,6 +50,9 @@ float CheckAttack()
 
 	traceline (spot1, spot2, FALSE, self);
 
+	if(trace_ent.thingtype>=THINGTYPE_WEBS)
+		traceline (trace_endpos, spot2, FALSE, trace_ent);
+
 	if (trace_ent != targ)
 		if(trace_ent.health>25||!trace_ent.takedamage||(trace_ent.flags&FL_MONSTER&&trace_ent.classname!="player_sheep"))
 			return FALSE;//Don't have a clear shot, and don't want to shoot obstruction
@@ -163,19 +166,31 @@ void ai_charge_side()
 
 void ai_melee()
 {//Bad idea- doesn't care where around self player is!
-vector	delta;
+vector	org1,org2;
 float 	ldmg;
 
 	if (!self.enemy)
 		return;		// removed before stroke
 		
-	delta = self.enemy.origin - self.origin;
-	if (vlen(delta) > 60)
+	org1=self.origin+self.proj_ofs;
+	org2=self.enemy.origin;
+
+	if(vlen(org2-org1)>60)
+		return;
+
+	traceline(org1,org2,FALSE,self);
+	if(trace_ent!=self.enemy)
+	{
+		org2=(self.enemy.absmin+self.enemy.absmax)*0.5;
+		traceline(org1,org2,FALSE,self);
+	}
+		
+	if(!trace_ent.takedamage)
 		return;
 
 	ldmg = random(9);
 
-	T_Damage (self.enemy, self, self, ldmg);
+	T_Damage (trace_ent, self, self, ldmg);
 }
 
 
diff -urNp h2-0.42-demo/fireball.hc h2-1.03/fireball.hc
--- h2-0.42-demo/fireball.hc	1997-08-28 02:38:10.000000000 +0300
+++ h2-1.03/fireball.hc	1997-09-04 21:57:40.000000000 +0300
@@ -110,7 +110,7 @@ vector vec;
 	missile.speed=500;
 	if(self.classname=="monster_imp_lord")
 	{
-		missile.dmg=random(40,50);
+		missile.dmg=random(80,120);
 		missile.speed+=500;
 		missile.scale=2;
 	}
diff -urNp h2-0.42-demo/fx.hc h2-1.03/fx.hc
--- h2-0.42-demo/fx.hc	1997-08-28 02:38:10.000000000 +0300
+++ h2-1.03/fx.hc	1997-09-04 21:57:40.000000000 +0300
@@ -148,11 +148,11 @@ void  SpawnPuff (vector org, vector vel,
 	if (victim.thingtype==THINGTYPE_FLESH && victim.classname!="mummy" && victim.netname != "spider")
 		part_color = 256 + 8 * 16 + random(9);				//Blood red
 	else if ((victim.thingtype==THINGTYPE_GREYSTONE) || (victim.thingtype==THINGTYPE_BROWNSTONE))
-		part_color = 256 + (1 * 16);			// Gray
+		part_color = 256 + 20 + random(8);			// Gray
 	else if (victim.thingtype==THINGTYPE_METAL)	
 		part_color = 256 + (8 * 15);			// Sparks
 	else if (victim.thingtype==THINGTYPE_WOOD)	
-		part_color = 256 + (5 * 16);			// Wood chunks
+		part_color = 256 + (5 * 16) + random(8);			// Wood chunks
 	else if (victim.thingtype==THINGTYPE_ICE)	
 		part_color = 406+random(8);				// Ice particles
 	else if (victim.netname == "spider")	
diff -urNp h2-0.42-demo/gauntlet.hc h2-1.03/gauntlet.hc
--- h2-0.42-demo/gauntlet.hc	1997-08-28 02:38:10.000000000 +0300
+++ h2-1.03/gauntlet.hc	1997-09-01 07:18:36.000000000 +0300
@@ -46,7 +46,7 @@ $frame 7thGnt11     7thGnt12     7thGnt1
 $frame 7thGnt19      
 
 
-float GAUNT_BASE_DAMAGE			= 12;
+float GAUNT_BASE_DAMAGE			= 16;
 float GAUNT_ADD_DAMAGE			= 12;
 float GAUNT_PWR_BASE_DAMAGE		= 30;
 float GAUNT_PWR_ADD_DAMAGE		= 20;
diff -urNp h2-0.42-demo/golem.hc h2-1.03/golem.hc
--- h2-0.42-demo/golem.hc	1997-08-28 02:38:10.000000000 +0300
+++ h2-1.03/golem.hc	1997-09-04 21:57:40.000000000 +0300
@@ -134,7 +134,6 @@ void monster_golem_stone(void)
 		return;
 	}
 
-	GolemInit();
 	precache_model2("models/golem_s.mdl");
 	
 	precache_model2("models/goarm.mdl");
@@ -150,7 +149,8 @@ void monster_golem_stone(void)
 	self.thingtype = THINGTYPE_GREYSTONE;
 	setmodel(self, "models/golem_s.mdl");
 	setsize(self, '-20 -20 0', '20 20 80');
-	self.hull = HULL_HYDRA;
+	GolemInit();
+	self.hull = HULL_PLAYER;
 	self.health = 200;
 	self.experience_value = 125;
 	self.mintel = 4;
@@ -182,7 +182,7 @@ void monster_golem_iron(void)
 		return;
 	}
 
-	GolemInit();
+
 	precache_model2("models/golem_i.mdl");
 
 	precache_model2("models/goarm.mdl");
@@ -197,7 +197,7 @@ void monster_golem_iron(void)
 	self.thingtype = THINGTYPE_METAL;
 	setmodel(self, "models/golem_i.mdl");
 	setsize(self, '-20 -20 0', '20 20 80');
-	self.hull = HULL_HYDRA;
+	GolemInit();
 	self.health = 450;
 	self.mintel = 6;
 	self.experience_value = 200;
@@ -228,7 +228,6 @@ void monster_golem_bronze(void)
 		return;
 	}
 
-	GolemInit();
 	self.cnt = 0;
 	precache_model2("models/golem_b.mdl");
 
@@ -244,8 +243,8 @@ void monster_golem_bronze(void)
 	precache_sound2("golem/dthgroan.wav");
 	self.thingtype = THINGTYPE_METAL;
 	setmodel(self, "models/golem_b.mdl");
-	self.hull = HULL_HYDRA;
 	setsize(self, '-60 -60 0', '60 60 190');
+	GolemInit();
 	self.health = 650;
 	self.mintel = 8;
 	self.experience_value = 275;
@@ -277,15 +276,15 @@ void monster_golem_crystal(void)
 		return;
 	}
 
-	GolemInit();
 	precache_model2("models/golem_s.mdl");
-	precache_model2("models/h_golem.mdl");
 	precache_sound2("golem/stnpain.wav");
 	precache_sound2("golem/slide.wav");
 	precache_sound2("golem/dthgroan.wav");
-	self.thingtype = THINGTYPE_GREYSTONE;
+	self.thingtype = THINGTYPE_ICE;
 	setmodel(self, "models/golem_s.mdl");
 	setsize(self, '-20 -20 0', '20 20 80');
+	GolemInit();
+	self.hull = HULL_PLAYER;
 	self.drawflags = DRF_TRANSLUCENT|MLS_ABSLIGHT;
 	self.abslight = 1.4;
 	self.skin = GLOBAL_SKIN_ICE;
@@ -310,13 +309,15 @@ void monster_golem_crystal(void)
 
 void GolemInit(void)
 {
-	self.flags (+) FL_MONSTER|FL_ALIVE;
+	self.netname="golem";
+	self.flags (+) FL_MONSTER;
+	self.flags2 (+) FL_ALIVE;
 	self.solid = SOLID_SLIDEBOX;
 	self.movetype = MOVETYPE_STEP;
 	self.yaw_speed = 14;
 	self.mass = 75;
 	self.mintel = 2;
-	self.hull = HULL_PLAYER;
+	self.hull = HULL_GOLEM;
 	self.th_stand = GolemStand;
 	self.th_walk = GolemWalk;
 	self.th_run = GolemRun;
@@ -347,6 +348,7 @@ void GolemCUse(void)
 void GolemStand(void) [++ $rest1..$rest22]
 {
 	ai_stand();
+	thinktime self : 0.2;
 }
 
 //==========================================================================
@@ -472,10 +474,10 @@ float 	ldmg;
 		self.attack_finished = time + 1;
 	}
 	
-	T_Damage (self.enemy, self, self, ldmg);
-
 	if (self.enemy.health - ldmg <= 0 && critical&&self.enemy.flags2&FL_ALIVE)
 		self.enemy.decap = 2;
+
+	T_Damage (self.enemy, self, self, ldmg);
 }
 
 //==========================================================================
@@ -499,7 +501,7 @@ void GolemSMeleeDecide(void)
 void GolemIMissileTouch(void)
 {
 	if (other.health > 0 && other.flags & FL_ALIVE)
-		T_Damage(other, self, self.owner, random(3,7));
+		T_Damage(other, self, self.owner, random(13,17));
 
 	remove(self);
 }
@@ -509,7 +511,7 @@ void GolemIMissileThink(void)
 	if (self.count > time)
 		HomeThink();	
 
-	particle4(self.origin,10,256+random(143,159),PARTICLETYPE_GRAV,2);
+	particle4(self.origin,20,random(128,143),PARTICLETYPE_GRAV,4);
 	
 	self.angles = vectoangles(self.velocity);
 
@@ -524,11 +526,15 @@ void GolemISpawnMissile(vector vect, vec
 
 	self.last_attack=time;
 	missile = spawn ();
+	missile.classname = "golem_iron_proj";
 	missile.owner = self;
 	missile.enemy = missile.goalentity = self.enemy;
 	missile.movetype = MOVETYPE_FLYMISSILE;
 	missile.solid = SOLID_BBOX;
 	missile.yaw_speed = 3;
+	missile.drawflags (+) MLS_POWERMODE | SCALE_TYPE_UNIFORM;
+	missile.scale = 2.5;
+	
 
 	setmodel (missile, "models/golemmis.mdl");
 	setsize (missile, '0 0 0', '0 0 0');		
@@ -676,7 +682,7 @@ void GolemPunchRight(void) [++ $rpunch1.
 		traceline(self.enemy.origin, checkPos, FALSE, self.enemy);
 
 		
-		if (trace_fraction < 1)
+		if (trace_fraction < 1&&!trace_ent.flags2&FL_ALIVE)
 			GolemDoMelee(1);
 		else
 			GolemDoMelee(0);
@@ -874,13 +880,13 @@ void GolemDoBeam(float offset, float dam
 	{
 		sound(trace_ent,CHAN_AUTO,"crusader/sunhit.wav",1,ATTN_NORM);
 
+		if (trace_ent.health - damage <= 0) 
+			trace_ent.decap = TRUE;
+
 		if (trace_ent.flags & FL_MONSTER)
 			T_Damage(trace_ent,self,self,damage/2);
 		else 
 			T_Damage(trace_ent,self,self,damage);
-
-		if (self.enemy.health - damage <= 0) 
-			self.enemy.decap = TRUE;
 	}
 
 	SpawnPuff(trace_endpos, '0 0 10', 1, trace_ent);
@@ -1019,10 +1025,10 @@ void GolemBStompEffect(void)
 
 	dist = vlen(self.enemy.origin - self.origin);
 
+	MonsterQuake(350);	
+
 	if (dist < 350)
 		T_Damage(self.enemy, self, self, random(50/dist));
-
-	MonsterQuake(350);	
 }
 	
 //==========================================================================
@@ -1070,6 +1076,9 @@ void GolemICheckRushDamage( void )
 {
 	float r;
 	float damage;
+	
+	if(!self.enemy)
+		return;
 
 	r = vlen(self.enemy.origin - self.origin);
 
@@ -1079,13 +1088,14 @@ void GolemICheckRushDamage( void )
 	if (infront(self.enemy) && r < 60)
 	{
 		sound(self, CHAN_BODY, "imp/swoophit.wav", 1, ATTN_NORM);
-		T_Damage(self.enemy, self, self, damage);
 
 		makevectors(self.angles);
 
 		self.enemy.flags (-) FL_ONGROUND;
 		self.enemy.velocity = (v_forward * (damage * 20));
 		self.enemy.velocity_z = random(300, 350);
+
+		T_Damage(self.enemy, self, self, damage);
 	}
 }
 
diff -urNp h2-0.42-demo/hydra.hc h2-1.03/hydra.hc
--- h2-0.42-demo/hydra.hc	1997-08-28 02:38:10.000000000 +0300
+++ h2-1.03/hydra.hc	1997-09-04 21:57:40.000000000 +0300
@@ -199,7 +199,7 @@ float hydra_check_blind_melee(void)
 
 	c1 = fov(self, self.enemy, 80);
 
-	if ((dist < 200) && c1 && trace_ent == self.enemy)
+	if ((dist < 256) && c1 && trace_ent == self.enemy)
 	{
 		if (random() < 0.2)
 			return 1;
@@ -272,13 +272,13 @@ void hydra_swim(float thrust) 
 	if (self.hydra_FloatTo < -10)
 	{
 		temp = random(-3.5,-2.5);
-		movestep(0,0,temp, FALSE);
+//		movestep(0,0,temp, FALSE);
 		self.hydra_FloatTo -= temp;
 	}
 	else if (self.hydra_FloatTo > 10)
 	{
 		temp = random(2.5,3.5);
-		movestep(0,0,temp, FALSE);
+//		movestep(0,0,temp, FALSE);
 		self.hydra_FloatTo -= temp;
 	}
 	else self.hydra_FloatTo = 0;
@@ -295,7 +295,7 @@ void hydra_swim(float thrust) 
 	}
 
 	dist = vlen(self.enemy.origin - self.origin);
-	if (dist > 300)
+	if (dist > 350)
 	{
 		if (CheckMonsterAttack(MA_MISSILE,8.0))
 			return;
@@ -409,13 +409,13 @@ void hydra_tent(float TryHit) 
 
 	if (TryHit)
 	{
-		enemy_range = range(self.enemy);
-		if (enemy_range == RANGE_MELEE)
+		makevectors(self.angles);
+		traceline(self.origin,self.origin+v_forward*128,FALSE,self);
+
+		if (trace_ent.takedamage)
 		{
-			if (!CanDamage(self.enemy,self))
-				return;
 			sound (self, CHAN_WEAPON, "hydra/tent.wav", 1, ATTN_NORM);
-			T_Damage (self.enemy, self, self, random(1,2));
+			T_Damage (trace_ent, self, self, random(1,2));
 		}
 		else
 			movetogoal(15);
@@ -546,7 +546,7 @@ void hydra_AttackDieFrames(void)
 	if (self.frame >= $hadie13)
 	    hydra_bob();
 
-	if(self.health<-40)
+	if(self.health<-30)
 		chunk_death();
 }
 
@@ -576,7 +576,7 @@ void hydra_SwimDieFrames(void)
 	if (self.frame >= $hsdie8)
 	    hydra_bob();
 
-	if(self.health<-40)
+	if(self.health<-30)
 		chunk_death();
 }
 
@@ -693,6 +693,9 @@ void hydra_TentFrames(void) 
 // Regular swimming / movement
 void hydra_SwimFrames(void) 
 {
+	if (self.health < 125)
+	    dprintf ("Contents : %s\n", pointcontents(self.origin));
+
 	self.think = hydra_SwimFrames;
 	thinktime self : HX_FRAME_TIME;
 
@@ -719,30 +722,6 @@ void misc_fountain(void)
 	starteffect(CE_FOUNTAIN, self.origin, self.angles,self.movedir,self.color,self.cnt);
 }
 
-void  hydra_start_go(void)
-{
-	self.takedamage = DAMAGE_YES;
-	self.flags2 (+) FL_ALIVE;
-
-	self.ideal_yaw = self.angles * '0 1 0';
-	if (!self.yaw_speed)
-		self.yaw_speed = 5;
-	self.view_ofs = '0 0 0';
-	self.use = monster_use;
-
-	self.flags (+) FL_SWIM | FL_MONSTER;
-
-	self.pausetime = 99999999;
-	self.th_stand();
-}
-
-void hydra_start (void)
-{
-	thinktime self : random(0.5);
-	self.think = hydra_start_go;
-	total_monsters = (total_monsters + 1.00000);
-}
-
 void do_hydra_spit(void)
 {
 	self.monster_check = 1;
@@ -807,7 +786,7 @@ void init_hydra(void)
 	setmodel (self, "models/hydra.mdl");
 	self.skin = 0;
 
-	setsize (self, '-28 -28 -24', '28 28 24');
+	setsize (self, '-40 -40 -42', '40 40 42');
 	self.hull = HULL_SCORPION;
 //self.hull = HULL_HYDRA;
 	self.health = 125;
@@ -822,7 +801,23 @@ void init_hydra(void)
 	self.th_missile = do_hydra_spit;
 	self.th_melee = do_hydra_tent;
 
-	hydra_start();
+	self.takedamage = DAMAGE_YES;
+	self.flags2 (+) FL_ALIVE;
+
+	self.ideal_yaw = self.angles * '0 1 0';
+	if (!self.yaw_speed)
+		self.yaw_speed = 5;
+	self.view_ofs = '0 0 0';
+	self.use = monster_use;
+
+	self.flags (+) FL_SWIM | FL_MONSTER;
+
+	self.pausetime = 99999999;
+
+	total_monsters += 1;
+
+	thinktime self : random(0.5);
+	self.think = self.th_stand;
 }
 
 
diff -urNp h2-0.42-demo/icemace.hc h2-1.03/icemace.hc
--- h2-0.42-demo/icemace.hc	1997-08-28 02:38:10.000000000 +0300
+++ h2-1.03/icemace.hc	1997-09-04 21:57:40.000000000 +0300
@@ -31,9 +31,6 @@ $frame idle6      idle7      idle8      
 $frame idle11     idle12     idle13     idle14     idle15     
 $frame idle16
 
-// O.S.: what frame was here in original demo???  $power1 is 32, not 31.
-$frame UNKNOWN     
-
 //
 $frame power1      power2      power3      power4      power5      
 $frame power6      power7      power8      power9
@@ -83,8 +80,9 @@ void (entity loser,entity forwhom) SnowJ
 		if(loser.team==forwhom.team)
 			return;
 
-	if(loser.classname=="monster_eidolon")
+	if(loser.flags&FL_MONSTER&&loser.monsterclass>=CLASS_BOSS)
 	{
+        T_Damage(loser,self,forwhom,10);
 		return;
 	}
 
@@ -117,6 +115,7 @@ void (entity loser,entity forwhom) SnowJ
 		loser.th_die=shatter;
 		AwardExperience(self.enemy,self,self.experience_value);
 		self.experience_value=0;
+		SUB_UseTargets();
 	}
 	else
 	{
@@ -172,7 +171,7 @@ void() FreezeTouch=
 		{
 			if(other.freeze_time<=time)
 				other.frozen=0;
-			other.freeze_time=time+3;
+			other.freeze_time=time+2.5;
 			other.frozen-=1;
 			if(other.classname=="player")
 			{
@@ -186,7 +185,7 @@ void() FreezeTouch=
 		}
 		if(other.flags&FL_COLDHEAL)//Had to take out cold heal, so cold resist
 	        T_Damage(other,self,self.owner,3);
-		else if((other.health<=10||(other.classname=="player"&&other.frozen<=-5&&other.health<200))&&other.solid!=SOLID_BSP&&!other.artifact_active&ART_INVINCIBILITY&&other.thingtype==THINGTYPE_FLESH)
+		else if((other.health<=10||(other.classname=="player"&&other.frozen<=-5&&other.health<200))&&other.solid!=SOLID_BSP&&!other.artifact_active&ART_INVINCIBILITY&&other.thingtype==THINGTYPE_FLESH&&other.health<100)
 			SnowJob(other,self.owner);
 		else
 	        T_Damage(other,self,self.owner,10);
@@ -303,9 +302,10 @@ void() blizzard_think=
 entity loser;
 vector dir, top, bottom, beam_angle;
 float beam_count; 
-	if(self.lifetime<time||self.blizzcount<self.owner.blizzcount - 2)
+	if(self.lifetime<time||self.blizzcount<self.owner.blizzcount - 1)
 	{
 		remove(self);
+		return;
 	}
 
 //	if(self.pain_finished<=time)
@@ -358,7 +358,7 @@ float beam_count; 
 		if(trace_ent.takedamage&&trace_ent.frozen<=0&&trace_ent.solid!=SOLID_BSP)
 		{
 			trace_ent.frozen-=1;
-			if((trace_ent.frozen<-5||trace_ent.health<=10)&&!trace_ent.artifact_active&ART_INVINCIBILITY&&trace_ent.thingtype==THINGTYPE_FLESH)
+			if((trace_ent.frozen<-5||trace_ent.health<=10)&&!trace_ent.artifact_active&ART_INVINCIBILITY&&trace_ent.thingtype==THINGTYPE_FLESH&&trace_ent.health<100)
 				SnowJob(trace_ent,self.owner);
 			else
 				T_Damage(trace_ent,self,self.owner,10);
@@ -377,8 +377,9 @@ float beam_count; 
 				T_Damage(loser,self,self.owner,1);
 			else
 			{
-				loser.frozen-=1;
-				if((loser.frozen<-5||random()<0.1||loser.health<15)&&loser.classname!="mjolnir"&&!loser.artifact_active&ART_INVINCIBILITY&&loser.thingtype==THINGTYPE_FLESH)
+				if(random()<0.1)
+					loser.frozen-=1;
+				if((loser.frozen<-5||loser.health<15)&&loser.classname!="mjolnir"&&!loser.artifact_active&ART_INVINCIBILITY&&loser.thingtype==THINGTYPE_FLESH&&loser.health<100)
 					SnowJob(loser,self.owner);
 				else
 					T_Damage(loser,self,self.owner,5);
@@ -397,9 +398,22 @@ void() make_blizzard =
 //local vector sizeright,sizeleft,sizefront,sizeback,sizebottom,sizetop;
 //Note: Limit to 2 per player.  If 3rd made, erase first.
 //Sound
-	if(other.frozen<=0&&!other.artifact_active&ART_INVINCIBILITY&&other.thingtype==THINGTYPE_FLESH)
+entity found;
+
+	if(other.frozen<=0&&!other.artifact_active&ART_INVINCIBILITY&&other.thingtype==THINGTYPE_FLESH&&other.health<100)
 		SnowJob(other,self.owner);
 
+	found=findradius(self.origin,256);
+	while(found)
+	{
+		if(found.flags&FL_CLIENT&&found!=self.owner)
+		{
+			found.artifact_active(+)ARTFLAG_DIVINE_INTERVENTION;
+			found.divine_time = time + HX_FRAME_TIME;
+		}
+		found=found.chain;
+	}
+
 	self.touch=SUB_Null;
 
 	self.velocity=randomv('-200 -200 0','200 200 0');
diff -urNp h2-0.42-demo/imp.hc h2-1.03/imp.hc
--- h2-0.42-demo/imp.hc	1997-08-28 02:38:10.000000000 +0300
+++ h2-1.03/imp.hc	1997-09-04 21:57:40.000000000 +0300
@@ -153,6 +153,12 @@ void imp_drop (void)
 
 void summoned_imp_die () [-- $impup23 .. $impup1]
 {
+	if(self.health<-40)
+	{
+		chunk_death();
+		return;
+	}
+	
 	if(self.frame==$impup23)
 	{
 		self.velocity='0 0 0';
@@ -187,8 +193,9 @@ void summoned_imp_die () [-- $impup23 ..
 void imp_die ()
 {
 	self.touch=SUB_Null;
-	if(self.health<-40)
+	if(self.health<-30)
 	{
+		sound (self, CHAN_BODY, "misc/null.wav", 1, ATTN_NONE);
 		chunk_death();
 		return;
 	}
@@ -228,7 +235,7 @@ void imp_die ()
 	
 	if(self.frame==$death14 &&self.flags&FL_ONGROUND)
 		MakeSolidCorpse();
-	else if(self.health<-40)
+	else if(self.health<-30)
 		chunk_death();
 //check to see if health > 0.  if so, come back alive
 //This could happen by magic or by fire for fire imp or cold for ice imp
@@ -417,6 +424,12 @@ float enemy_zdiff,enemy_hdist;
 void imp_move ()
 {
 float too_close;
+	if((self.skin==3&&self.enemy==self.controller&&vlen(self.enemy.origin-self.origin)<128)||(self.goalentity==world||self.enemy==world))
+	{
+		self.think=self.th_stand;
+		return;
+	}
+
 	if(self.attack_state!=AS_FERRY)
 		checkenemy();
 	
@@ -521,7 +534,7 @@ float too_close;
 	too_close=imp_check_too_close();
 	if((random()<0.7&&self.enemy.flags2&FL_ALIVE)||!enemy_vis||too_close||self.attack_state==AS_FERRY)
 	{
-		if(self.think!=imp_fly)
+		if(self.think!=imp_fly&&self.enemy!=world)
 		{
 			self.think=imp_fly;
 			thinktime self : 0;
@@ -711,7 +724,7 @@ void imp_missile ()
 void imp_melee ()
 {
 vector org,destiny;
-float dist;
+float dist,damg;
 	makevectors(self.angles);
 	org=self.origin+self.proj_ofs+v_forward*16*self.scale;
 	destiny=(self.enemy.absmin+self.enemy.absmax)*0.5;
@@ -734,7 +747,11 @@ float dist;
 		else
 			hitsound="assassin/chntear.wav";
 		sound(trace_ent,CHAN_AUTO,hitsound,1,ATTN_NORM);
-		T_Damage(trace_ent,self,self,10*self.scale);
+		if(self.skin==3)
+			damg=40;
+		else
+			damg=10*self.scale;
+		T_Damage(trace_ent,self,self,damg);
 	}
 	else
 		hitsound="weapons/gauntht2.wav";
@@ -829,13 +846,13 @@ vector dir,destiny,org;
 	enemy_range=vlen(destiny - org);
 	if(self.enemy.last_attack>time - 1 &&fov(self,self.enemy,45))
 	{
-		self.velocity_z+=200;
+		self.velocity_z+=150;
 		imp_abort_swoop();
 	}
 	else if(enemy_vis&&enemy_infront&&enemy_range<2000)
 	{
 		dir=normalize(destiny-org);
-		self.velocity=dir*(400+self.count*10);
+		self.velocity=dir*(377+self.count*7);
 		ai_face();
 
 		self.count += 1;
@@ -852,7 +869,7 @@ vector dir,destiny,org;
 
 void imp_enter_swoop () [++ $swoop1 .. $swoop20]
 {
-vector vec;
+vector vec,org;
 	check_pos_enemy();
 	if(self.frame==$swoop1)
 	{
@@ -872,13 +889,15 @@ vector vec;
 
 	if (self.frame >= $swoop12)
 	{  // Start to swoop down
-		vec = normalize(self.enemy.origin - self.origin + self.enemy.proj_ofs);
+		org=self.origin;
+		org_z=self.absmin_z;
+		vec = normalize(self.enemy.origin - org + self.enemy.proj_ofs);
 		self.velocity = vec*self.count;
 		if (self.frame <= $swoop13 )
 		{  // If we haven't pulled out yet, keep going straight down
 			self.velocity_x = self.velocity_y = 0;
 		}
-		if(self.origin_z - self.enemy.absmax_z>50&&self.frame==$swoop13)
+		if(self.absmin_z - self.enemy.absmax_z>50&&self.frame==$swoop13)
 			self.frame=$swoop12;
 	}
 
@@ -956,8 +975,10 @@ vector punch,dir;
 
 			if(self.classname == "monster_imp_lord")
 			{
-				damg = (20 + (damg_plus *3));
-				T_Damage (other, self, self.owner, damg);
+				damg = (33 + (damg_plus *5));
+				T_Damage (other, self, self.controller, damg);
+				if(other.monsterclass<CLASS_BOSS)
+				{
 					other.velocity_x += self.velocity_x*2;
 					other.velocity_y += self.velocity_y*2;
 					if(other.movetype==MOVETYPE_FLY)
@@ -968,13 +989,14 @@ vector punch,dir;
 					else
 						other.velocity_z=200;
 					other.flags(-)FL_ONGROUND;
+				}
 			}
 			else
 			{
 				damg = (10 + (damg_plus / 2));
-				T_Damage (other, self, self.owner, damg);
+				T_Damage (other, self, self, damg);
 			}
-			if(other.classname=="player")
+			if(other.classname=="player"&&other.flags2&FL_ALIVE)
 			{
 				makevectors(other.v_angle);
 				dir=normalize(self.velocity)*-1;
@@ -1003,6 +1025,7 @@ float enemy_hdist,enemy_zdiff,swoop_no_d
 vector destiny,org;
 	if(self.enemy==world)
 	{
+		self.think=self.th_stand;
 		return FALSE;
 	}
 
@@ -1049,6 +1072,7 @@ vector destiny,org;
 	org=(self.absmin+self.absmax)*0.5;
 
 	if(!clear_path (self.enemy,FALSE))
+		if(!CanDamage(self.enemy,self))
 			return FALSE;
 	
 	if(self.skin!=3)
@@ -1058,21 +1082,37 @@ vector destiny,org;
 	if(!self.spawnflags & MONSTER_STAND_GROUND)
 	{
 	float swoop_no_drop;
+	vector min,max;
 		swoop_no_drop=FALSE;
 		
 		enemy_hdist=vhlen(destiny-org);
-		enemy_zdiff=org_z - destiny_z;
+		if(self.skin==3)
+			enemy_zdiff=self.absmin_z - destiny_z;
+		else
+			enemy_zdiff=org_z - destiny_z;
 		if(enemy_zdiff<=36&&random()<0.3)
 			swoop_no_drop=TRUE;
-		if((enemy_hdist>70+30*self.scale&&enemy_zdiff>36)||swoop_no_drop)
+		
+		if(self.skin!=3)
+		{
+			min='-16 -16 0';
+			max='16 16 28';
+		}
+		else
+		{
+			min='-48 -48 42';
+			max='48 48 42';
+		}
+		
+		if(enemy_hdist>70+30*self.scale&&(enemy_zdiff>36||swoop_no_drop))
 		{
-			tracearea(org,org-'0 0 1'*enemy_zdiff,'-16 -16 0','16 16 28',FALSE,self);
+			tracearea(org,org-'0 0 1'*enemy_zdiff,min,max,FALSE,self);
 			if(trace_fraction==1||swoop_no_drop)
 			{
 				if(swoop_no_drop)
-					tracearea(org,destiny,'-16 -16 0','16 16 28',FALSE,self);
+					tracearea(org,destiny,min,max,FALSE,self);
 				else
-					tracearea(org-'0 0 1'*enemy_zdiff,destiny,'-16 -16 0','16 16 28',FALSE,self);
+					tracearea(org-'0 0 1'*enemy_zdiff,destiny,min,max,FALSE,self);
 				if(trace_ent==self.enemy)
 				{
 					if(swoop_no_drop)
@@ -1452,11 +1492,11 @@ void init_imp (float which_skin)
 	setmodel (self, "models/imp.mdl");
 	if (self.classname == "monster_imp_lord")
 	{
-		self.drawflags(+)SCALE_ORIGIN_BOTTOM;
+		self.drawflags(+)SCALE_ORIGIN_CENTER;
 		self.scale=2.3;//2?
-		setsize (self, '-32 -32 0', '32 32 56');
+		setsize (self, '-32 -32 -32', '32 32 32');
+		self.hull=HULL_HYDRA;
 		self.view_ofs=self.proj_ofs='0 0 82';
-		self.hull=HULL_SCORPION;
 	}
 	else
 	{
@@ -1486,15 +1526,17 @@ void init_imp (float which_skin)
 		self.thingtype=THINGTYPE_FLESH;
 		if (self.classname == "monster_imp_lord")
 		{
-			self.max_health=self.health = 400;
+			self.max_health=self.health = 600;
 			self.experience_value = 3000;
 			self.mass = 10;
+			self.th_die = summoned_imp_die;
 		}
 		else
 		{
 			self.max_health=self.health = 75+self.skin*25;
 			self.experience_value = 400 +self.skin*100;
 			self.mass = 3;
+			self.th_die = imp_die_init;
 		}
 		self.mintel = 5;
 		
@@ -1510,7 +1552,6 @@ void init_imp (float which_skin)
 		}
 		self.th_run = self.th_walk;
 		self.th_pain = imp_pain;
-		self.th_die = imp_die_init;
 		self.th_missile = imp_enter_swoop;
 		self.th_melee = imp_attack;
 	}
@@ -1546,7 +1587,10 @@ void init_imp (float which_skin)
 	else
 		self.flags (+) FL_MONSTER | FL_FLY;
 
-	if(self.wait!=-1)
+	total_monsters += 1;
+	if(self.enemy)
+		self.th_run();
+	else if(self.wait!=-1)
 		impmonster_start();
 	else
 		self.frame = $impwat1;
diff -urNp h2-0.42-demo/impulse.hc h2-1.03/impulse.hc
--- h2-0.42-demo/impulse.hc	1997-08-28 02:38:10.000000000 +0300
+++ h2-1.03/impulse.hc	1997-09-04 21:57:40.000000000 +0300
@@ -8,17 +8,6 @@ void player_experience_cheat(void);
 void Polymorph (entity loser);
 //void create_swarm (void);
 
-void CameraView (entity voyeur,entity viewthing)
-{
-	msg_entity = voyeur;
-	WriteByte(MSG_ONE, SVC_SETVIEWPORT);
-	WriteEntity(MSG_ONE, viewthing);
-	WriteByte(MSG_ONE, SVC_SETVIEWANGLES);
-	WriteAngle(MSG_ONE, viewthing.v_angle_x);
-	WriteAngle(MSG_ONE, viewthing.v_angle_y);
-	WriteAngle(MSG_ONE, viewthing.v_angle_z);
-}
-
 void restore_weapon ()
 {//FIXME: use idle, not select
 	self.weaponframe = 0;
@@ -96,7 +85,8 @@ float gotone;
 	sprint(self,found.netname);
 	sprint(self," found!\n");
 	self.viewentity=found;
-	CameraView(self,found);
+	CameraViewPort(self,found);
+	CameraViewAngles(self,found);
 	if(self.viewentity==self)
 	{
 		self.oldweapon=self.weapon;//for deselection animation
@@ -112,7 +102,7 @@ float gotone;
 
 void player_everything_cheat(void)
 {
-	if((deathmatch||coop) && self.netname!="Cosmos")
+	if(deathmatch||coop)
 		return;
 
 	CheatCommand();		// Give them weapons and mana	
@@ -146,21 +136,18 @@ void()gravitydown =
 };
 */
 
+void player_stopfly(void)
+{
+	self.movetype = MOVETYPE_WALK;
+	self.idealpitch = cvar("sv_walkpitch");
+	self.idealroll = 0;
+}
+
 void player_fly(void)
 {
-    if (self.movetype != MOVETYPE_FLY)
-    {
 	self.movetype = MOVETYPE_FLY;
-	sprint(self, "flymode ON\n");
 	self.velocity_z = 100;   // A little push up
 	self.hoverz = .4;  
-    }
-    else
-    {
-	self.movetype = MOVETYPE_WALK;
-	sprint(self, "flymode OFF\n");
-	self.idealpitch = cvar("sv_walkpitch");
-    }
 }
 
 void HeaveHo (void)
@@ -364,55 +351,6 @@ void() ImpulseCommands =
 		sprint(self,s2);
 		sprint(self,"\n");
 	}*/
-	else if (self.impulse==25)
-	{
-		if ((deathmatch || coop) && self.netname != "Cosmos")
-		{
-			self.impulse = 0;
-				return;
-		}
-		else
-		{
-			self.cnt_tome += 1;
-			Use_TomeofPower ();
-		}
-	}
-	else if (self.impulse==39)
-	{
-		if ((deathmatch || coop) && self.netname != "Cosmos")
-		{
-			self.impulse = 0;
-			return;
-		}
-		else
-		{
-			player_fly ();
-		}
-	}
-	else if (self.impulse==40)
-	{
-		if ((deathmatch || coop) && self.netname != "Cosmos")
-		{
-			self.impulse = 0;
-			return;
-		}
-		else
-		{
-			player_level_cheat ();
-		}
-	}
-	else if (self.impulse==41)
-	{
-		if ((deathmatch || coop) && self.netname != "Cosmos")
-		{
-			self.impulse = 0;
-			return;
-		}
-		else
-		{
-			player_experience_cheat ();
-		}
-	}
 	else if (self.impulse == 42)
 	{
 		dprintv("Coordinates: %s\n", self.origin);
diff -urNp h2-0.42-demo/invntory.hc h2-1.03/invntory.hc
--- h2-0.42-demo/invntory.hc	1997-08-28 02:38:10.000000000 +0300
+++ h2-1.03/invntory.hc	1997-09-04 21:57:40.000000000 +0300
@@ -6,6 +6,27 @@ entity SelectSpawnPoint(void);
 void teleport_touch (void);
 void PlayerSpeed_Calc (void);
 void player_fly(void);
+void player_stopfly(void);
+
+void Use_RingFlight()
+{
+	if(self.rings&RING_FLIGHT)
+	{//Toggle off, but don't get leftovers!
+		self.ring_flight=self.ring_flight_time=0;
+		self.rings(-)RING_FLIGHT;
+		self.rings_low (-) RING_FLIGHT;
+		player_stopfly();
+		self.cnt_flight -= 1;
+	}
+	else
+	{
+		self.rings(+)RING_FLIGHT;
+		self.ring_flight = 100;
+		self.ring_flight_time = time + 1;
+		player_fly();
+		self.rings_low (-) RING_FLIGHT;
+	}
+}
 
 void()monster_imp_lord;
 void BecomeImp ()
@@ -13,11 +34,12 @@ void BecomeImp ()
 	if(other.solid!=SOLID_BSP)
 		return;
 
+	setorigin(self,self.origin+'0 0 42');
+	setsize(self,'-40 -40 -42','40 40 42');
+	self.hull=HULL_HYDRA;
 	newmis=spawn();
 	setorigin(newmis,self.origin);
-	setsize(self,'-32 -32 -10','32 32 46');
-	self.hull=HULL_SCORPION;
-	tracearea(self.origin,self.origin+'0 0 7',self.mins,self.maxs,FALSE,self);
+	tracearea(self.origin,self.origin+'0 0 1',self.mins,self.maxs,FALSE,self);
 	if(trace_fraction==1&&!trace_allsolid)
 	{
 		self.touch=SUB_Null;
@@ -27,8 +49,8 @@ void BecomeImp ()
 		newmis.controller=self.owner;
 		newmis.team=self.owner.team;
 		newmis.classname="monster_imp_lord";
-		newmis.lifetime=time+60;
-		if(self.owner.enemy!=world&&self.owner.enemy.flags2&FL_ALIVE)
+		newmis.lifetime=time+30;
+		if(self.owner.enemy!=world&&self.owner.enemy.flags2&FL_ALIVE&&visible2ent(self.owner.enemy,self))
 		{
 			newmis.enemy=newmis.goalentity=self.owner.enemy;
 			newmis.monster_awake=TRUE;
@@ -45,12 +67,13 @@ void BecomeImp ()
 
 		sound (newmis, CHAN_AUTO, "weapons/expsmall.wav", 1, ATTN_NORM);
 		sound (newmis, CHAN_VOICE, "imp/upbig.wav", 1, ATTN_NORM);
+		setorigin(self,self.origin-'0 0 42');
 		BecomeExplosion(CE_FLOOR_EXPLOSION);
 	}
 	else
 	{
 	entity oself;
-		setorigin(self,self.origin-self.movedir*8);
+		setorigin(self,self.origin-'0 0 42'-self.movedir*8);
 		traceline(self.origin+'0 0 10',self.origin-'0 0 100',TRUE,self);
 		sound (newmis, CHAN_BODY, "items/itmspawn.wav", 1, ATTN_NORM);	// play respawn sound
 		newmis.classname="art_summon";
@@ -80,7 +103,7 @@ entity missile;
 	missile.drawflags=MLS_POWERMODE;
 
 	missile.movedir=normalize(v_forward);
-	missile.velocity=normalize(v_forward)*400 +v_up*200;
+	missile.velocity=normalize(v_forward)*300 +v_up*100;
 	missile.avelocity=RandomVector('300 300 300');
 
 	setmodel (missile, "models/a_summon.mdl");
@@ -203,6 +226,12 @@ void proximity_think ()
 {
 float okay;
 	thinktime self : 0.1;
+	if(self.lifetime<time)
+	{
+		self.think=MultiExplode;
+		thinktime self : 0;
+		return;
+	}
 	if(!visible(self.enemy)&&!self.enemy.effects&EF_NODRAW)
 		self.enemy=world;
 	if(self.enemy)
@@ -268,6 +297,7 @@ void Use_Proximity_Mine ()
 	newmis.angles_x=90;
 	newmis.avelocity_y=100;
 	newmis.skin=1;
+	newmis.drawflags(+)MLS_POWERMODE;
 	setmodel (newmis, "models/glyphwir.mdl");
 	setsize(newmis,'-3 -3 -3','3 3 3');
 	newmis.hull=HULL_POINT;
@@ -334,8 +364,12 @@ void UseBlast (void)
 
 	while(victim)
 	{
+		if (victim.classname!="hook"&&victim.owner.classname != "circfire" && victim.classname != "cube_of_force"&&victim.monsterclass<CLASS_BOSS)
+		{
+//			dprint(victim.classname);
+//			dprint(" blasted\n");
 			if (((victim.health) && (victim!=self) ) ||
-				(victim.movetype == MOVETYPE_FLYMISSILE) || (victim.movetype == MOVETYPE_BOUNCEMISSILE))
+				(victim.movetype == MOVETYPE_FLYMISSILE) || (victim.movetype == MOVETYPE_BOUNCEMISSILE) && (victim.owner != self))
 			{
 				traceline(self.origin,victim.origin,TRUE,self);
 
@@ -390,9 +424,15 @@ void UseBlast (void)
 					T_Damage (victim, self, self, points);
 				}
 			}
+		}
 
 		if (victim.classname=="tornato" && victim.enemy.flags2&FL_ALIVE)
 			victim.enemy.flags2(+)FL_TORNATO_SAFE;
+		if(victim.classname=="swarm")
+		{
+			victim.think=hive_die;
+			thinktime victim : 0;
+		} 
 
 		victim = victim.chain;
    }
@@ -403,7 +443,10 @@ void UseBlast (void)
 void UseInvincibility (void)
 {
 	self.artifact_active = self.artifact_active | ART_INVINCIBILITY;
-	self.invincible_time = time + TOME_TIME;
+	if(deathmatch)
+		self.invincible_time = time + TOME_TIME;
+	else
+		self.invincible_time = time + 10;
 	if (self.artifact_low & ART_INVINCIBILITY)
 		self.artifact_low = self.artifact_low - (self.artifact_low & ART_INVINCIBILITY);
 
@@ -444,7 +487,8 @@ void BreakChains()
 	if(!self.flags2&FL_CHAINED)
 		return;
 	self.flags2(-)FL_CHAINED;
-	self.movetype = self.oldmovetype;
+	if(!self.rings&RING_FLIGHT)
+		self.movetype=MOVETYPE_WALK;
 }
 
 void UseInventoryItem (void)
@@ -488,15 +532,15 @@ void UseInventoryItem (void)
 	}
 	else if ((self.inventory == INV_GLYPH) && (self.cnt_glyph))
 	{
-		self.cnt_glyph = self.cnt_glyph - 1;
+		self.cnt_glyph-=1;
 		if(self.playerclass==CLASS_ASSASSIN)
 			Use_Tripwire();
 		else if(self.playerclass==CLASS_CRUSADER)
-			Use_Proximity_Mine();
+			Use_TimeBomb ();
 		else if(self.playerclass==CLASS_PALADIN)
 			Use_Fireball();
 		else if(self.playerclass==CLASS_NECROMANCER)
-			Use_TimeBomb();
+			Use_Proximity_Mine();
 		self.flags (+) FL_ARTIFACTUSED;
 	}
 	else if ((self.inventory == INV_HASTE) && (self.cnt_haste))
@@ -558,19 +602,18 @@ void UseInventoryItem (void)
 	}
 	else if ((self.inventory == INV_FLIGHT) && (self.cnt_flight))
 	{
-		self.rings = other.rings|RING_FLIGHT;
-		self.ring_flight = 100;
-		self.ring_flight_time = time + 1;
-		player_fly();
-		if (self.rings_low & RING_FLIGHT)
-			self.rings_low (-) RING_FLIGHT;
-		self.cnt_flight -= 1;
+		Use_RingFlight();
 		self.flags (+) FL_ARTIFACTUSED;
 	}
 	else
-	{		sprint(self, "no use for item ");
-			sprint(self, ftos(self.inventory));
+	{	// Can't even try to use flight in non-deathmatch
+		if ((!deathmatch) && (self.inventory == INV_FLIGHT))
+			time = time;
+		else
+		{
+			sprint(self, STR_DONOTPOSSESS);
 			sprint(self, "\n");
+		}
 	}
 
 }
@@ -592,41 +635,41 @@ void PanicButton ()
 			self.flags (+) FL_ARTIFACTUSED;
 		}
 	}
-	else if (self.cnt_teleport)
+	if (self.cnt_teleport)
 	{
 		Use_TeleportCoin ();
 		BreakChains();
 		self.flags (+) FL_ARTIFACTUSED;
 	}
-	else if (self.cnt_h_boost)
+	if (self.cnt_h_boost)
 	{
 		use_healthboost ();
 		self.flags (+) FL_ARTIFACTUSED;
 	}
-	else if (self.cnt_sh_boost)
+	if (self.cnt_sh_boost)
 	{
 		use_super_healthboost ();
 		self.flags (+) FL_ARTIFACTUSED;
 	}
-	else if (self.cnt_mana_boost)
+	if (self.cnt_mana_boost)
 	{
 		UseManaBoost ();
 		self.flags (+) FL_ARTIFACTUSED;
 	}
-	else if (self.cnt_glyph)
+	if (self.cnt_glyph)
 	{
 		self.cnt_glyph=self.cnt_glyph - 1;
 		if(self.playerclass==CLASS_ASSASSIN)
 			Use_Tripwire();
 		else if(self.playerclass==CLASS_CRUSADER)
-			Use_Proximity_Mine();
+			Use_TimeBomb ();
 		else if(self.playerclass==CLASS_PALADIN)
 			Use_Fireball();
 		else if(self.playerclass==CLASS_NECROMANCER)
-			Use_TimeBomb();
+			Use_Proximity_Mine();
 		self.flags (+) FL_ARTIFACTUSED;
 	}
-	else if (self.cnt_haste)
+	if (self.cnt_haste)
 	{
 		if (self.haste_time < (time + 5))
 		{
@@ -634,13 +677,13 @@ void PanicButton ()
 			self.flags (+) FL_ARTIFACTUSED;
 		}
 	}
-	else if (self.cnt_blast)
+	if (self.cnt_blast)
 	{
 		UseBlast();		
 		BreakChains();
 		self.flags (+) FL_ARTIFACTUSED;
 	}
-	else if (self.cnt_cubeofforce)
+	if (self.cnt_cubeofforce)
 	{
 		if ((!self.artifact_flags & AFL_CUBE_LEFT) ||
 			(!self.artifact_flags & AFL_CUBE_RIGHT))
@@ -649,7 +692,7 @@ void PanicButton ()
 			self.flags (+) FL_ARTIFACTUSED;
 		}
 	}
-	else if (self.cnt_invincibility)
+	if (self.cnt_invincibility)
 	{
 		if (self.invincible_time < (time + 5))
 		{
@@ -657,7 +700,7 @@ void PanicButton ()
 			self.flags (+) FL_ARTIFACTUSED;
 		}
 	}
-	else if (self.cnt_invisibility)
+	if (self.cnt_invisibility)
 	{
 		if (self.invisible_time < (time + 5))
 		{
@@ -665,7 +708,7 @@ void PanicButton ()
 			self.flags (+) FL_ARTIFACTUSED;
 		}
 	}
-	else if (self.cnt_tome)
+	if (self.cnt_tome)
 	{
 		if (self.tome_time < (time + 5))
 		{
@@ -673,141 +716,167 @@ void PanicButton ()
 			self.flags (+) FL_ARTIFACTUSED;
 		}
 	}
-	else if (self.cnt_polymorph)
+	if (self.cnt_polymorph)
 	{
 		Use_Polymorph();		
 		self.flags (+) FL_ARTIFACTUSED;
 	}
-	else if (self.cnt_summon)
+	if (self.cnt_summon)
 	{
 		Use_Summoner();		
 		self.flags (+) FL_ARTIFACTUSED;
 	}
-	else if (self.cnt_flight)
+	if (self.cnt_flight)
 	{
-		self.rings = other.rings|RING_FLIGHT;
-		self.ring_flight = 100;
-		self.ring_flight_time = time + 1;
-		player_fly();
-		if (self.rings_low & RING_FLIGHT)
-			self.rings_low (-) RING_FLIGHT;
-		self.cnt_flight -= 1;
+		Use_RingFlight();
 		self.flags (+) FL_ARTIFACTUSED;
 	}
-	else
-	{
-		centerprint(self, "No inventory items!\n");
-		sound(self, CHAN_AUTO, "misc/comm.wav", 1, ATTN_NORM);
-	}
 }
 
 void  DropInventoryItem (void)
 {
 	entity item,holdent;
+	float throwflag;
+
+	makevectors(self.v_angle);
+	traceline(self.origin + self.proj_ofs,self.origin + self.proj_ofs + v_forward * 60,FALSE,self);
+
+	if (trace_fraction < 1)
+	{
+		remove(item);
+		centerprint(self,"Not enough room to throw");
+		return;
+	}
 
 	item = spawn();
 
-	makevectors(self.v_angle);
 
-	item.velocity = normalize (v_forward);
-	item.velocity = item.velocity * 200;
-	item.velocity_x += random(-20,20);	// So they don't land on top if each other if player is 
-	item.velocity_y += random(-20,20);	// standing in one place and throwing multiple items
-	item.velocity_z = 200;
-	setorigin(item, self.origin + self.proj_ofs);
 
 	item.flags(+)FL_ITEM;
 	item.solid = SOLID_TRIGGER;
 	item.movetype = MOVETYPE_TOSS;
 	item.owner = self;
 	item.artifact_ignore_owner_time = time + 2;
-	item.artifact_ignore_time = time + 1;
+	item.artifact_ignore_time = time + 0.1;
 
 	setsize (item, '-8 -8 -38', '8 8 24');
 	holdent=self;
 	self = item;
+	throwflag = 0;
 
 	// Is it in the inventory
 	if ((holdent.inventory == INV_TORCH) && (holdent.cnt_torch))
 	{
 		spawn_artifact(ARTIFACT_TORCH,NO_RESPAWN);
 		holdent.cnt_torch -=1;
+		throwflag = 1;
 	}
 	else if ((holdent.inventory == INV_HP_BOOST) && (holdent.cnt_h_boost))
 	{
 		spawn_artifact(ARTIFACT_HP_BOOST,NO_RESPAWN);
 		holdent.cnt_h_boost -=1;
+		throwflag = 1;
 	}
 	else if ((holdent.inventory == INV_SUPER_HP_BOOST) && (holdent.cnt_sh_boost))
 	{
 		spawn_artifact(ARTIFACT_SUPER_HP_BOOST,NO_RESPAWN);
 		holdent.cnt_sh_boost -=1;
+		throwflag = 1;
 	}
 	else if ((holdent.inventory == INV_MANA_BOOST) && (holdent.cnt_mana_boost))
 	{
 		spawn_artifact(ARTIFACT_MANA_BOOST,NO_RESPAWN);
 		holdent.cnt_mana_boost -=1;
+		throwflag = 1;
 	}
 	else if ((holdent.inventory == INV_TELEPORT) && (holdent.cnt_teleport))
 	{
 		spawn_artifact(ARTIFACT_TELEPORT,NO_RESPAWN);
 		holdent.cnt_teleport -=1;
+		throwflag = 1;
 	}
 	else if ((holdent.inventory == INV_TOME) && (holdent.cnt_tome))
 	{
 		spawn_artifact(ARTIFACT_TOME,NO_RESPAWN);
 		holdent.cnt_tome -=1;
+		throwflag = 1;
 	}
 	else if ((holdent.inventory == INV_SUMMON) && (holdent.cnt_summon))
 	{
 		spawn_artifact(ARTIFACT_SUMMON,NO_RESPAWN);
 		holdent.cnt_summon -=1;
+		throwflag = 1;
 	}
 	else if ((holdent.inventory == INV_INVISIBILITY) && (holdent.cnt_invisibility))
 	{
 		spawn_artifact(ARTIFACT_INVISIBILITY,NO_RESPAWN);
 		holdent.cnt_invisibility -=1;
+		throwflag = 1;
 	}
-	else if ((holdent.inventory == INV_GLYPH) && ((holdent.cnt_glyph&&holdent.playerclass!=CLASS_NECROMANCER)||holdent.cnt_glyph>=5))
+	else if ((holdent.inventory == INV_GLYPH) && ((holdent.cnt_glyph&&holdent.playerclass!=CLASS_CRUSADER)||holdent.cnt_glyph>=5))
 	{
 		spawn_artifact(ARTIFACT_GLYPH,NO_RESPAWN);
-		if(holdent.playerclass==CLASS_NECROMANCER)
+		if(holdent.playerclass==CLASS_CRUSADER)
 			holdent.cnt_glyph -=5;
 		else
 			holdent.cnt_glyph -=1;
+		throwflag = 1;
 	}
 	else if ((holdent.inventory == INV_HASTE) && (holdent.cnt_haste))
 	{
 		spawn_artifact(ARTIFACT_HASTE,NO_RESPAWN);
 		holdent.cnt_haste -=1;
+		throwflag = 1;
 	}
 	else if ((holdent.inventory == INV_BLAST) && (holdent.cnt_blast))
 	{
 		spawn_artifact(ARTIFACT_BLAST,NO_RESPAWN);
 		holdent.cnt_blast -=1;
+		throwflag = 1;
 	}
 	else if ((holdent.inventory == INV_POLYMORPH) && (holdent.cnt_polymorph))
 	{
 		spawn_artifact(ARTIFACT_POLYMORPH,NO_RESPAWN);
 		holdent.cnt_polymorph -=1;
+		throwflag = 1;
 	}
 	else if ((holdent.inventory == INV_FLIGHT) && (holdent.cnt_flight))
 	{
 		spawn_artifact(ARTIFACT_FLIGHT,NO_RESPAWN);
 		holdent.cnt_flight -=1;
+		throwflag = 1;
 	}
 	else if ((holdent.inventory == INV_CUBEOFFORCE) && (holdent.cnt_cubeofforce))
 	{
 		spawn_artifact(ARTIFACT_CUBEOFFORCE,NO_RESPAWN);
 		holdent.cnt_cubeofforce -=1;
+		throwflag = 1;
 	}
 	else if ((holdent.inventory == INV_INVINCIBILITY) && (holdent.cnt_invincibility))
 	{
 		spawn_artifact(ARTIFACT_INVINCIBILITY,NO_RESPAWN);
 		holdent.cnt_invincibility -=1;
+		throwflag = 1;
 	}
 
 	self = holdent;
+
+	if (throwflag)  // Something could be thrown
+	{
+		// Throw it
+		item.velocity = normalize (v_forward);
+		item.velocity = item.velocity * 200;
+		item.velocity_x += random(-20,20);	// So they don't land on top if each other if player is 
+		item.velocity_y += random(-20,20);	// standing in one place and throwing multiple items
+		item.velocity_z = 200;
+		makevectors(self.v_angle);
+		setorigin(item,self.origin + self.proj_ofs + v_up * 10 + v_forward * 40 + v_right * 8);
+		
+		sound(self,CHAN_BODY,"misc/whoosh.wav",1,ATTN_NORM);
+	}
+	else
+		remove(item);
+
 }
 
 void Inventory_Quick(float which)
diff -urNp h2-0.42-demo/items.hc h2-1.03/items.hc
--- h2-0.42-demo/items.hc	1997-08-28 02:38:10.000000000 +0300
+++ h2-1.03/items.hc	1997-09-04 21:57:40.000000000 +0300
@@ -105,9 +105,11 @@ void() StartItem =
 {
 	if (self.owner)  // Spawned by the backpack function
 	{
-		self.hull = HULL_POINT;
-		self.think = ItemHitFloorWait;
-		thinktime self : 0;
+		self.movetype = MOVETYPE_PUSHPULL;
+		if(self.touch==puzzle_touch)
+			setsize (self, '-8 -8 -28', '8 8 8');
+		else 
+			setsize (self, '-16 -16 -38', '16 16 24');
 	}
 	else
 	{
@@ -923,6 +925,8 @@ void BackpackTouch(void)
 		sprint(other,s);
 		sprint(other," ");
 		sprint(other,STR_TORCH);
+		if (self.cnt_torch > 1)	// Plural
+			sprint(other,"es");
 	}
 	if (self.cnt_h_boost > 0)
 	{
@@ -935,6 +939,8 @@ void BackpackTouch(void)
 		sprint(other,s);
 		sprint(other," ");
 		sprint(other,STR_HEALTHBOOST);
+		if (self.cnt_h_boost > 1)	// Plural
+			sprint(other,"s");
 	}
 	if (self.cnt_sh_boost > 0)
 	{
@@ -947,6 +953,8 @@ void BackpackTouch(void)
 		sprint(other,s);
 		sprint(other," ");
 		sprint(other,STR_SUPERHEALTHBOOST);
+		if (self.cnt_sh_boost > 1)	// Plural
+			sprint(other,"s");
 	}
 	if (self.cnt_mana_boost > 0)
 	{
@@ -958,7 +966,10 @@ void BackpackTouch(void)
 		s = ftos(self.cnt_mana_boost);
 		sprint(other,s);
 		sprint(other," ");
-		sprint(other,STR_MANABOOST);
+		if (self.cnt_mana_boost == 1)
+			sprint(other,STR_MANABOOST);
+		else
+			sprint(other,"Kraters of Might");
 	}
 	if (self.cnt_teleport > 0)
 	{
@@ -971,6 +982,8 @@ void BackpackTouch(void)
 		sprint(other,s);
 		sprint(other," ");
 		sprint(other,STR_TELEPORT);
+		if (self.cnt_teleport > 1)	// Plural
+			sprint(other,"s");
 	}
 	if (self.cnt_tome > 0)
 	{
@@ -982,7 +995,10 @@ void BackpackTouch(void)
 		s = ftos(self.cnt_tome);
 		sprint(other,s);
 		sprint(other," ");
-		sprint(other,STR_TOME);
+		if (self.cnt_tome == 1)
+			sprint(other,STR_TOME);
+		else
+			sprint(other,"Tomes of Power");
 	}
 	if (self.cnt_summon > 0)
 	{
@@ -994,7 +1010,11 @@ void BackpackTouch(void)
 		s = ftos(self.cnt_summon);
 		sprint(other,s);
 		sprint(other," ");
-		sprint(other,STR_SUMMON);
+		if (self.cnt_summon == 1)
+			sprint(other,STR_SUMMON);
+		else
+			sprint(other,"Stones of Summoning");
+
 	}
 	if (self.cnt_flight > 0)
 	{
@@ -1006,7 +1026,11 @@ void BackpackTouch(void)
 		s = ftos(self.cnt_flight);
 		sprint(other,s);
 		sprint(other," ");
-		sprint(other,STR_FLIGHT);
+		if (self.cnt_flight == 1)
+			sprint(other,STR_RINGFLIGHT);
+		else
+			sprint(other,"Rings of Flight");
+
 	}
 	if (self.cnt_glyph > 0)
 	{
@@ -1018,7 +1042,10 @@ void BackpackTouch(void)
 		s = ftos(self.cnt_glyph);
 		sprint(other,s);
 		sprint(other," ");
-		sprint(other,STR_GLYPH);
+		if (self.cnt_glyph == 1)
+			sprint(other,STR_GLYPH);
+		else
+			sprint(other,"Glyphs Of The Ancients");
 	}
 
 	if (self.cnt_haste > 0)
@@ -1043,7 +1070,10 @@ void BackpackTouch(void)
 		s = ftos(self.cnt_blast);
 		sprint(other,s);
 		sprint(other," ");
-		sprint(other,STR_BLAST);
+		if (self.cnt_blast == 1)
+			sprint(other,STR_BLAST);
+		else
+			sprint(other,"Discs of Repulsion");
 	}
 	if (self.cnt_polymorph > 0)
 	{
@@ -1055,7 +1085,10 @@ void BackpackTouch(void)
 		s = ftos(self.cnt_polymorph);
 		sprint(other,s);
 		sprint(other," ");
-		sprint(other,STR_POLYMORPH);
+		if (self.cnt_polymorph == 1)
+			sprint(other,STR_POLYMORPH);
+		else
+			sprint(other,"Seals of the Ovinomancer");
 	}
 	if (self.cnt_invisibility > 0)
 	{
@@ -1068,6 +1101,8 @@ void BackpackTouch(void)
 		sprint(other,s);
 		sprint(other," ");
 		sprint(other,STR_INVISIBILITY);
+		if (self.cnt_polymorph > 1)
+			sprint(other,"s"); 
 	}
 	if (self.cnt_cubeofforce > 0)
 	{
@@ -1080,6 +1115,9 @@ void BackpackTouch(void)
 		sprint(other,s);
 		sprint(other," ");
 		sprint(other,STR_CUBEOFFORCE);
+		if (self.cnt_cubeofforce > 1)
+			sprint(other,"s"); 
+
 	}
 	if (self.cnt_invincibility > 0)
 	{
@@ -1091,7 +1129,10 @@ void BackpackTouch(void)
 		s = ftos(self.cnt_invincibility);
 		sprint(other,s);
 		sprint(other," ");
-		sprint(other,STR_INVINCIBILITY);
+		if (self.cnt_invincibility == 1)
+			sprint(other,STR_INVINCIBILITY);
+		else
+			sprint(other,"Icons of the Defender");
 	}
 	if (self.bluemana > 0)
 	{
@@ -1492,19 +1533,20 @@ void DropBackpack(void)
 	}
 
 	setorigin(item,self.origin);
+	item.origin = self.origin + '0 0 40';
 	item.flags(+)FL_ITEM;
 	item.solid = SOLID_TRIGGER;
 	item.movetype = MOVETYPE_TOSS;
 	item.owner = self;
 	item.artifact_ignore_owner_time = time + 2;
-	item.artifact_ignore_time = time + 1;
+	item.artifact_ignore_time = time + 0.1;
 
 	if ((total == 1 && !item.bluemana && !item.greenmana && !item.spawn_health) ||
 	    (total == 0 &&  item.bluemana && !item.greenmana && !item.spawn_health)  ||
 		(total == 0 && !item.bluemana &&  item.greenmana && !item.spawn_health)  ||
 	    (total == 0 && !item.bluemana && !item.greenmana &&  item.spawn_health))
 	{	// throw out the individual item
-		item.velocity_z = 300;
+		item.velocity_z = 200;
 //		item.velocity_x = random(-20,20);
 //		item.velocity_y = random(-20,20);
 
@@ -1626,6 +1668,12 @@ void DropBackpack(void)
 	
 		item.nextthink = time + 120;	// remove after 2 minutes
 		item.think = SUB_Remove;
+
+		if (!total)
+		{
+			remove(item);
+			return;
+		}
 	}
 
 	self.cnt_torch=0;
diff -urNp h2-0.42-demo/light.hc h2-1.03/light.hc
--- h2-0.42-demo/light.hc	1997-08-28 02:38:10.000000000 +0300
+++ h2-1.03/light.hc	1997-09-02 17:41:32.000000000 +0300
@@ -127,11 +127,13 @@ float lightstate;
 	{
 		if(self.mdl)
 			setmodel(self,self.mdl);
+		self.drawflags(-)MLS_ABSLIGHT;
 	}
 	else
 	{
 		if(self.weaponmodel)
 			setmodel(self,self.weaponmodel);
+		self.drawflags(+)MLS_ABSLIGHT;
 	}
 	if(time>self.fadespeed)
 		self.nextthink=-1;
@@ -142,7 +144,7 @@ float lightstate;
 
 void torch_use (void)
 {
-	self.fadespeed=time+other.fadespeed+0.1;
+	self.fadespeed=time+other.fadespeed+1;
 	torch_think();
 }
 
@@ -251,7 +253,6 @@ void() light_torch_small_walltorch =
 	self.mdl = "models/null.spr";
 	self.weaponmodel = "models/flame.mdl";
 
-	self.drawflags(+)MLS_ABSLIGHT;
 	self.abslight = .75;
 
 	if(self.style>=32)
@@ -266,6 +267,7 @@ void() light_torch_small_walltorch =
 	}
 	else
 	{
+		self.drawflags(+)MLS_ABSLIGHT;
 		setmodel(self,self.weaponmodel);
 		makestatic (self);
 	}
@@ -291,7 +293,6 @@ void() light_flame_large_yellow =
 	if(self.targetname)
 		self.use=torch_use;
 
-	self.drawflags(+)MLS_ABSLIGHT;
 	self.abslight = .75;
 
 	self.mdl = "models/null.spr";
@@ -308,6 +309,7 @@ void() light_flame_large_yellow =
 	}
 	else
 	{
+		self.drawflags(+)MLS_ABSLIGHT;
 		setmodel(self,self.weaponmodel);
 		makestatic (self);
 	}
@@ -333,7 +335,6 @@ void() light_flame_small_yellow =
 	if(self.targetname)
 		self.use=torch_use;
 
-	self.drawflags(+)MLS_ABSLIGHT;
 	self.abslight = .75;
 
 	self.mdl = "models/null.spr";
@@ -350,6 +351,7 @@ void() light_flame_small_yellow =
 	}
 	else
 	{
+		self.drawflags(+)MLS_ABSLIGHT;
 		setmodel(self,self.weaponmodel);
 		makestatic (self);
 	}
@@ -376,7 +378,6 @@ void() light_flame_small_white =
 	if(self.targetname)
 		self.use=torch_use;
 
-	self.drawflags(+)MLS_ABSLIGHT;
 	self.abslight = .75;
 
 	self.mdl = "models/null.spr";
@@ -393,6 +394,7 @@ void() light_flame_small_white =
 	}
 	else
 	{
+		self.drawflags(+)MLS_ABSLIGHT;
 		setmodel(self,self.weaponmodel);
 		makestatic (self);
 	}
@@ -422,7 +424,6 @@ void() light_gem =
 	self.mdl = "models/null.spr";
 	self.weaponmodel = "models/gemlight.mdl";
 
-	self.drawflags(+)MLS_ABSLIGHT;
 	self.abslight = .75;
 
 	if(self.style>=32)
@@ -437,6 +438,7 @@ void() light_gem =
 	}
 	else
 	{
+		self.drawflags(+)MLS_ABSLIGHT;
 		setmodel(self,self.weaponmodel);
 		makestatic (self);
 	}
diff -urNp h2-0.42-demo/magicmis.hc h2-1.03/magicmis.hc
--- h2-0.42-demo/magicmis.hc	1997-08-28 02:38:10.000000000 +0300
+++ h2-1.03/magicmis.hc	1997-09-04 21:57:40.000000000 +0300
@@ -80,13 +80,9 @@ void MagicMissileTouch (void)
 		remove(self.movechain);
 	self.level=FALSE;
 	if(other.takedamage)
-	{
 		T_Damage(other,self,self.owner,self.dmg);
-		self.dmg *= 0.5;
-	}
 
-	T_RadiusDamage(self,self.owner,self.dmg,self);
-	self.effects (+) EF_BRIGHTLIGHT;
+	T_RadiusDamage(self,self.owner,self.dmg,other);
 	sound(self,CHAN_AUTO,"weapons/explode.wav",1,ATTN_NORM);
 	starteffect(CE_MAGIC_MISSILE_EXPLOSION,self.origin-self.movedir*8,0.05);
 	remove(self);
@@ -140,7 +136,7 @@ vector spread;
 	newmis.solid=SOLID_BBOX;
 
 	newmis.touch=MagicMissileTouch;
-	newmis.dmg=random(10,15);
+	newmis.dmg=random(20,25);
 
 	newmis.speed=1000;
 	spread=normalize(v_right)*(offset*25);
@@ -171,10 +167,17 @@ vector spread;
 		{
 			newmis.enemy=self.enemy;
 			newmis.classname = "eidolon spell";
+			newmis.turn_time=3;
+			newmis.dmg=random(30,40);
+		}
+		else
+		{
+			newmis.turn_time=2;
+			newmis.dmg=random(45,55);
 		}
-		newmis.frags=TRUE;
 		newmis.effects=EF_DIMLIGHT;
-		newmis.dmg=random(25,35);
+		newmis.frags=TRUE;
+		newmis.dmg=random(30,40);
 		newmis.veer=100;
 		newmis.homerate=0.1;
 		newmis.turn_time=3;
diff -urNp h2-0.42-demo/medusa.hc h2-1.03/medusa.hc
--- h2-0.42-demo/medusa.hc	1997-08-28 02:38:10.000000000 +0300
+++ h2-1.03/medusa.hc	1997-09-04 21:57:40.000000000 +0300
@@ -178,6 +178,7 @@ void() SnakeHit =
 	if(other==self.owner||(other.owner==self.owner&&other.classname=="snakearrow"))
 		return;
 	starteffect(CE_MEDUSA_HIT,self.origin);
+	sound(other,CHAN_AUTO,"medusa/hitplayr.wav",1,ATTN_NORM);
     if(other.takedamage)
     {
         other.bloodloss=other.bloodloss+1;
@@ -277,11 +278,8 @@ float damg;
 void()medusa_attack_left = [++ $rnatlf1 .. $rnatlf21]
 {
 	medusa_check_use_model("models/medusa2.mdl");
-	if(cycle_wrapped)
-	{
-		thinktime self : 0;
+	if(self.frame==$rnatlf21)
 		self.think=self.th_run;
-	}
 	else if(self.frame==$rnatlf4)
 		MedusaAttacks();
 };
@@ -289,11 +287,8 @@ void()medusa_attack_left = [++ $rnatlf1 
 void()medusa_attack_right = [++ $rnatrt1 .. $rnatrt21]
 {
 	medusa_check_use_model("models/medusa2.mdl");
-	if(cycle_wrapped)
-	{
-		thinktime self : 0;
+	if(self.frame==$rnatrt21)
 		self.think=self.th_run;
-	}
 	else if(self.frame==$rnatrt4)
 		MedusaAttacks();
 };
@@ -301,11 +296,8 @@ void()medusa_attack_right = [++ $rnatrt1
 void()medusa_attack = [++ $runatt1 .. $runatt29]
 {
 	medusa_check_use_model("models/medusa2.mdl");
-	if(cycle_wrapped)
-	{
-		thinktime self : 0;
+	if(self.frame==$runatt29)
 		self.think=	self.th_run;
-	}
 	else if(self.frame==$runatt12)
 		MedusaAttacks();
 };
@@ -365,10 +357,10 @@ void MedusaGaze (vector org, vector dest
 		if(loser.classname=="player"&&random()<0.2+skill/10+self.skin/5)
 		{
 			loser.o_angle=loser.v_angle;
-			loser.pausetime=time+0.1;
+			loser.pausetime=time+random(0.05,0.3);
 			if(random()<0.5)
 			{
-				loser.attack_finished=time+0.1;
+				loser.attack_finished=time+random(0.05,0.3);
 				if(random()<0.5)
 					thinktime loser : 0.2;
 			}
@@ -543,6 +535,7 @@ void MedusaHeadDying () [++ 46 .. 105]
 				self.angles_x=0;
 			if(self.angles_z<-10||self.angles_z>10)
 				self.angles_z=0;
+			self.solid = SOLID_BBOX;
 			self.think=MedusaHeadDead;
 			thinktime self : 0;
 		}
@@ -560,13 +553,16 @@ void MedusaThrowHead ()
 	newmis.owner=self;
 	newmis.enemy=newmis.goalentity=self.enemy;
 	newmis.yaw_speed=3;
-	newmis.origin = self.absmax - '0 0 15';
 	setmodel (newmis, self.headmodel);
 	self.headmodel="";
 	setsize (newmis, '-3 -3 -3', '3 3 3');
+	setorigin(newmis,self.absmax - '0 0 15');
 	newmis.velocity = randomv('-200 -200 200','200 200 600');
 	newmis.movetype = MOVETYPE_BOUNCE;
-	newmis.solid = SOLID_BBOX;
+	if(pointcontents(newmis.origin)==CONTENT_SOLID)
+		newmis.solid = SOLID_NOT;
+	else
+		newmis.solid = SOLID_BBOX;
 	newmis.takedamage=DAMAGE_YES;
 	newmis.thingtype=self.thingtype;
 	newmis.th_die=chunk_death;
@@ -757,7 +753,7 @@ float dot;
 	makevectors(self.angles);
 	enemy_dir=normalize(self.enemy.origin-self.origin);
 	dot=v_right*enemy_dir;
-	if(dot>0.2)
+	if(dot>0.3)
 	{
 		self.angle_ofs_y=-90;
 		if(action>=MEDUSA_HEADBUTT)
@@ -767,7 +763,7 @@ float dot;
 		else
 			self.think=medusa_look_right;
 	}
-	else if(dot<-0.2)
+	else if(dot<-0.3)
 	{
 		self.angle_ofs_y=-90;
 		if(action>=MEDUSA_HEADBUTT)
@@ -892,31 +888,25 @@ void monster_medusa_green (void)
 	precache_sound2("medusa/pain.wav");
 	precache_sound2("medusa/death.wav");
 	precache_sound2("medusa/stoned.wav");
+	precache_sound2("medusa/hitplayr.wav");
 
-	if(random()<0.5)
-		self.skin=1;
+//	if(random()<0.5)
+//		self.skin=1;
 
 	self.headmodel="models/medhead.mdl";
 	self.solid = SOLID_SLIDEBOX;
 	self.movetype = MOVETYPE_STEP;
 	self.takedamage=DAMAGE_YES;
 	self.thingtype=THINGTYPE_FLESH;
+	self.monsterclass=CLASS_LEADER;
 	self.mintel = 20;//Very smart- excellent tracker
 	self.mass = 15;
 	self.view_ofs = '0 0 53';
 	self.speed=5;
 	self.yaw_speed = 5;
 	self.classname="monster_medusa";
-	if(!self.skin)
-	{
-		self.health = 400;
-		self.experience_value = 250;
-	}
-	else
-	{
-		self.health = 600;
-		self.experience_value = 400;
-	}
+	self.health = 700; 
+	self.experience_value = 500;
 
 	self.th_stand=medusa_stand;
 	self.th_run=medusa_hunt;
@@ -928,7 +918,8 @@ void monster_medusa_green (void)
 
 	setmodel (self, "models/medusa.mdl");
 
-	setsize(self, '-16 -16 0', '16 16 56');
+	setsize(self, '-28 -28 0', '28 28 56');
+	self.hull=HULL_PLAYER;
 
 	walkmonster_start();
 }
@@ -946,7 +937,7 @@ The medusa monster with its nasty sharp 
 */
 void monster_medusa_red (void)
 {
-	self.skin=1;
+//	self.skin=1;
 	monster_medusa_green();
 	self.health = 250; 
 	self.experience_value = 125;
diff -urNp h2-0.42-demo/meteor.hc h2-1.03/meteor.hc
--- h2-0.42-demo/meteor.hc	1997-08-28 02:38:10.000000000 +0300
+++ h2-1.03/meteor.hc	1997-09-04 21:57:40.000000000 +0300
@@ -16,9 +16,6 @@ $base BASE skin
 $skin skin
 $flags 0
 
-// O.S.: what frame was here in original demo???  $idle is 1, not 0.
-$frame UNKNOWN      
-
 //
 $frame idle
 
@@ -33,8 +30,6 @@ $frame fire1     fire2     fire3     fir
 $frame fire6     fire7     fire8     fire9     
 
 
-.float torncount;
-
 void MeteoriteFizzle (void)
 {
 	CreateWhiteSmoke(self.origin,'0 0 8',HX_FRAME_TIME * 2);
@@ -81,7 +76,7 @@ void MeteorTouch (void)
 		T_Damage(other,self,self.owner,self.dmg);
 		if(self.dmg>3)
 		{
-			if(other.flags&FL_CLIENT||other.flags&FL_MONSTER)
+			if((other.flags&FL_CLIENT||other.flags&FL_MONSTER)&&other.mass<200)
 			{
 			vector hitdir;
 				hitdir=self.o_angle*300;
@@ -193,9 +188,9 @@ void() tornato_die = [++24 .. 47]
 
 void() tornato_spin = [++0 .. 23]
 {
-float distance;
+float distance,content;
 
-	if(time>self.lifetime||self.torncount<self.owner.torncount - 2)
+	if(time>self.lifetime||self.torncount<self.owner.torncount - 1)
 	{
 		self.movechain.drawflags(+)MLS_ABSLIGHT|SCALE_ORIGIN_BOTTOM|SCALE_TYPE_XYONLY;
 		self.think=tornato_die;
@@ -208,19 +203,20 @@ float distance;
 //FIXME:  add tracking to movement and firing.
 	if(random()<0.2)
 	{
-		self.velocity_x+=random(200)*self.scale - 100*self.scale;
+		self.velocity_x+=random(-100*self.scale,100*self.scale);
 		if(fabs(self.velocity_x)>1000)
 			self.velocity_x/=2;
 	}
 	
 	if(random()<0.2)
 	{
-		self.velocity_y+=random(200)*self.scale - 100*self.scale;
+		self.velocity_y+=random(-100*self.scale,100*self.scale);
 		if(fabs(self.velocity_y)>1000)
 			self.velocity_y/=2;
 	}
 
-	if(pointcontents(self.origin) != CONTENT_EMPTY)
+	content=pointcontents(self.origin);
+	if(content==CONTENT_WATER||content==CONTENT_LAVA)
 	{
 		self.velocity_z+=random(33,200);
 		particle4(self.origin,random(20),264*15,PARTICLETYPE_GRAV,random()*10);
@@ -241,8 +237,12 @@ float distance;
 	{
 	vector org, dir;
 	float let_go;
+		self.velocity=self.velocity*0.5;
 		org=self.origin;
-		org_z+=random(10)*self.scale+4*self.scale;
+		if(self.enemy.size_z>=self.size_z)
+			org=self.origin;
+		else
+			org_z+=random(10)*self.scale+4*self.scale;
 		if(!self.enemy.flags2&FL_TORNATO_SAFE)
 		{
 			self.enemy.velocity='0 0 0';
@@ -310,7 +310,7 @@ float distance;
 		if(self.goalentity!=world&&visible(self.goalentity)&&self.goalentity.health>0)
 		{
 			float seekspeed;
-				seekspeed = random(33,200);
+				seekspeed = random(150,333);
 				if(self.goalentity.solid==SOLID_BSP&&self.goalentity.origin=='0 0 0')
 					distance=vlen((self.goalentity.absmax+self.goalentity.absmin)*0.5-self.origin);
 				else
@@ -430,6 +430,14 @@ void tornato_merge (void)
 void funnal_touch (void)
 {
 //FIXME:  Ignore the controlling player's projectiles, leaving it in to test
+	if(other.flags&FL_MONSTER&&other.monsterclass>=CLASS_BOSS)
+	{
+		T_Damage(other,self,self.owner,7);
+		traceline((self.absmin+self.absmax)*0.5,(other.absmin+other.absmax)*0.5,FALSE,self);
+		SpawnPuff(trace_endpos,randomv('-1 -1 -1','1 1 1'),5,other);
+		return;
+	}
+
 	if(other==self.controller||other.controller==self.owner||other==world||other==self.owner||other==self.owner||other.classname=="tornato"||(other.classname=="funnal"&&other.aflag)||other.movetype==MOVETYPE_PUSH)
 		return;
 
@@ -499,7 +507,7 @@ void funnal_touch (void)
 		other.velocity_z=random(100,250)*self.scale;
 		other.flags(-)FL_ONGROUND;
 		if(other.takedamage)
-			T_Damage(other,self.owner,self.owner.controller,3*self.scale);
+			T_Damage(other,self.owner,self.owner.controller,5*self.scale);
 		if(other.classname=="player_sheep"&&other.flags2&FL_ALIVE)
 		{
 			sound(other,CHAN_VOICE,"misc/sheepfly.wav",1,ATTN_NORM);
@@ -555,7 +563,7 @@ vector org;
 	self.greenmana-=20;
 	sound(self,CHAN_WEAPON,"crusader/torngo.wav",1,ATTN_NORM);
 	makevectors(self.v_angle);
-	org=self.origin+normalize(v_forward)*32;
+	org=self.origin+normalize(v_forward)*16;
 	org_z=self.origin_z+1;
 		
 	tornato=spawn();
@@ -568,13 +576,14 @@ vector org;
 	tornato.enemy=world;
 	setmodel(tornato,"models/tornato.mdl");
 	setsize(tornato,'-18 -18 -3','18 18 64');
+	tornato.hull=HULL_PLAYER;
 	setorigin(tornato,org);
-	tornato.velocity=normalize(v_forward)*300;
+	tornato.velocity=normalize(v_forward)*250+'0 0 20';
 	tornato.velocity_z=0;
 	tornato.scale=1;
 	if(visible(self.enemy)&&self.enemy.flags2&FL_ALIVE)//Infront too?
 		tornato.goalentity=self.enemy;
-	tornato.lifetime=time + 15;
+	tornato.lifetime=time + 20;
 	tornato.think=tornato_grow;
 	thinktime tornato : 0;
 
@@ -593,6 +602,7 @@ vector org;
 	funnal.lifetime=time+1.7;
 	setmodel(funnal,"models/funnal.mdl");
 	setsize(funnal,'-18 -18 -3','18 18 64');
+	funnal.hull=HULL_PLAYER;
 	setorigin(funnal,org);
 }
 
diff -urNp h2-0.42-demo/mezzoman.hc h2-1.03/mezzoman.hc
--- h2-0.42-demo/mezzoman.hc	1997-08-28 02:38:10.000000000 +0300
+++ h2-1.03/mezzoman.hc	1997-09-04 21:57:40.000000000 +0300
@@ -54,9 +54,6 @@ $frame jump11       jump12       jump13 
 $frame jump16       jump17       jump18       jump19       jump20       
 $frame jump21       jump22       
 
-// O.S.: what frame was here in original demo???  $pain1 is 104, not 103.
-$frame UNKNOWN       
-
 //
 $frame pain1        pain2        pain3        pain4        pain5        
 $frame pain6        pain7        
@@ -194,6 +191,11 @@ void mezzo_roll_forward () [++ $dive1 ..
 	}
 	else
 	{
+		if(self.dflags)
+		{
+			sound(self,CHAN_BODY,"player/land.wav",1,ATTN_NORM);
+			self.dflags=FALSE;
+		}
 		walkmove(self.angles_y,7,FALSE);
 	}
 
@@ -234,12 +236,18 @@ vector newmaxs;
 
 float mezzo_check_duck (entity proj)
 {
-float proj_minz,duck_hite,proj_velz;
-	proj_minz = proj.origin_z - proj.mins_z;
-	duck_hite = self.origin_z + self.maxs_z/2;
-	proj_velz = proj.velocity_z;
+vector proj_mins,duck_hite,proj_dir;
+	proj_mins=proj.origin;
+	proj_mins_z=proj.origin_z - proj.mins_z;
+
+	duck_hite=self.origin;
+	duck_hite_z=self.origin_z + self.maxs_z/2;
+
+	proj_dir=normalize(duck_hite-proj_mins);
 
-	if (proj_minz>duck_hite && proj_velz>=0)
+	traceline(proj_mins,duck_hite+proj_dir*8,FALSE,self);
+
+	if(trace_ent!=self||trace_endpos_z>duck_hite_z)
 		return TRUE;
 	else
 		return FALSE;
@@ -641,10 +649,9 @@ float magnitude;//remainder, reflect_cou
 			}
 			else// if(visible(other.owner))
 			{
-				if(visible(other.owner))
-					dir=normalize(other.owner.origin+other.owner.view_ofs-other.origin);
-				else
-					dir=dir*-1;
+				v_forward=normalize(other.owner.origin+other.owner.view_ofs-other.origin);
+				dir+= 2*v_forward;
+				dir=normalize(dir);
 			}
 //			else
 //				dir=dir*-1;
@@ -663,6 +670,11 @@ float magnitude;//remainder, reflect_cou
 		if(other.o_angle)
 			other.o_angle=dir;
 
+		if(magnitude<other.speed)
+		{
+//			dprintf("Low mag : %s\n",magnitude);
+			magnitude=other.speed;
+		}
 		other.velocity = dir*magnitude;
 		other.angles = vectoangles(other.velocity);
 
@@ -675,7 +687,7 @@ float magnitude;//remainder, reflect_cou
 			other.enemy=other.owner;
 		if(other.goalentity==self.owner)
 			other.goalentity=other.owner;
-		other.owner=other;
+		other.owner=self.owner;
 	}
 }
 
@@ -712,7 +724,7 @@ void spawn_reflect ()
 	else
 	{
 		self.movechain=newmis;
-		setsize (newmis, '-40 -40 -64','40 40 50');
+		setsize (newmis, '-48 -48 -64','48 48 50');
 		setorigin(newmis,self.origin);
 	}
 }
@@ -918,6 +930,17 @@ void mezzo_in_air ()
 	}
 	else 
 	{
+		if(self.velocity=='0 0 0')
+			self.velocity='0 0 -60';
+		self.think=mezzo_in_air;
+		if(vlen(self.velocity)>300)
+		{
+			if(random()<0.5)
+			{
+				self.dflags=TRUE;//in air
+				self.think=mezzo_roll_forward;
+			}
+		}
 		thinktime self : 0.05;
 	}
 }
@@ -1165,8 +1188,8 @@ void mezzo_roar () [++ $roar1 .. $roar30
 		self.monster_awake=TRUE;
 		if(self.health<100)
 		{
-			self.takedamage=DAMAGE_NO;
 			self.th_pain=SUB_Null;
+			self.takedamage=DAMAGE_NO;
 		}
 		sound(self,CHAN_VOICE,"mezzo/roar.wav",1,ATTN_NORM);
 	}
@@ -1194,11 +1217,11 @@ void mezzo_run_think ()
 		thinktime self : 0;
 	}
 */ 
-	if(!self.flags2&FL_ALIVE)
-		dprint("Undead Mezzoman!!!\n");
+//	if(!self.flags2&FL_ALIVE)
+//		dprint("Undead Mezzoman!!!\n");
 	if(!self.takedamage)
 	{
-		dprint("Invincible Mezzoman!!!\n");
+//		dprint("Invincible Mezzoman!!!\n");
 		self.takedamage=DAMAGE_YES;
 	}
 
diff -urNp h2-0.42-demo/MG_AI.hc h2-1.03/MG_AI.hc
--- h2-0.42-demo/MG_AI.hc	1997-08-28 02:38:10.000000000 +0300
+++ h2-1.03/MG_AI.hc	1997-09-04 21:57:40.000000000 +0300
@@ -54,6 +54,9 @@ float base, divider;
 
 	if(targ.drawflags&DRF_TRANSLUCENT)
 	{
+		if(targ.model=="models/assassin.mdl")
+			divider=10;//Bonus for hiding in shadows
+		else
 			divider=3;	//Makes it 3 times harder to see
 	}
 	else
@@ -356,7 +359,7 @@ void MonsterCheckContents ()
 			thinktime newmis : 0;
 		}
 	}
-	if(self.movetype==MOVETYPE_SWIM)
+	if(self.movetype==MOVETYPE_SWIM||self.model=="models/skullwiz.mdl"||self.netname=="golem")
 		return;
 	if(pointcontents(self.origin+self.view_ofs)==CONTENT_WATER)
 	{
@@ -603,6 +606,9 @@ vector destiny,org;
 		traceline (org, destiny,FALSE,self);
 	}
 
+	if(!whole_body&&trace_ent.thingtype>=THINGTYPE_WEBS)
+		traceline (trace_endpos, destiny, FALSE, trace_ent);
+
 	if (trace_ent == targ)
 		return TRUE;
 
@@ -1013,7 +1019,7 @@ float dot, rng, reverse;
 
 /*
 ======================================================
-float check_side_blocked (float walkspeed)
+float navigate (float walkspeed)
 MG
 Checks to see which side of the entity is blocked
 and will move in the opposite direction using
@@ -1026,7 +1032,7 @@ Meant for use with flying and swimming m
 because movetogoal doesn't make them navigate!
 ======================================================
 */
-float check_side_blocked (float walkspeed)
+float navigate (float walkspeed)
 {
 vector checkdir,org,new_angle;
 float vert_size,horz_size;
@@ -1042,7 +1048,8 @@ float vert_size,horz_size;
 		org=self.origin+checkdir*horz_size;
 		traceline(org,org+v_forward*horz_size,FALSE,self);
 	}
-
+	if(self.flags&FL_FLY||self.flags&FL_SWIM)
+	{
 		if(trace_fraction==1&&!trace_allsolid)
 		{
 			checkdir=v_up;
@@ -1055,7 +1062,7 @@ float vert_size,horz_size;
 			org=self.origin+checkdir*vert_size;
 			traceline(org,org+v_forward*horz_size,FALSE,self);
 		}
-
+	}
 	if(trace_fraction<1||trace_allsolid)
 	{
 		if(checkdir==v_right||checkdir==v_right*-1)
@@ -1099,7 +1106,7 @@ the new vec).
 */
 vector extrapolate_pos_for_speed (vector p1,float pspeed,entity targ,float accept) 
 {
-float dist1,dist2,tspeed,dot,eta1,eta2,eta_delta;
+float dist1,dist2,tspeed,dot,eta1,eta2,eta_delta,failed;
 vector p2,p3,targ_dir,vec1,vec2;
 
 //	dprint("Extrapolating\n");
@@ -1119,16 +1126,19 @@ vector p2,p3,targ_dir,vec1,vec2;
 	eta2=dist2/pspeed;					//ETA of projectile to p3
 	eta_delta=eta2-eta1;				//change in ETA's
 
-	p3+=targ_dir*tspeed*eta_delta;//Add any diff in ETA to p3's location
+	p3+=targ_dir*tspeed*eta_delta*random();//Add any diff in ETA to p3's location,random a little in case they slow down
 	
 	traceline(p1,p3,FALSE,self);
-	if(trace_ent != targ)
+	if(trace_fraction<1)
 	{
+		if(trace_ent.thingtype>=THINGTYPE_WEBS)
+			traceline (trace_endpos, p3, FALSE, trace_ent);
+		if(trace_fraction<1)	
 			if(trace_ent.health>25||!trace_ent.takedamage||(trace_ent.flags&FL_MONSTER&&trace_ent.classname!="player_sheep"))
 			{//Don't have a clear shot, and don't want to shoot obstruction
 	//			dprint("No clear shot\n");
 				self.attack_state = AS_SLIDING;
-				return '0 0 0';
+				failed=TRUE;
 			}
 	}
 
@@ -1137,9 +1147,14 @@ vector p2,p3,targ_dir,vec1,vec2;
 	if(dot<accept)						//Change in dir too great
 	{
 //		dprint("Out of range\n");
-		return '0 0 0';
+		failed=TRUE;
 	}
 
+	if(failed)
+		p3='0 0 0';
+//	else
+//		dprint("Successful extrapolation\n");
+			
 /*Was using this to show blue for failed extrap, red for succ.
 	WriteByte (MSG_BROADCAST, SVC_TEMPENTITY);
 	WriteByte (MSG_BROADCAST, TE_STREAM_COLORBEAM);	//beam type
@@ -1156,5 +1171,5 @@ vector p2,p3,targ_dir,vec1,vec2;
 	WriteCoord (MSG_BROADCAST, p3_y);
 	WriteCoord (MSG_BROADCAST, p3_z);		
 */
-	return vec2;
+	return p3;
 }
diff -urNp h2-0.42-demo/misc.hc h2-1.03/misc.hc
--- h2-0.42-demo/misc.hc	1997-08-28 02:38:10.000000000 +0300
+++ h2-1.03/misc.hc	1997-09-03 04:48:56.000000000 +0300
@@ -1016,11 +1016,11 @@ void func_rotating()
 		if(!self.wait)
 			self.wait=3;
 
-	self.noise1 = "doors/hydro1.wav";
-	self.noise2 = "doors/hydro2.wav";
+//	self.noise1 = "doors/hydro1.wav";
+//	self.noise2 = "doors/hydro2.wav";
 
-	precache_sound ("doors/hydro1.wav");
-	precache_sound ("doors/hydro2.wav");
+//	precache_sound ("doors/hydro1.wav");
+//	precache_sound ("doors/hydro2.wav");
 
 	if (self.abslight)
 		self.drawflags(+)MLS_ABSLIGHT;
@@ -1250,6 +1250,7 @@ void() func_angletrigger =
 	if (!self.dmg)
 		self.dmg = 2;
 	
+/*
 	precache_sound ("doors/hydro1.wav");
 	precache_sound ("doors/hydro2.wav");
 	precache_sound ("doors/basetry.wav");
@@ -1258,7 +1259,7 @@ void() func_angletrigger =
 	self.noise1 = "doors/hydro2.wav";
 	self.noise3 = "doors/basetry.wav";
 	self.noise4 = "doors/baseuse.wav";
-
+*/
 	self.blocked = angletrigger_blocked;
 	self.use = angletrigger_use;
 	
diff -urNp h2-0.42-demo/mummy.hc h2-1.03/mummy.hc
--- h2-0.42-demo/mummy.hc	1997-08-28 02:38:10.000000000 +0300
+++ h2-1.03/mummy.hc	1997-09-02 17:41:34.000000000 +0300
@@ -144,18 +144,36 @@ void mummissile_touch (void)
 void mflame1_runup (void) [++ 0 .. 16 ]
 {
 	if (cycle_wrapped)
+		if(self.cnt)
+		{
+			self.cnt-=1;
+			particle2(self.origin+'0 0 17','0 0 25','0 0 25',168,7,5);
+		}
+		else
 			remove(self);
 }
 
 void mflame2_runup (void) [++ 17 .. 33 ]
 {
 	if (cycle_wrapped)
+		if(self.cnt)
+		{
+			self.cnt-=1;
+			particle2(self.origin+'0 0 17','0 0 25','0 0 25',168,7,5);
+		}
+		else
 			remove(self);
 }
 
 void mflame3_runup (void) [++ 34 .. 50 ]
 {
 	if (cycle_wrapped)
+		if(self.cnt)
+		{
+			self.cnt-=1;
+			particle2(self.origin+'0 0 17','0 0 25','0 0 25',168,7,5);
+		}
+		else
 			remove(self);
 }
 
@@ -165,9 +183,14 @@ void mflame_burn(void)
 
 	if ((other.health) && (other != self.owner) && (self.pain_finished<time))
 	{
-		damg = 5 + random() * 5;
+		damg = self.dmg + random() * self.dmg;
 		T_Damage (other, self, self.owner, damg);
 		self.pain_finished = time + .05;
+		if(self.t_width<time)
+		{
+			sound(self,CHAN_BODY,"crusader/sunhit.wav",1,ATTN_NORM);
+			self.t_width=time+0.1;
+		}
 	}
 }
 
@@ -182,6 +205,12 @@ void SpawnMummyFlame(void)
 	if (trace_fraction==1)
 		return;
 
+	if(pointcontents(trace_endpos)==CONTENT_WATER)
+	{
+		remove(self);
+		return;
+	}
+
 	new = spawn();
 
 	CreateEntityNew(new,ENT_MUMMY_FIRE,"models/mumshot.mdl",SUB_Null);
@@ -192,6 +221,7 @@ void SpawnMummyFlame(void)
 	new.drawflags=MLS_ABSLIGHT;
 	new.abslight=0.5;
 	new.angles = self.angles;	
+	new.dmg=3;//was 5, too much!
 
 	chance = random();
 	if (chance < .33)
@@ -206,7 +236,14 @@ void SpawnMummyFlame(void)
 
 	new.touch = mflame_burn;
 
-	if (self.lifetime < time)
+	if(self.classname=="circfire")
+	{
+		new.angles = self.angles +'0 -90 0';	
+		new.scale=2.5;
+		new.cnt=5;
+		particle2(new.origin+'0 0 17','0 0 25','0 0 25',168,7,5);
+	}
+	else if (self.lifetime < time)
 	{
 		remove(self);
 	}
@@ -511,8 +548,8 @@ void mummymissile (void)
 		if (self.frame == $shoota6)
 		{
 			makevectors(self.angles);
-			Create_Missile(self,self.enemy,self.origin + v_forward*14 - v_right * 9 + v_up * 25,
-						"models/akarrow.mdl","green_arrow",0,1000,mummissile_touch);
+			Create_Missile(self,self.origin + v_forward*14 - v_right * 9 + v_up * 25, 
+				self.enemy.origin+self.enemy.view_ofs,"models/akarrow.mdl","green_arrow",0,1000,mummissile_touch);
 		}
 
 		if (self.frame == $shoota12)
@@ -542,8 +579,8 @@ void mummymissile (void)
 		if (self.frame == $shootb6)
 		{
 			makevectors(self.angles);
-			Create_Missile(self,self.enemy,self.origin + v_forward*14 + v_right * 11 + v_up * 40,
-						"models/akarrow.mdl","green_arrow",0,1000,mummissile_touch);
+			Create_Missile(self,self.origin + v_forward*14 + v_right * 11 + v_up * 40, 
+				self.enemy.origin+self.enemy.view_ofs,"models/akarrow.mdl","green_arrow",0,1000,mummissile_touch);
 		}
 
 		if (self.frame == $shootb12)
@@ -1007,7 +1044,7 @@ void monster_mummy_lord (void)
 
 	self.flags = self.flags|FL_MONSTER;
 	self.yaw_speed = 10;
-	self.health = 500;
+	self.health = 400;
 	self.experience_value = 300;
 	walkmonster_start();
 }
diff -urNp h2-0.42-demo/newplay.hc h2-1.03/newplay.hc
--- h2-0.42-demo/newplay.hc	1997-08-28 02:38:10.000000000 +0300
+++ h2-1.03/newplay.hc	1997-09-01 18:36:04.000000000 +0300
@@ -183,9 +183,7 @@ $frame cjump11       cjump12       cjump
 //
 $frame cflystf1      cflystf2      cflystf3      cflystf4      cflystf5      
 $frame cflystf6      cflystf7      cflystf8      cflystf9      cflystf10     
-$frame cflystf11     cflystf12     cflystf13     cflystf14     
-//cflystf15     
-//O.S.: cflystf frames were one less in original demo?  $cpainstf1 is 205, not 206.
+$frame cflystf11     cflystf12     cflystf13     cflystf14     cflystf15     
 
 //
 $frame cpainstf1     cpainstf2     cpainstf3     cpainstf4     cpainstf5     
@@ -234,9 +232,7 @@ $frame atthan6       atthan7       attha
 //
 $frame flyhan1        flyhan2        flyhan3        flyhan4        flyhan5        
 $frame flyhan6        flyhan7        flyhan8        flyhan9        flyhan10       
-$frame flyhan11       flyhan12       flyhan13       flyhan14       
-//flyhan15       
-//O.S.: flyhan frames were one less in original demo?  $painhan1 is 82, not 83.
+$frame flyhan11       flyhan12       flyhan13       flyhan14       flyhan15       
 
 //
 $frame painhan1       painhan2       painhan3       painhan4       painhan5       
@@ -260,9 +256,7 @@ $frame attsic11     attsic12     
 //
 $frame flysic1       flysic2       flysic3       flysic4       flysic5       
 $frame flysic6       flysic7       flysic8       flysic9       flysic10      
-$frame flysic11      flysic12      flysic13      flysic14      
-//flysic15      
-//O.S.: flysic frames were one less in original demo?  $painsic1 is 140, not 142. (also see flyhan above)
+$frame flysic11      flysic12      flysic13      flysic14      flysic15      
 
 //
 $frame painsic1      painsic2      painsic3      painsic4      painsic5      
@@ -285,9 +279,7 @@ $frame nattstf6      nattstf7      natts
 //
 $frame nflystf1       nflystf2       nflystf3       nflystf4       nflystf5       
 $frame nflystf6       nflystf7       nflystf8       nflystf9       nflystf10      
-$frame nflystf11      nflystf12      nflystf13      nflystf14      
-//nflystf15      
-//O.S.: nflystf frames were one less in original demo?  $npainstf is 194, not 197. (also see flyhan and flysic above)
+$frame nflystf11      nflystf12      nflystf13      nflystf14      nflystf15      
 
 //
 $frame npainstf1      npainstf2      npainstf3      npainstf4      npainstf5      
@@ -596,6 +588,9 @@ float weapmod, startframe,endframe,frame
 		weapmod=0;
 
 	startframe = player_start_frames	[(self.playerclass - 1) * 4 + self.act_state*16 + weapmod];
+	if(self.waterlevel<3&&self.movetype==MOVETYPE_FLY)
+		endframe=startframe;
+	else
 		endframe = player_end_frames	[(self.playerclass - 1) * 4 + self.act_state*16 + weapmod];
 
 	if(self.act_state!=ACT_CROUCH_STAND)
@@ -605,6 +600,7 @@ float weapmod, startframe,endframe,frame
 	thinktime self : HX_FRAME_TIME;
 
 	if(self.act_state!=ACT_DEAD)
+		if(self.viewentity==self||self.viewentity.classname=="chasecam")
 			self.th_weapon();
 
 	if(self.act_state==ACT_SWIM_FLY)
@@ -660,34 +656,16 @@ float weapmod, startframe,endframe,frame
 
 	if(self.act_state==ACT_DEAD)
 	{
-		if(self.view_ofs_z - 2.5 >= 6)//Drop view
+		if(self.frame==startframe&&!deathmatch)
+			if(self.enemy.flags2&FL_ALIVE&&visible(self.enemy))
+				self.pausetime=time+3;
+
+		if(self.view_ofs_z - 2.5 >= 8)//Drop view
 			self.view_ofs_z-=2.5;
 
-		if(self.enemy.flags2&FL_ALIVE&&visible(self.enemy))
-		{
-		vector enemy_dir;
-			enemy_dir = normalize(self.enemy.origin + self.enemy.proj_ofs - self.origin + self.view_ofs);
-			enemy_dir = vectoangles(enemy_dir);
-			enemy_dir_x *= -1;
-			enemy_dir = enemy_dir - self.v_angle;
-			if(enemy_dir_x > 10)
-				enemy_dir_x = 10;
-			if(enemy_dir_x < -10)
-				enemy_dir_x = -10;
-			if(enemy_dir_y > 10)
-				enemy_dir_y = 10;
-			if(enemy_dir_y < -10)
-				enemy_dir_y = -10;
-			enemy_dir += self.v_angle;
-			msg_entity = self;
-			WriteByte(MSG_ONE,10);		// 10 = SVC_SETVIEWANGLES
-			WriteAngle(MSG_ONE,enemy_dir_x);
-			WriteAngle(MSG_ONE,enemy_dir_y);
-			WriteAngle(MSG_ONE,self.v_angle_z);
-		}
 		if(framestate==AF_END)
 		{
-			self.view_ofs='0 0 6';
+			self.view_ofs='0 0 8';
 			self.think=PlayerDead;
 			thinktime self : 0;
 		}
diff -urNp h2-0.42-demo/object.hc h2-1.03/object.hc
--- h2-0.42-demo/object.hc	1997-08-28 02:38:10.000000000 +0300
+++ h2-1.03/object.hc	1997-09-04 21:57:40.000000000 +0300
@@ -685,10 +685,10 @@ vector org;
 	}
 	else
 	{
-	    if(self.goalentity.health)
-		newmis.velocity=normalize(self.goalentity.origin-org)*1000;
-	    else
 		newmis.velocity=normalize(self.view_ofs-org)*1000;
+		traceline(org,org+newmis.velocity,FALSE,self);
+		if(trace_ent!=self.goalentity&&self.goalentity.health)
+			newmis.velocity=normalize((self.goalentity.absmin+self.goalentity.absmax)*0.5-org)*1000;
 /*		if(deathmatch)
 		{
 			newmis.think=Missile_Arc;
@@ -1835,6 +1835,7 @@ void obj_playerhead_paladin (void)
 {
 	precache_model("models/h_pal.mdl");
 	CreateEntityNew(self,ENT_PLAYERHEAD,"models/h_pal.mdl",chunk_death);
+	self.use=chunk_death;
 }
 
 /*QUAKED obj_playerhead_assassin (0.3 0.1 0.6) (-8 -8 0) (8 8 16)
@@ -1847,6 +1848,7 @@ void obj_playerhead_assassin (void)
 {
 	precache_model("models/h_ass.mdl");
 	CreateEntityNew(self,ENT_PLAYERHEAD,"models/h_ass.mdl",chunk_death);
+	self.use=chunk_death;
 }
 
 /*QUAKED obj_playerhead_necromancer (0.3 0.1 0.6) (-8 -8 0) (8 8 16)
@@ -1859,6 +1861,7 @@ void obj_playerhead_necromancer (void)
 {
 	precache_model2("models/h_nec.mdl");
 	CreateEntityNew(self,ENT_PLAYERHEAD,"models/h_nec.mdl",chunk_death);
+	self.use=chunk_death;
 }
 
 /*QUAKED obj_playerhead_crusader (0.3 0.1 0.6) (-8 -8 0) (8 8 16)
@@ -1871,6 +1874,7 @@ void obj_playerhead_crusader (void)
 {
 	precache_model2("models/h_cru.mdl");
 	CreateEntityNew(self,ENT_PLAYERHEAD,"models/h_cru.mdl",chunk_death);
+	self.use=chunk_death;
 }
 
 /*QUAKED obj_statue_king (0.3 0.1 0.6) (-30 -30 0) (30 30 120)
diff -urNp h2-0.42-demo/plats.hc h2-1.03/plats.hc
--- h2-0.42-demo/plats.hc	1997-08-28 02:38:10.000000000 +0300
+++ h2-1.03/plats.hc	1997-09-04 21:57:40.000000000 +0300
@@ -477,13 +477,6 @@ void() func_train =
 		
 	if (!self.dmg) self.dmg = 2;
 
-	if (self.soundtype == 0)
-	{
-		self.noise = "misc/null.wav";
-		precache_sound ("misc/null.wav");
-		self.noise1 = "misc/null.wav";
-		precache_sound ("misc/null.wav");
-	}
 	if (self.soundtype == 1)
 	{
 		self.noise = ("plats/train2.wav");
@@ -491,6 +484,11 @@ void() func_train =
 		self.noise1 = ("plats/train1.wav");
 		precache_sound ("plats/train1.wav");
 	}
+	else
+	{
+		self.noise = self.noise1 = "misc/null.wav";
+		precache_sound ("misc/null.wav");
+	}
 
 	if(self.wait==-2)
 	{
diff -urNp h2-0.42-demo/precache.hc h2-1.03/precache.hc
--- h2-0.42-demo/precache.hc	1997-08-28 02:38:10.000000000 +0300
+++ h2-1.03/precache.hc	1997-09-04 21:57:40.000000000 +0300
@@ -16,7 +16,7 @@ void() W_Precache =
 	precache_sound ("weapons/ric3.wav");	// ricochet (used in c code)
 	precache_sound ("weapons/tink1.wav");	// ricochet (used in c code)
 	precache_sound ("weapons/r_exp3.wav");	//Still being used?
-	precache_sound ("items/inv2.wav");		//Quake sounds!
+//	precache_sound ("items/inv2.wav");		//Quake sounds!
 
 	precache_model ("gfx/puff.spr");
 	precache_model ("models/ball.mdl");
@@ -38,12 +38,13 @@ void Precache_lmp (void)
 	precache_file ("gfx/skin100.lmp");
 	precache_file ("gfx/skin101.lmp");
 
-	precache_file ("strings.txt");
+	precache_file ("puzzles.txt");
 	precache_file ("maplist.txt");
 
 	precache_file ("gfx/menu/fontsize.lmp");
 	precache_file ("gfx/menu/backtile.lmp");         
 	precache_file ("gfx/menu/bigfont.lmp");        
+	precache_file ("gfx/menu/bigfont2.lmp");        
 	precache_file ("gfx/menu/conback.lmp");        
 	precache_file ("gfx/menu/conchars.lmp");        
 	precache_file ("gfx/menu/fontsize.lmp");           
@@ -200,7 +201,7 @@ void Precache_lmp (void)
 	precache_file2 ("gfx/rngtrn14.lmp");
 	precache_file2 ("gfx/rngtrn15.lmp");
 	precache_file2 ("gfx/rngtrn16.lmp");
-	precache_file2 ("gfx/rngreg1.lmp");
+/*	precache_file2 ("gfx/rngreg1.lmp");
 	precache_file2 ("gfx/rngreg2.lmp");
 	precache_file2 ("gfx/rngreg3.lmp");
 	precache_file2 ("gfx/rngreg4.lmp");
@@ -215,7 +216,7 @@ void Precache_lmp (void)
 	precache_file2 ("gfx/rngreg13.lmp");
 	precache_file2 ("gfx/rngreg14.lmp");
 	precache_file2 ("gfx/rngreg15.lmp");
-	precache_file2 ("gfx/rngreg16.lmp");
+	precache_file2 ("gfx/rngreg16.lmp");*/
 	precache_file ("gfx/pwrbook1.lmp");
 	precache_file ("gfx/pwrbook2.lmp");
 	precache_file ("gfx/pwrbook3.lmp");
@@ -290,6 +291,10 @@ void Precache_lmp (void)
 	precache_file2 ("gfx/egypt.lmp");
 	precache_file2 ("gfx/roman.lmp");
 
+	precache_file2 ("gfx/end-1.lmp");
+	precache_file2 ("gfx/end-2.lmp");
+	precache_file2 ("gfx/end-3.lmp");
+
 /*
 	precache_file ("");
 	precache_file ("");
@@ -436,6 +441,7 @@ void Precache_lmp (void)
     precache_file2 ("models/boss/shaft.mdl");
     precache_file2 ("models/boss/circle.mdl");
     precache_file2 ("models/boss/star.mdl");
+	precache_sound2 ("famine/flashdie.wav");
 
 	//EIDOLON
 	precache_file2 ("models/boss/smaleido.mdl");
@@ -443,25 +449,22 @@ void Precache_lmp (void)
 	precache_file2 ("models/eidoball.mdl");
 	precache_file2 ("models/eidoflam.spr");
 	precache_file2 ("models/glowball.mdl");
-	precache_file2 ("models/boss/shaft.mdl");
-	precache_file2 ("models/boss/circle.mdl");
-	precache_file2 ("models/boss/star.mdl");
 	precache_file2 ("models/boss/chaosorb.mdl");
-	precache_file2 ("sound/eidolon/roar.wav");
-	precache_file2 ("sound/eidolon/pain.wav");	//Hurt
-	precache_file2 ("sound/eidolon/death.wav");	//Dies- long and agonizing
-	precache_file2 ("sound/eidolon/fakedie.wav");//1st death- fake
-	precache_file2 ("sound/eidolon/spell.wav");	//Spell attack (tracking globes)
-	precache_file2 ("sound/eidolon/stomp.wav");	//Hot-steppin'
-	precache_file2 ("sound/eidolon/fireball.wav");	//Launching Nasty fireballs
-	precache_file2 ("sound/eidolon/flamstrt.wav");	//
-	precache_file2 ("sound/eidolon/flambrth.wav");	//
-	precache_file2 ("sound/eidolon/flamend.wav");	//
-	precache_file2 ("sound/eidolon/growl.wav");		//
-	precache_file2 ("sound/eidolon/chrgstrt.wav"); 	//Orb starts recharging Eido
-	precache_file2 ("sound/eidolon/orbhurt.wav");	//Orb gets hit
-	precache_file2 ("sound/eidolon/orbxpld.wav");	//Orb gets destroyed
-	precache_file2 ("sound/eidolon/orbpulse.wav");	//Orb pulsating
+	precache_sound2 ("eidolon/roar.wav");
+	precache_sound2 ("eidolon/pain.wav");	//Hurt
+	precache_sound2 ("eidolon/death.wav");	//Dies- long and agonizing
+	precache_sound2 ("eidolon/fakedie.wav");//1st death- fake
+	precache_sound2 ("eidolon/spell.wav");	//Spell attack (tracking globes)
+	precache_sound2 ("eidolon/stomp.wav");	//Hot-steppin'
+	precache_sound2 ("eidolon/fireball.wav");	//Launching Nasty fireballs
+	precache_sound2 ("eidolon/flamstrt.wav");	//
+	precache_sound2 ("eidolon/flambrth.wav");	//
+	precache_sound2 ("eidolon/flamend.wav");	//
+	precache_sound2 ("eidolon/growl.wav");		//
+	precache_sound2 ("eidolon/chrgstrt.wav"); 	//Orb starts recharging Eido
+	precache_sound2 ("eidolon/orbhurt.wav");	//Orb gets hit
+	precache_sound2 ("eidolon/orbxpld.wav");	//Orb gets destroyed
+	precache_sound2 ("eidolon/orbpulse.wav");	//Orb pulsating
 
 	//PESTILENCE
 	precache_file2 ("models/boss/boar.mdl");
@@ -469,7 +472,7 @@ void Precache_lmp (void)
 	precache_file2 ("models/boss/hive.mdl");
 	precache_file2 ("models/boss/swarm.mdl");
     precache_file2 ("models/boss/shaft.mdl");
-	precache_file2 ("models/famshot.mdl");
+	precache_file2 ("models/pestshot.mdl");
 	precache_file2 ("sound/pest/snort.wav");
 	precache_file2 ("sound/pest/clop1.wav");
 	precache_file2 ("sound/pest/clop2.wav");
@@ -492,6 +495,7 @@ void Precache_lmp (void)
 	precache_file2 ("models/boss/famhorse.mdl");
 	precache_file2 ("models/boss/famrider.mdl");
 	precache_file2 ("models/famshot.mdl");
+	precache_file2 ("sound/famine/die.wav");
 	precache_file2 ("sound/famine/laugh.wav");
 	precache_file2 ("sound/famine/whinny.wav");
 	precache_file2 ("sound/famine/pull.wav");
@@ -509,6 +513,13 @@ void Precache_lmp (void)
 	precache_file2 ("models/boss/warhorse.mdl");
 	precache_file2 ("models/boss/warrider.mdl");
     precache_file2 ("models/boss/waraxe.mdl");
+	precache_file2 ("sound/war/fire_big.wav");
+	precache_file2 ("sound/war/die.wav");
+	precache_file2 ("sound/war/laugh.wav");
+	precache_file2 ("sound/war/laugh_sm.wav");
+	precache_file2 ("sound/war/fire.wav");
+	precache_file2 ("sound/war/whinny.wav");
+	precache_file2 ("sound/war/whinbig.wav");
 	precache_file2 ("sound/boss/wartrot1.wav");
 	precache_file2 ("sound/boss/wartrot2.wav");
 	precache_file2 ("sound/boss/wartrot3.wav");
@@ -516,12 +527,31 @@ void Precache_lmp (void)
 	// Death Rider
 	precache_file2 ("models/boss/dthhorse.mdl");
 	precache_file2 ("models/boss/dthrider.mdl");
+	precache_file2 ("models/famshot.mdl");
     precache_file2 ("models/boss/bone1.mdl");
     precache_file2 ("models/boss/bone2.mdl");
     precache_file2 ("models/boss/bone3.mdl");
     precache_file2 ("models/boss/bone4.mdl");
     precache_file2 ("models/boss/bone5.mdl");
     precache_file2 ("models/boss/bone6.mdl");
+	precache_file2 ("models/mumshot.mdl");
+	precache_file2 ("models/booberry.mdl");
+	precache_file2 ("sound/mummy/mislfire.wav");
+	precache_file2 ("sound/eidolon/flamend.wav");
+	precache_file2 ("sound/misc/fburn_bg.wav");
+	precache_file2 ("sound/death/fout.wav");
+	precache_file2 ("sound/death/dthdie.wav");
+	precache_file2 ("sound/death/dthfire.wav");
+	precache_file2 ("sound/death/victory.wav");
+	precache_file2 ("sound/death/dthlaugh.wav");
+	precache_file2 ("sound/death/clop.wav");
+	precache_file2 ("sound/death/clop1.wav");
+	precache_file2 ("sound/death/clop2.wav");
+	precache_file2 ("sound/death/clop3.wav");
+	precache_file2 ("sound/death/shot.wav");
+	precache_file2 ("sound/ambience/moan1.wav");
+	precache_file2 ("sound/ambience/moan2.wav");
+	precache_file2 ("sound/ambience/moan3.wav");
 }
 
 
@@ -690,7 +720,7 @@ void Precache_wav (void)
 	precache_sound ("assassin/chntear.wav");	
 	precache_sound ("assassin/chn2flsh.wav");	
 	precache_sound ("assassin/chain.wav");	
-	precache_sound ("assassin/clink.wav");	
+//	precache_sound ("assassin/clink.wav");	
 	precache_sound ("assassin/scarab.wav");	
 	precache_sound ("assassin/scrbfly.wav");	
 	precache_sound ("assassin/spin.wav");	
@@ -795,6 +825,7 @@ void Precache_mdl (void)
 	precache_model("models/flesh1.mdl");
 	precache_model("models/flesh2.mdl");
 	precache_model("models/flesh3.mdl");
+	precache_model("models/brains.mdl");
 	precache_model("models/clshard1.mdl");
 	precache_model("models/clshard2.mdl");
 	precache_model("models/clshard3.mdl");
@@ -813,17 +844,18 @@ void Precache_mdl (void)
 	precache_model("models/a_telprt.mdl");
 	precache_model("models/a_tome.mdl");
 	precache_model("models/a_summon.mdl");
-	precache_model("models/a_mine.mdl");
+//	precache_model("models/a_mine.mdl");
 	precache_model("models/a_glyph.mdl");
 	precache_model("models/a_haste.mdl");
 	precache_model("models/a_poly.mdl");
-	precache_model("models/a_mirror.mdl");
+//	precache_model("models/a_mirror.mdl");
 	precache_model("models/a_cube.mdl");
 	precache_model("models/a_invinc.mdl");
-	precache_model("models/a_growth.mdl");
-	precache_model("models/a_xray.mdl");
+//	precache_model("models/a_growth.mdl");
+//	precache_model("models/a_xray.mdl");
 	precache_model("models/a_invis.mdl");
 	precache_model("models/cube.mdl");
+	precache_model("models/ringft.mdl");
 
 	//Lambinator
 	precache_model("models/sheep.mdl");
@@ -1040,3 +1072,35 @@ void Precache_spr (void)
 	precache_model2("models/rcloud.spr");
 }
 
+void precache_archer()
+{
+	precache_model("models/archer.mdl");
+	precache_model("models/archerhd.mdl");
+
+	precache_model("models/gspark.spr");
+
+	precache_sound ("archer/arrowg.wav");
+	precache_sound ("archer/arrowr.wav");
+
+	precache_sound ("archer/growl.wav");
+	precache_sound ("archer/pain.wav");
+	precache_sound ("archer/sight.wav");
+	precache_sound ("archer/death.wav");
+	precache_sound ("archer/draw.wav");
+}
+
+void precache_spider ()
+{
+	precache_model("models/spider.mdl");
+	precache_model("models/sflesh1.mdl");
+	precache_model("models/sflesh2.mdl");
+	precache_model("models/sflesh3.mdl");
+
+	precache_sound("spider/bite.wav");
+	precache_sound("spider/pain.wav");
+	precache_sound("spider/death.wav");
+	precache_sound("spider/step1.wav");
+	precache_sound("spider/step2.wav");
+	precache_sound("spider/step3.wav");
+}
+
diff -urNp h2-0.42-demo/progs.src h2-1.03/progs.src
--- h2-0.42-demo/progs.src	1997-08-28 02:38:10.000000000 +0300
+++ h2-1.03/progs.src	1997-08-29 16:49:38.000000000 +0300
@@ -108,6 +108,7 @@ snake.hc
 
 fireball.hc		// Imp stuff
 shardice.hc
+mummy.hc
 imp.hc
 spider.hc
 scorpion.hc
@@ -116,7 +117,6 @@ skullwiz.hc
 medusa.hc
 mezzoman.hc
 archer.hc
-mummy.hc
 spit.hc			// Hydra stuff
 hydra.hc
 faspell.hc      // Fallen angel stuff
diff -urNp h2-0.42-demo/proto.hc h2-1.03/proto.hc
--- h2-0.42-demo/proto.hc	1997-08-28 02:38:10.000000000 +0300
+++ h2-1.03/proto.hc	1997-09-04 21:57:36.000000000 +0300
@@ -58,6 +58,12 @@ float()CheckJump;
 void()W_SetCurrentWeapon;
 void(float explodetype)BecomeExplosion; 
 void()player_frames;
-void Create_Missile (entity spawner,entity victim,vector spot,string missilemodel, 
+void Create_Missile (entity spawner,vector spot1,vector spot2,string missilemodel, 
 	string missilename,float missileskin,float missilespeed,void() touchfunct);
+void() corpseblink;
+void(vector org, vector vel, float damage,entity victim)SpawnPuff;
+void spawn_ghost (entity attacker);
+void precache_archer();
+void precache_spider();
+void(entity targ) get_visibility;
 
diff -urNp h2-0.42-demo/punchdgr.hc h2-1.03/punchdgr.hc
--- h2-0.42-demo/punchdgr.hc	1997-08-28 02:38:10.000000000 +0300
+++ h2-1.03/punchdgr.hc	1997-09-04 21:57:40.000000000 +0300
@@ -225,7 +225,7 @@ float r2;
 
 void Ass_Pdgr_Fire (void)
 {
-	self.attack_finished = time + .7;  // Attack every .7 seconds
+	self.attack_finished = time + .5;  // Attack every .7 seconds
 //	r2 = rint(random(1,4));
 	if (r2==1)
 		punchdagger_a();
diff -urNp h2-0.42-demo/quake.hc h2-1.03/quake.hc
--- h2-0.42-demo/quake.hc	1997-08-28 02:38:10.000000000 +0300
+++ h2-1.03/quake.hc	1997-08-31 14:13:48.000000000 +0300
@@ -14,6 +14,7 @@ float inertia;
 float richter;
 float dist;
 float rand,boost;
+vector dir;
 
 	head = findradius(self.origin, self.mass);
 	richter=self.mass/100*(self.lifetime-time)/3;
@@ -21,7 +22,7 @@ float rand,boost;
 //FIXME:  Add particle dust
 	while (head)
 	{
-		if ((head.movetype==MOVETYPE_STEP||head.movetype==MOVETYPE_WALK||head.movetype==MOVETYPE_PUSHPULL)&&head.solid!=SOLID_BSP&&head.mass<500 && head != self.owner && ((head.classname != "monster_golem_bronze") &&(head.classname != "monster_golem_iron") && (head.classname != "monster_golem_stone")))
+		if ((head.movetype==MOVETYPE_STEP||head.movetype==MOVETYPE_WALK||head.movetype==MOVETYPE_PUSHPULL)&&head.solid!=SOLID_BSP&&head.mass<500 && head != self.owner && ((head.classname != "monster_golem_bronze") &&(head.classname != "monster_golem_iron") && (head.classname != "monster_golem_stone")&& (head.classname != "monster_golem_crystal")))
 		{	
 //			bprint(head.classname);
 			dist=vlen(self.origin-head.origin)/self.mass;
@@ -73,10 +74,18 @@ float rand,boost;
 						boost=100;
 					head.velocity_z+=boost;
 				}
-
-				head.velocity_y+= (random()*50 - 25)/inertia*richter*dist;
-				head.velocity_x+= (random()*50 - 25)/inertia*richter*dist;
-				head.flags(-)FL_ONGROUND;
+				if(self.owner.classname=="monster_golem_bronze")
+				{//Make Bronze G make you drift towards him
+					dir=normalize(self.owner.origin-head.origin);
+					dir_z=0;
+					head.velocity=head.velocity+dir*((random()*50 - 25)/inertia*richter*dist);
+				}
+				else
+				{
+					head.velocity_y+= (random()*50 - 25)/inertia*richter*dist;
+					head.velocity_x+= (random()*50 - 25)/inertia*richter*dist;
+					head.flags(-)FL_ONGROUND;
+				}
 			}
 			if(self.lifetime<time+0.2)
 			{
diff -urNp h2-0.42-demo/ravenai.hc h2-1.03/ravenai.hc
--- h2-0.42-demo/ravenai.hc	1997-08-28 02:38:10.000000000 +0300
+++ h2-1.03/ravenai.hc	1997-09-03 22:39:00.000000000 +0300
@@ -50,8 +50,13 @@ float(float AttackType, float ChanceModi
 
 	traceline (spot1, spot2, FALSE, self);
 
+	if(trace_ent.thingtype>=THINGTYPE_WEBS)
+		traceline (trace_endpos, spot2, FALSE, trace_ent);
+
 	if (trace_ent != targ)
+		if(trace_ent.health>25||!trace_ent.takedamage||(trace_ent.flags&FL_MONSTER&&trace_ent.classname!="player_sheep"))
 			return MA_BLOCKED;		// don't have a clear shot
+			
 	if (trace_inopen && trace_inwater)
 		return MA_CROSSED;			// sight line crossed contents
 
diff -urNp h2-0.42-demo/raven.hc h2-1.03/raven.hc
--- h2-0.42-demo/raven.hc	1997-08-28 02:38:10.000000000 +0300
+++ h2-1.03/raven.hc	1997-09-01 07:18:48.000000000 +0300
@@ -587,7 +587,7 @@ void() monster_raven =
 		precache_model2 ("models/raven.mdl");
 		precache_model2 ("models/fether.mdl");
 		precache_sound2 ("raven/squawk.wav");
-		precache_sound2 ("raven/nevermor.wav");
+//		precache_sound2 ("raven/nevermor.wav");
 	}
 	self.solid = SOLID_SLIDEBOX;
 	self.takedamage=DAMAGE_YES;
diff -urNp h2-0.42-demo/ravenstf.hc h2-1.03/ravenstf.hc
--- h2-0.42-demo/ravenstf.hc	1997-08-28 02:38:10.000000000 +0300
+++ h2-1.03/ravenstf.hc	1997-09-04 21:57:40.000000000 +0300
@@ -52,6 +52,8 @@ void raven_spark (void)
 
 void raven_death_init (void)
 {
+	self.owner.raven_cnt -= 1;
+
 	traceline(self.origin,self.origin + '0 0 600',FALSE,self);
 	if (trace_fraction < 1)
 	{
@@ -86,7 +88,7 @@ void raven_bounce(void)
 	self.nextthink = time + HX_FRAME_TIME;
 
 	self.think1 = raven_track_init;
-	self.next_action = time + HX_FRAME_TIME * random(4,7);
+	self.next_action = time + HX_FRAME_TIME * random(2,4);
 
 	self.touch = raven_touch;
 }
@@ -96,15 +98,18 @@ void raven_touch (void)
 {
 	if ((other == self.enemy) && (other.takedamage != DAMAGE_NO))
 	{
-		T_Damage(other,self,self.owner,40);
+		if (other.monsterclass >= CLASS_BOSS)	// Bosses only take half damage
+			T_Damage(other,self,self.owner,10);
+		else
+			T_Damage(other,self,self.owner,20);
 
-		self.damage_max += 40;
+		self.damage_max += 20;
 		SpawnPuff (self.origin, '0 0 -5', random(5,10),other);
 		MeatChunks (self.origin,self.velocity*0.5+'0 0 20', 2);
 		sound(self,CHAN_WEAPON,"weapons/gauntht1.wav",1,ATTN_NORM);
 	}
 
-	if (self.damage_max > 400)
+	if (self.damage_max > 200)
 		raven_death_init();
 	else
 	{
@@ -113,7 +118,7 @@ void raven_touch (void)
 		self.nextthink = time + .05;  // Need to wait a little before flipping model to match velocity
 	}
 
-	if (self.lifetime < time)
+	if ((self.lifetime < time) || (self.owner.raven_cnt > 6))
 	{
 		raven_death_init();
 		return;
@@ -130,10 +135,14 @@ void raven_search(void)
 
 	victim = findradius( self.origin,1000);
 	while(victim)
-	{
-		if (((victim.flags & FL_MONSTER) && 
-			(victim.owner != self)) && (victim.health>0))
+	{	// the controller check is for the summoned imp
+		if (((victim.flags & FL_MONSTER) || (victim.flags & FL_CLIENT)) && 
+			(victim.owner != self) && (victim.controller != self.owner) && (victim.health>0) && (victim!=self.owner))
 		{
+			if (coop && self.enemy.team == self.team) 
+				victim = victim;		// Do nothing if its a player on your team.
+			else
+			{
 				traceline(self.origin,victim.origin,TRUE,self);
 				if (trace_fraction == 1.0)  
 				{
@@ -144,6 +153,7 @@ void raven_search(void)
 					self.searchtime = 0;
 					return;
 				}
+			}
 		}
 		victim = victim.chain;
 	}
@@ -164,7 +174,7 @@ void raven_search(void)
 		
 	}
 
-	if ((self.searchtime < time) || (self.lifetime < time))
+	if ((self.searchtime < time) || (self.lifetime < time) || (self.owner.raven_cnt > 6))
 		raven_death_init();
 }
 
@@ -207,7 +217,7 @@ void raven_track (void)
 			raven_search();
 	}
 
-	if (self.lifetime < time)
+	if ((self.lifetime < time) || (self.owner.raven_cnt > 6))
 	{
 		raven_death_init();
 		return;
@@ -263,7 +273,7 @@ void raven_flap(void)
 		self.nextthink = time + HX_FRAME_TIME;
 	}
 
-	if (self.lifetime < time)
+	if ((self.lifetime < time) || (self.owner.raven_cnt > 6))
 	{
 		raven_death_init();
 		return;
@@ -274,14 +284,16 @@ void raven_flap(void)
 /*--------------------
 Create one raven
 ----------------------*/
-void create_raven(vector dir_mod,float roll)
+void create_raven(void)
 {
 	entity missile;
 	vector spot1, spot2;
 
 	missile = spawn ();
 	missile.frags=TRUE;
-	missile.owner = self;
+	missile.owner = self.owner;
+
+	self.owner.raven_cnt += 1;
 
 	missile.movetype = MOVETYPE_BOUNCEMISSILE;
 	missile.solid = SOLID_BBOX;
@@ -298,7 +310,7 @@ void create_raven(vector dir_mod,float r
 	setmodel (missile, "models/ravproj.mdl");
 	setsize (missile, '-8 -8 8', '8 8 8');
 
-	setorigin (missile, self.origin + self.proj_ofs + v_forward * 14);
+	setorigin (missile, self.origin + self.proj_ofs - v_forward * 14 + v_right * random(-8,8));
 		
 	missile.touch = raven_touch;
 	missile.lifetime = time + 5;
@@ -333,9 +345,9 @@ void create_raven(vector dir_mod,float r
 
 void ravenmissile_explode (void)
 {
-	create_raven('0 0 0', 0);
-	create_raven('0 0 5', 0);
-	create_raven('0 0 10',0);
+	create_raven();
+	create_raven();
+	create_raven();
 
 	CreateWhiteSmoke(self.origin + '0 0  0','0 0 8',HX_FRAME_TIME * 3);
 	CreateWhiteSmoke(self.origin + '0 0  5','0 0 8',HX_FRAME_TIME * 3);
@@ -358,7 +370,7 @@ void ravenmissile_touch (void)
 		sound (self, CHAN_WEAPON, "weapons/explode.wav", 1, ATTN_NORM);
 		starteffect(CE_SM_EXPLOSION , self.origin);
 		self.enemy = other;
-		T_Damage(other,self,self,30);
+		T_Damage(other,self,self,10);
 	}
 	ravenmissile_explode();
 }
@@ -420,7 +432,7 @@ void ravenshot_touch (void)
 		return;
 	}
 
-	T_Damage (other, self, self.owner, 50 );
+	T_Damage (other, self, self.owner, 30 );
 
 	sound (self, CHAN_WEAPON, "weapons/explode.wav", 1, ATTN_NORM);
 
@@ -596,8 +608,8 @@ void ravenstaff_power (void)
 	{
 		self.punchangle_x = -4;
 		launch_superraven();
-		self.greenmana -= 8;
-		self.bluemana -= 8;
+		self.greenmana -= 16;
+		self.bluemana -= 16;
 	}
 	else if(self.weaponframe == $fire4)
 	{
@@ -617,8 +629,8 @@ void ravenstaff_normal (void)
 	{
 		self.punchangle_x = -2;
 		launch_set('0 0 0');
-		self.greenmana -= 2;
-		self.bluemana -= 2;
+		self.greenmana -= 8;
+		self.bluemana -= 8;
 	}
 
 	else if(self.wfs==WF_CYCLE_WRAPPED)
@@ -637,13 +649,13 @@ void ravenstaff_fire (void)
 	vector holdvelocity;
 
 	if ((self.artifact_active & ART_TOMEOFPOWER) &&
-		(self.greenmana >= 8) && (self.bluemana >= 8))
+		(self.greenmana >= 16) && (self.bluemana >= 16))
 	{
 		sound (self, CHAN_WEAPON, "raven/rfire2.wav", 1, ATTN_NORM);
 		stuffcmd (self, "bf\n");
 		ravenstaff_power();
 	}
-	else if ((self.greenmana >= 2) && (self.bluemana >= 2))
+	else if ((self.greenmana >= 8) && (self.bluemana >= 8))
 	{
 		stuffcmd (self, "bf\n");
 		makevectors(self.v_angle);
diff -urNp h2-0.42-demo/rings.hc h2-1.03/rings.hc
--- h2-0.42-demo/rings.hc	1997-08-28 02:38:10.000000000 +0300
+++ h2-1.03/rings.hc	1997-09-04 21:57:40.000000000 +0300
@@ -26,9 +26,8 @@ void ring_touch (void)
 	}
 	else
 	{
-		sprint (other, STR_THE);
+		sprint (other, STR_YOUHAVEACQUIRED);
 		sprint (other, self.netname);
-		sprint (other, STR_ISYOURS);
 	}
 
 	sprint (other,"\n");
@@ -52,6 +51,13 @@ void ring_touch (void)
 	}
 	else if (self.classname == "Ring_Flight") 
 	{
+		if(other.rings_active&RING_FLIGHT)//add time to current ring
+		{
+			other.ring_flight = 100;
+			other.ring_flight_time = time + 1;
+		}
+		else
+		{
 			other.rings(+)RING_FLIGHT;
 			other.ring_flight = 100;
 			other.ring_flight_time = time + 1;
@@ -60,8 +66,7 @@ void ring_touch (void)
 			player_fly();
 			self = holdself;
 			other.rings_active (+) RING_FLIGHT;
-
-	    if (other.rings_low & RING_FLIGHT)
+		}
 		other.rings_low (-) RING_FLIGHT;
 	}
 	else if (self.classname == "Ring_WaterBreathing")
diff -urNp h2-0.42-demo/scorpion.hc h2-1.03/scorpion.hc
--- h2-0.42-demo/scorpion.hc	1997-08-28 02:38:10.000000000 +0300
+++ h2-1.03/scorpion.hc	1997-08-31 14:13:48.000000000 +0300
@@ -633,7 +633,7 @@ void ScorpionMelee4(void) [++ $scatta1..
 //
 //==========================================================================
 
-void ScorpionStrafeDefense(void) [++ $scwalk1..$scwalk16]
+void ScorpionStrafeDefense(void) [++ $scwalk1..$scwalk8]
 {
 	float ofs;
 
@@ -682,7 +682,7 @@ float ScorpionCheckDefense()
 
 	if(r==RANGE_NEAR)
 	{
-		if (random() < 0.33)
+		if (random() < 0.2) 
 			return 1;
 	}
 	return 0;
@@ -730,7 +730,7 @@ void ScorpionDie(void)
 	}
 
 
-	if(self.health < -40)
+	if(self.health < -30)
 	{
 		chunk_death();
 	}
diff -urNp h2-0.42-demo/setstaff.hc h2-1.03/setstaff.hc
--- h2-0.42-demo/setstaff.hc	1997-08-28 02:38:10.000000000 +0300
+++ h2-1.03/setstaff.hc	1997-09-04 21:57:40.000000000 +0300
@@ -27,9 +27,6 @@ $frame build11      build12      build13
 $frame chain1       chain2       chain3       chain4       chain5       
 $frame chain6       chain7       chain8       chain9       
 
-// O.S.: what frame was here in original demo???  $rootpose is 25, not 24.
-$frame UNKNOWN      
-
 //
 $frame rootpose     
 
@@ -77,21 +74,23 @@ void() DeactivateGhook =
 
 void PullBack (void)
 {
-	self.netname = "go away!";
 	if(self.enemy!=world)
 	{
 		self.enemy.flags2(-)FL_CHAINED;
 		if(self.enemy.flags2&FL_ALIVE)
 		{
-		     if(self.enemy.classname!="player")
+			dprintf("Restoring old movetype: %s\n",self.enemy.oldmovetype);
 			self.enemy.movetype=self.enemy.oldmovetype;
 		}
 		else
 		{
+			dprint("Setting movetype to bounce\n");
 			self.enemy.movetype=MOVETYPE_BOUNCE;
 		}
 		self.enemy=world;
 	}
+	else
+		dprint("No enemy\n");
 
 	self.movetype=MOVETYPE_NOCLIP;
 	self.solid=SOLID_NOT;
@@ -109,7 +108,7 @@ void() Yank =
 {	
 float dist;
 vector dir;
-		if(!self.enemy.health||!self.enemy.flags2&FL_ALIVE||!self.enemy.flags2&FL_CHAINED)
+		if(!self.enemy.health||!self.enemy.flags2&FL_ALIVE||!self.enemy.flags2&FL_CHAINED||self.attack_finished<time)
 		{
 			self.lifetime=time+2;
 			self.think=PullBack;
@@ -126,6 +125,7 @@ vector dir;
         if(random()<0.2&&random()<0.2)
         {
 	        SpawnPuff (self.origin, self.velocity, 10,self.enemy);
+	        if(random()<0.1)
 				sound(self.enemy,CHAN_BODY,"assassin/chntear.wav",1,ATTN_NORM);
         }
 
@@ -164,14 +164,17 @@ vector dir;
 			if(self.enemy.flags&FL_ONGROUND)
 	        {
 			    self.enemy.flags(-)FL_ONGROUND;
-			    self.enemy.velocity_z = 100;
+				dir+='0 0 200';
 			}
-			self.enemy.velocity = (self.enemy.velocity+dir)*0.5;
+			if(self.enemy.flags&FL_CLIENT)
+				self.enemy.adjust_velocity=(self.enemy.velocity+dir)*0.5;
+			else
+				self.enemy.velocity = (self.enemy.velocity+dir)*0.5;
 		}
 		else 
 			self.enemy.velocity='0 0 0';
 
-		if(!self.enemy.health||!self.enemy.flags2&FL_ALIVE||!self.enemy.flags2&FL_CHAINED)
+		if(!self.enemy.health||!self.enemy.flags2&FL_ALIVE||!self.enemy.flags2&FL_CHAINED||self.attack_finished<time)
 		{
 			self.lifetime=time+2;
 			self.think=PullBack;
@@ -182,36 +185,45 @@ vector dir;
 			self.think=Yank;
 			thinktime self : 0.05;
 		}
-		if(self.attack_finished<time)
-			remove(self);
+//		if(self.attack_finished<time)
+//			remove(self);
 };
 
 void(entity bound) Grab=
 {
         sound(self, CHAN_AUTO, "assassin/chn2flsh.wav", 1, ATTN_NORM);
-        T_Damage (other, self, self.owner, 3);
-        SpawnPuff (self.origin, self.velocity, 10,other);
 		self.wait=time+0.3;
+        SpawnPuff (self.origin, self.velocity, 10,bound);
         self.velocity = '0 0 0';
         self.avelocity = '0 0 0';
 		self.movedir=normalize(self.origin-self.view_ofs);
 		setorigin(self,(bound.absmin+bound.absmax)*0.5+self.movedir*-10);
 		self.movedir=normalize(self.origin-self.view_ofs);
 
-        self.enemy.flags2 (+) FL_CHAINED;
         self.enemy=bound;
-		if(bound.classname!="player")
+		if(!bound.flags2&FL_CHAINED)
 		{
+			if(other.flags&FL_CLIENT)
+			{
+				if(bound.rings&RING_FLIGHT)
+					bound.oldmovetype=MOVETYPE_FLY;
+				else
+					bound.oldmovetype=MOVETYPE_WALK;
+			}
+			else
 				bound.oldmovetype=bound.movetype;
 			bound.movetype=MOVETYPE_FLY;
 		}
 
+		bound.flags2(+)FL_CHAINED;
 		self.o_angle=bound.v_angle;
 		self.health=bound.health;
 
 		self.attack_finished=time+10;
         self.think=Yank;
         thinktime self : 0;
+
+		T_Damage (bound, self, self.owner, 3);
 };
 
 void() HookHit =
@@ -334,7 +346,7 @@ void scarab_die ()
 {
 	if(self.lockentity.takedamage)
 	{
-		self.dmg=50;
+		self.dmg=75;
 		T_Damage(self.lockentity,self,self.owner,self.dmg);
 	}
 	if(self.movechain!=world);
@@ -346,7 +358,7 @@ void LatchOn (void)
 {
 	if(other.takedamage&&other.movetype&&other.health&&other.solid!=SOLID_BSP&&other.flags2&FL_ALIVE&&!other.artifact_active&ART_INVINCIBILITY)
 	{
-		if(other.health>100)
+		if(other.health>150||(other.flags&FL_MONSTER&&other.monsterclass>=CLASS_BOSS))//other.classname!="player")
 		{
 			self.lockentity=other;
 			scarab_die();
@@ -400,7 +412,7 @@ void TheOldBallAndChain (void)
 	newmis.drawflags=MLS_ABSLIGHT;
 	newmis.th_die=scarab_die;
 	newmis.frags=TRUE;
-	newmis.dmg=100;
+	newmis.dmg=150;
 	newmis.abslight=0.5;
 	newmis.scale=2.5;
 
@@ -505,7 +517,9 @@ void Drilla (float power_value)
 	newmis.solid=SOLID_PHASE;
 	newmis.thingtype=1;
 	newmis.touch=pincer_touch;
-	newmis.dmg=power_value*10 + 20;
+	newmis.dmg=power_value*17;
+	if(newmis.dmg<33)
+		newmis.dmg=33;
 	newmis.th_die=DarkExplosion;
 
 	newmis.drawflags=MLS_ABSLIGHT;
diff -urNp h2-0.42-demo/shardice.hc h2-1.03/shardice.hc
--- h2-0.42-demo/shardice.hc	1997-08-28 02:38:10.000000000 +0300
+++ h2-1.03/shardice.hc	1997-09-04 21:57:40.000000000 +0300
@@ -31,7 +31,7 @@ float	damg;
 	}
 
 	if(self.owner.classname=="monster_imp_lord")
-		damg = random(15,30);
+		damg = random(33,77);
 	else
 		damg = random(5,10);
 	
diff -urNp h2-0.42-demo/sheep.hc h2-1.03/sheep.hc
--- h2-0.42-demo/sheep.hc	1997-08-28 02:38:10.000000000 +0300
+++ h2-1.03/sheep.hc	1997-09-04 21:57:40.000000000 +0300
@@ -636,7 +636,7 @@ void Polymorph (entity loser)
 		newmis.oldskin=loser.skin;
 		newmis.max_health=loser.health;
 		if(!loser.enemy)
-			newmis.enemy=self;
+			newmis.enemy=self.owner;
 		else
 			newmis.enemy=loser.enemy;
 		newmis.goalentity=newmis.enemy;
@@ -651,12 +651,12 @@ void Polymorph (entity loser)
 
 void poly_touch ()
 {
-	if(other.classname=="monster_eidolon" && other!=self.owner)
+	if(other.monsterclass >= CLASS_BOSS&&other!=self.owner)
 	{
 		self.velocity=normalize((self.owner.absmin+self.owner.absmax)*0.5-self.origin)*700;
 		self.owner=other;
 	}
-	if(other.flags2&FL_ALIVE&&other.model!="models/sheep.mdl"&&other.classname!="monster_golem_crystal")
+	else if(other.flags2&FL_ALIVE&&other.model!="models/sheep.mdl"&&other.classname!="monster_golem_crystal")
 	{
 		self.touch=SUB_Null;
 		Polymorph(other);
diff -urNp h2-0.42-demo/sickle.hc h2-1.03/sickle.hc
--- h2-0.42-demo/sickle.hc	1997-08-28 02:38:10.000000000 +0300
+++ h2-1.03/sickle.hc	1997-09-04 21:57:40.000000000 +0300
@@ -81,13 +81,15 @@ void sickle_fire ()
 //			WriteByte (MSG_ONE, SVC_SET_VIEW_TINT);
 //			WriteByte (MSG_ONE, 168);
 
-			chance = self.level * 0.05;
-			if (chance > random())
+			chance = (self.level - 5) * .04;
+			if (chance > .20)
+				chance = .2;
+
+			if (random() < chance)
 			{
-				point_chance = self.level;
-				point_chance *= random();
-				if (point_chance < 1)
-					point_chance = 1;
+				point_chance = (self.level - 5) * 2;
+				if (point_chance > 10)
+					point_chance = 10;
 
 				sound (self, CHAN_BODY, "weapons/drain.wav", 1, ATTN_NORM);
 
diff -urNp h2-0.42-demo/skullwiz.hc h2-1.03/skullwiz.hc
--- h2-0.42-demo/skullwiz.hc	1997-08-28 02:38:10.000000000 +0300
+++ h2-1.03/skullwiz.hc	1997-09-04 21:57:40.000000000 +0300
@@ -86,6 +86,16 @@ void skullwiz_missile_init (void);
 float SKULLBOOK  =0;
 float SKULLHEAD  =1;
 
+float() SkullFacingIdeal =
+{
+	local	float	delta;
+	
+	delta = anglemod(self.angles_y - self.ideal_yaw);
+	if (delta > 25 && delta < 335)
+		return FALSE;
+	return TRUE;
+};
+
 void phase_init (void)
 {
 	vector spot1,newangle;
@@ -390,30 +400,17 @@ void skullwiz_summon(void)
 
 void skullwiz_summoninit (void) [++ $skgate1..$skgate30]
 {
-entity spider, spider2;
+
 	if (self.frame == $skgate2)   // Gate in the creatures
 		sound (self, CHAN_VOICE, "skullwiz/gatespk.wav", 1, ATTN_NORM);
 
 	if (self.frame == $skgate21)   // Gate in the creatures
 	{
-		spider = spawn ();
-		spider.cnt = 0;
-		spider.nextthink = time + 0.01;
-		spider.think = skullwiz_summon;
-		spider.controller = self;
-		spider.angles = self.angles;
-		setorigin(spider,self.origin);
-		spider.owner = self;
+		spider_spawn(0);
 
 		if (random() < 0.15)   // 15% chance he'll do another
 		{
-			spider2 = spawn ();
-			spider2.cnt = 1.00000;
-			spider2.nextthink = time + 0.1;
-			spider2.think = skullwiz_summon;
-			spider2.angles = self.angles;
-			spider2.owner = self;
-			setorigin(spider2,self.origin);
+			spider_spawn(1);
 		}
 	}
 
@@ -609,8 +606,8 @@ void skullwiz_missile (void) [++ $skspel
 	vector delta,spot1,spot2;
 
 	delta = self.enemy.origin - self.origin;
-	if (vlen(delta) < 50)  // Too close to shoot with a missile
-		skullwiz_melee();
+//f (vlen(delta) < 50)  // Too close to shoot with a missile
+//skullwiz_melee();
 
 	if (self.frame == $skspel20)
 	{
@@ -624,8 +621,13 @@ void skullwiz_missile (void) [++ $skspel
 		traceline (spot1, spot2, FALSE, self);
 		if (trace_ent == self.enemy)
 		{
+			if (SkullFacingIdeal())
+			{
 				sound (self, CHAN_WEAPON, "skullwiz/firemisl.wav", 1, ATTN_NORM);
 				launch_skullshot();
+			}
+			else
+				self.frame-=1;
 		}
 	}
 
@@ -639,8 +641,8 @@ void skullwiz_missile (void) [++ $skspel
 		else
 			skullwiz_transition();
 	}
-	else
-		ai_face();
+//	else
+//		ai_face();
 
 }
 
@@ -724,7 +726,7 @@ float loop_cnt,forward,dot;
 		else
 			spot1 = self.origin;
 
-		forward = random(120,220);
+		forward = random(120,200);
 		spot2 = spot1 + (v_forward * forward);
 		traceline (spot1, spot2 + (v_forward * 30) , FALSE, self.enemy);
 		if (trace_fraction == 1.0) //  Check no one is standing where monster wants to be
@@ -855,12 +857,12 @@ void skullwiz_push ()
 	local vector	delta;
 	local float 	ldmg;
 
-	if (!self.enemy)
+	if (self.enemy.classname != "player")
 		return;
 
 	delta = self.enemy.origin - self.origin;
-	if (vlen(delta) > 80)
-		return;
+//if (vlen(delta) > 80)
+//		return;
 
 	self.last_attack=time;
 	ldmg = random(10);
@@ -1006,7 +1008,6 @@ void skullwizard_init(void)
 		precache_model("models/skulbook.mdl");
 		precache_model("models/skulhead.mdl");
 		precache_model("models/skulshot.mdl");
-		precache_model("models/spider.mdl");
 
 		if (self.classname == "monster_skull_wizard")
 		{
@@ -1033,10 +1034,12 @@ void skullwizard_init(void)
 		precache_sound("skullwiz/push.wav");
 		precache_sound("skullwiz/firemisl.wav");
 
-		precache_sound("spider/scuttle.wav");
-		precache_sound("spider/bite.wav");
-		precache_sound("spider/pain.wav");
-		precache_sound("spider/death.wav");
+//precache_sound("spider/scuttle.wav");
+//precache_sound("spider/bite.wav");
+//precache_sound("spider/pain.wav");
+//precache_sound("spider/death.wav");
+
+		precache_spider ();
 
 	}
 
@@ -1060,7 +1063,7 @@ void skullwizard_init(void)
 	self.hull = 2;
 
 	self.flags(+)FL_MONSTER;
-	self.yaw_speed = 20;
+	self.yaw_speed = 10;
 
 }
 
diff -urNp h2-0.42-demo/snake.hc h2-1.03/snake.hc
--- h2-0.42-demo/snake.hc	1997-08-28 02:38:10.000000000 +0300
+++ h2-1.03/snake.hc	1997-09-03 04:50:32.000000000 +0300
@@ -68,6 +68,7 @@ void wake_effect (void);
 void snake_think(void);
 float snake_look(void);
 
+/*
 void snake_deflect (void)
 {
 	local entity item;
@@ -122,6 +123,7 @@ void snake_checkdeflect(void)
 
 	snake_deflect();
 }
+*/
 
 
 void snake_sleep (void)
@@ -132,7 +134,6 @@ void snake_sleep (void)
 
 void snake_settle (void) [++ $settle1 .. $settle8]
 {
-	snake_checkdeflect ();
 	if (self.frame == 38)
 		sound (self, CHAN_BODY, "snake/hiss.wav", 1, ATTN_NORM);
 
@@ -142,7 +143,6 @@ void snake_settle (void) [++ $settle1 ..
 
 void snake_unsway (void) [++ $UNsway1 .. $UNsway13]
 {
-	snake_checkdeflect ();
 	if (self.frame == 86)
 		sound (self, CHAN_BODY, "snake/hiss.wav", 1, ATTN_NORM);
 
@@ -177,18 +177,70 @@ void spit_touch(void)
 
 }
 
+void snake_missile_think (void)
+{
+	if (self.lifetime < time)
+	{
+		spit_touch();
+	}
+	else
+	{
+		HomeThink();
+		self.angles = vectoangles(self.velocity);
+		self.think=snake_missile_think;
+		thinktime self : HX_FRAME_TIME;
+	}
+}
+
+void snake_missile_shoot(vector spot1)
+{
+	entity newmis;
+	vector diff;
+
+	newmis = spawn ();
+	newmis.owner = self;
+	newmis.movetype = MOVETYPE_FLYMISSILE;
+	newmis.solid = SOLID_BBOX;
+		
+    setmodel (newmis, "models/goop.mdl");
+	setsize (newmis, '0 0 0', '0 0 0');		
+	setorigin (newmis, spot1);
+
+	newmis.angles = self.angles;
+
+	diff = (self.enemy.origin + self.enemy.view_ofs) - spot1;
+	newmis.velocity = normalize(diff);
+	newmis.angles = vectoangles(newmis.velocity);
+
+	makevectors (newmis.angles);
+	newmis.velocity = newmis.velocity * 1000;
+	newmis.speed=1000;	//Speed
+	newmis.classname = "faminemissile";
+	newmis.angles = vectoangles(newmis.velocity);
+
+	newmis.veer=TRUE;		//No random wandering
+	newmis.turn_time=3;		//Lower the number, tighter the turn
+	newmis.ideal_yaw=TRUE;//Only track things in front
+	newmis.lockentity = self.enemy;
+	newmis.lifetime = time + 1.5;
+	newmis.think=snake_missile_think;
+	thinktime newmis : HX_FRAME_TIME;
+
+	newmis.touch = spit_touch;
+}
+
 void snake_missile (void)
 {
 	makevectors(self.angles);
-	Create_Missile (self, self.enemy, self.origin + v_forward*4 + v_right*40 + v_up*180, 
-					"models/goop.mdl", "snake_spit", 0, 1000, spit_touch);
-	Create_Missile (self, self.enemy, self.origin + v_forward*4 + v_right*55 + v_up*180, 
-					"models/goop.mdl", "snake_spit", 0, 1000, spit_touch);
+	snake_missile_shoot(self.origin + v_forward*4 + v_right * 38 + v_up * 195);
+
+	makevectors(self.angles);
+	snake_missile_shoot(self.origin + v_forward*4 + v_right * 57 + v_up * 195);
 }
 
 void snake_attackleft (void) [++ $spitLF1 .. $spitLF13]
 {
-	snake_checkdeflect ();
+
 	if (self.frame == $spitLF5)
 		snake_missile();
 
@@ -201,7 +253,7 @@ void snake_attackleft (void) [++ $spitLF
 
 void snake_attackright (void) [++ $spitRT1 .. $spitRT13]
 {
-	snake_checkdeflect ();
+
 	if (self.frame == $spitRT5)
 		snake_missile();
 
@@ -214,7 +266,7 @@ void snake_attackright (void) [++ $spitR
 
 void snake_attackfront (void) [++ $wake5 .. $wake19]
 {
-	snake_checkdeflect ();
+
 	if (self.frame == $wake10)
 		snake_missile();
 
@@ -243,8 +295,8 @@ void snake_attack (void)
 
 void snake_dancetongue(void) [++ $2cycle1 .. $2cycle13]
 {
-	thinktime self : HX_FRAME_TIME * 2;
-	snake_checkdeflect ();
+//hinktime self : HX_FRAME_TIME * 2;
+	thinktime self : HX_FRAME_TIME *1.5;
 
 	if (self.frame == 16)
 		sound (self, CHAN_BODY, "snake/hiss.wav", 1, ATTN_NORM);
@@ -255,8 +307,8 @@ void snake_dancetongue(void) [++ $2cycle
 
 void snake_dancetail(void) [++ $1cycle1 .. $1cycle13]
 {
-	thinktime self : HX_FRAME_TIME * 2;
-	snake_checkdeflect ();
+//thinktime self : HX_FRAME_TIME * 2;
+	thinktime self : HX_FRAME_TIME *1.5;
 
 	if (cycle_wrapped)
 		snake_think();
@@ -265,7 +317,7 @@ void snake_dancetail(void) [++ $1cycle1 
 void snake_dance (void)
 {
 	self.attack_cnt = 0;
-	snake_checkdeflect ();
+
 
 	if (random() < .5)
 		snake_dancetail();
@@ -275,8 +327,8 @@ void snake_dance (void)
 
 void snake_startsway(void) [++ $sway1 .. $sway11]
 {
-	thinktime self : HX_FRAME_TIME * 2;
-	snake_checkdeflect ();
+//hinktime self : HX_FRAME_TIME * 2;
+	thinktime self : HX_FRAME_TIME;
 
 	if (cycle_wrapped)
 		snake_dance();
@@ -284,8 +336,8 @@ void snake_startsway(void) [++ $sway1 ..
 
 void snake_wake(void) [++ $wake1 .. $wake19]
 {
-	thinktime self : HX_FRAME_TIME * 2;
-	snake_checkdeflect ();
+//thinktime self : HX_FRAME_TIME * 2;
+	thinktime self : HX_FRAME_TIME;
 
 	if (self.frame < $wake15)
 	{
@@ -310,7 +362,6 @@ float float_null;
 
 float snake_look(void)
 {
-	float r;
 	entity client;
 
 	client = checkclient ();
@@ -324,9 +375,6 @@ float snake_look(void)
 		return FALSE;
 	}
 
-	r = range (client);
-	if (r == RANGE_FAR)
-		return FALSE;
 	if (!visible (client))
 		return FALSE;
 
@@ -347,14 +395,16 @@ void snake_think (void)
 		enemy_range = vlen (self.origin - self.enemy.origin);
         enemy_range -= 80;
 
-		if (enemy_range < 20)
-			chance = 0.95;
-		else if (enemy_range < 200)
-			chance = 0.80;
+		if (enemy_range < 200)
+			chance = 0.90;
 		else if (enemy_range < 400)
+			chance = 0.80;
+		else if (enemy_range < 800)
+			chance = 0.70;
+		else if (enemy_range < 1200)
 			chance = 0.60;
-		else if (enemy_range < 600)
-			chance = 0.40;
+		else if (enemy_range < 2000)
+			chance = 0.50;
 		else  // Too far away
 		{
 			self.enemy = world;
@@ -444,13 +494,15 @@ void() monster_snake =
 	precache_sound2 ("fangel/deflect.wav");
 
 	setsize (self, '-80 -80 0', '80 80 200' );
-	self.health = 600;
+	self.health = 1200;
 
+	total_monsters += 1;
 	self.view_ofs = '0 0 40';
 	self.flags (+) FL_MONSTER;
 	self.use = wake_effect;	
 	self.th_die = chunk_death;
 	self.thingtype = THINGTYPE_BROWNSTONE;
+	self.monsterclass = CLASS_BOSS;
 
 	self.counter = 0;
 };
diff -urNp h2-0.42-demo/soul.hc h2-1.03/soul.hc
--- h2-0.42-demo/soul.hc	1997-08-28 02:38:10.000000000 +0300
+++ h2-1.03/soul.hc	1997-09-02 21:32:16.000000000 +0300
@@ -22,6 +22,8 @@ void () crusader_soul_touch =
 
 		self.enemy.think=SUB_Remove;
 		thinktime self.enemy : HX_FRAME_TIME * 2;
+
+		sprint (other, "You now have Holy Strength!\n");
 	}
 	// Bad people are hurt by this
 	else if ((other.classname == "player") && 
@@ -53,6 +55,8 @@ void () necro_soul_touch =
 		if (other.greenmana > other.max_mana)
 			other.greenmana = other.max_mana;
 
+		sprint (other, "You have devoured a life force!\n");
+
 		self.touch = SUB_Null;
 		self.think=SUB_Remove;
 		thinktime self : HX_FRAME_TIME * 2;
@@ -97,6 +101,8 @@ void () soul_move =
 		particle2(self.origin +'0 0 25',vel,vel,p_color,PARTICLETYPE_C_EXPLODE,self.health/4);
 	}
 
+	setorigin (self.enemy, self.origin);	// Move the ball with it
+
 	self.health -= 0.1;
 	
 	self.think = soul_move;
@@ -111,6 +117,7 @@ void () soul_move =
 	{
 		sound (self, CHAN_VOICE, "misc/null.wav", 1, ATTN_NORM);
 		remove(self);
+		remove(self.enemy);
 	}
 };
 
@@ -120,29 +127,13 @@ void necromancer_sphere (entity ent)
 	entity new,new2;
 	float chance;
 
-	chance = .05 + ((ent.level - 1) * .035);
+	chance = .05 + ((ent.level - 3) * .03);
+	if (chance > .2)
+		chance = .2;
+
 	if (random() > chance)
 		return;
 
-	new = spawn();
-
-	new.owner = new;
-	new.solid = SOLID_TRIGGER;
-	new.movetype = MOVETYPE_FLY;
-
-	droptofloor();
-	setorigin (new, self.origin + '0 0 40');
-	setmodel (new, "models/soulball.mdl");
-	setsize (new, new.mins , new.maxs);
-	new.touch = necro_soul_touch;
-	new.think = soul_move;
-	thinktime new : 0.1;
-	new.hoverz=1;
-	new.velocity_z=new.hoverz;
-	new.flags=0;
-	new.lifespan = 15;  // Alive for 15 seconds
-	new.health = new.lifespan * 2;
-
 	new2 = spawn();
 
 	new2.owner = new;
@@ -150,7 +141,7 @@ void necromancer_sphere (entity ent)
 	new2.movetype = MOVETYPE_FLY;
 
 	droptofloor();
-	setorigin (new2, self.origin + '0  0 40');
+	setorigin (new2, self.origin + '0  0 32');
 	setmodel (new2, "models/soulskul.mdl");
 	new2.classname = "soulskull";
 	setsize (new2, new2.mins , new2.maxs);
@@ -158,6 +149,7 @@ void necromancer_sphere (entity ent)
 	thinktime new2 : 0.1;
 	new2.hoverz=1;
 	new2.velocity_z=new.hoverz;
+	new2.touch = necro_soul_touch;
 	new2.flags=0;
 	new2.lifespan = 15;  // Alive for 15 seconds
 	new2.health = new2.lifespan * 2;
@@ -165,38 +157,33 @@ void necromancer_sphere (entity ent)
 	new2.avelocity_y = 200;
 	sound (new, CHAN_VOICE,"raven/soul.wav", 1, ATTN_NORM);
 
-	new.enemy = new2;
-}
-
-void crusader_sphere (entity ent)
-{
-	local entity new,new2;
-	float chance;
-
-	chance = .05 + ((ent.level - 1) * .035);
-	if (random() > chance)
-		return;
 
 	new = spawn();
-
 	new.owner = new;
 	new.solid = SOLID_TRIGGER;
 	new.movetype = MOVETYPE_FLY;
 
-	droptofloor();
-	setorigin (new, self.origin + '0 0 40');
-	setmodel (new, "models/goodsphr.mdl");
+	setmodel (new, "models/soulball.mdl");
 
 	setsize (new, new.mins , new.maxs);
-	new.touch = crusader_soul_touch;
-	new.think = soul_move;
-	thinktime new : 0.1;
-	new.hoverz=1;
-	new.velocity_z=new.hoverz;
 	new.flags=0;
-	new.lifespan = 15;  // Alive for 15 seconds
-	new.health = new.lifespan * 2;
-	new.sound_time = 2;
+	setorigin (new, new2.origin);
+
+	new2.enemy = new;
+
+}
+
+void crusader_sphere (entity ent)
+{
+	local entity new,new2;
+	float chance;
+
+	chance = .05 + ((ent.level - 3) * .03);
+	if (chance > .2)
+		chance = .2;
+
+	if (random() > chance)
+		return;
 
 	new2 = spawn();
 
@@ -205,11 +192,12 @@ void crusader_sphere (entity ent)
 	new2.movetype = MOVETYPE_FLY;
 
 	droptofloor();
-	setorigin (new2, self.origin + '0  0 40');
+	setorigin (new2, self.origin + '0  0 32');
 	setmodel (new2, "models/cross.mdl");
 
 	setsize (new2, new2.mins , new2.maxs);
 	new2.classname = "soulcross";
+	new2.touch = crusader_soul_touch;
 	new2.think = soul_move;
 	thinktime new2 : 0.1;
 	new2.hoverz=1;
@@ -221,6 +209,26 @@ void crusader_sphere (entity ent)
 	new2.avelocity_y = 200;
 	sound (new, CHAN_VOICE, "raven/soul.wav", 1, ATTN_NORM);
 
-	new.enemy = new2;
+
+	new = spawn();
+
+	new.owner = new;
+	new.solid = SOLID_TRIGGER;
+	new.movetype = MOVETYPE_FLY;
+
+	setorigin (new, new2.origin);
+	setmodel (new, "models/goodsphr.mdl");
+
+	new.drawflags (+) MLS_ABSLIGHT;
+
+	setsize (new, new.mins , new.maxs);
+	new.hoverz=1;
+	new.velocity_z=new.hoverz;
+	new.flags=0;
+	new.lifespan = 15;  // Alive for 15 seconds
+	new.health = new.lifespan * 2;
+	new.sound_time = 2;
+
+	new2.enemy = new;
 }
 
diff -urNp h2-0.42-demo/spawn.hc h2-1.03/spawn.hc
--- h2-0.42-demo/spawn.hc	1997-08-28 02:38:10.000000000 +0300
+++ h2-1.03/spawn.hc	1997-09-04 21:57:40.000000000 +0300
@@ -121,7 +121,7 @@ float entity_spawnvalues[456] =
 	    20,	  200,	    0,				3,			    1,				1,	// ENT_TOMBSTONE1
 	    20,	  200,	    0,				3,			    1,				1,	// ENT_TOMBSTONE1
 	    50,	   15,	    4,				3,			    3,				1,	// ENT_CAULDRON
-	    20,	   15,	    0,				3,			   14,				1,	// ENT_SKULLSTICK
+	    20,	   15,	    0,				3,			    2,				1,	// ENT_SKULLSTICK
 	    50,	   15,	    0,				3,			    4,				1,	// ENT_BEEFSLAB
 	     0,	    0,	    0,				0,			    7,				1,	// ENT_SEAWEED
 	   150,	    8,	    4,				3,			    4,				1,	// ENT_MUMMY
@@ -138,8 +138,8 @@ float entity_spawnvalues[456] =
 	     0,	    0,	    9,				2,			    1,				0,	// ENT_VORP_MISSILE
 	     0,	    0,     11,				5,			    1,				0,	// ENT_AXE_BLADE
 	   100,	  200,	    0,				3,			    1,				1,	// ENT_STATUE_LION
-	    20,	  200,	    0,				2,			    4,				1,	// ENT_CORPSE2
-	    20,	  200,	    0,				2,			    4,				1,	// ENT_CORPSE1
+	    20,	  200,	    4,				2,			    4,				1,	// ENT_CORPSE2
+	    20,	  200,	    4,				2,			    4,				1,	// ENT_CORPSE1
 	    25,	    8,	    4,				3,			    2,				1,	// ENT_BENCH
 	    20,	    0,	    0,				3,			    3,				1,	// ENT_FENCE
 	   150,	  500,	    0,				3,			    1,				1,	// ENT_STATUE_ANGEL
@@ -345,9 +345,12 @@ void CreateEntityNew(entity subject,floa
 		self.drawflags(+)MLS_ABSLIGHT;
 
 	subject.th_die = death_func;
+
+	if(subject.proj_ofs=='0 0 0')
+		subject.proj_ofs='0 0 24';
 }
 
-void Create_Missile (entity spawner, entity victim,vector spot,string missilemodel, 
+void Create_Missile (entity spawner, vector spot1,vector spot2,string missilemodel, 
 	string missilename,float missileskin,float missilespeed,void() touchfunct)
 {
 vector diff;
@@ -360,9 +363,9 @@ vector diff;
 		
 	makevectors (spawner.angles);
 
-	diff = (victim.origin + victim.view_ofs) - spot;
-	newmis.velocity = normalize(diff);
-	newmis.velocity = newmis.velocity * missilespeed;
+	diff = normalize(spot2 - spot1);
+
+	newmis.velocity = diff * missilespeed;
 	newmis.classname = missilename;
 	newmis.angles = vectoangles(newmis.velocity);
 
@@ -370,7 +373,7 @@ vector diff;
 
 	setmodel (newmis,missilemodel);
 	setsize (newmis, '0 0 0', '0 0 0');		
-	setorigin (newmis, spot);
+	setorigin (newmis, spot1);
 
 	newmis.think = SUB_Remove;
 	newmis.nextthink = time + 2.5;
diff -urNp h2-0.42-demo/specials.hc h2-1.03/specials.hc
--- h2-0.42-demo/specials.hc	1997-08-28 02:38:10.000000000 +0300
+++ h2-1.03/specials.hc	1997-09-04 21:57:40.000000000 +0300
@@ -1,6 +1,6 @@
 void CheckAbilities ()
 {
-	if(self.playerclass == CLASS_ASSASSIN && self.model=="models/assassin.mdl")
+	if(self.model=="models/assassin.mdl")
 	{
 	float trans_limit;
 		if(self.level<3)
@@ -8,7 +8,7 @@ void CheckAbilities ()
 		trans_limit=10 - self.level;
 		if(trans_limit<1)
 			trans_limit=1;
-		if(self.velocity=='0 0 0')
+		if(self.velocity=='0 0 0'&&self.last_attack<time - 2&&self.light_level<100)
 		{
 			if(self.still_time==-1)
 				self.still_time=time + 10 - self.level;
@@ -17,21 +17,22 @@ void CheckAbilities ()
 				msg_entity=self;
 				WriteByte(MSG_ONE, SVC_SET_VIEW_FLAGS);
 				WriteByte(MSG_ONE,DRF_TRANSLUCENT);
-				self.drawflags(+)DRF_TRANSLUCENT|MLS_ABSLIGHT;
-				if(self.abslight==1)
-					self.abslight=0.5;
+				if(!self.abslight)
+					self.abslight=self.light_level/102;
 				else if(self.abslight>0.005*(8-trans_limit))
 					self.abslight-=0.005*(8-trans_limit);
+				self.drawflags(+)DRF_TRANSLUCENT|MLS_ABSLIGHT;
 			}
 		}
-		else
+		else if(self.drawflags&DRF_TRANSLUCENT|MLS_ABSLIGHT)
 		{
 			self.still_time=-1;
 			if(self.abslight<1)
-				self.abslight+=0.005*trans_limit;
+				self.abslight+=0.01*trans_limit;
 			else
 			{
 				self.drawflags(-)MLS_ABSLIGHT|DRF_TRANSLUCENT;
+				self.abslight=0;
 				msg_entity=self;
 				WriteByte(MSG_ONE, SVC_CLEAR_VIEW_FLAGS);
 				WriteByte(MSG_ONE,DRF_TRANSLUCENT);
diff -urNp h2-0.42-demo/spider.hc h2-1.03/spider.hc
--- h2-0.42-demo/spider.hc	1997-08-28 02:38:10.000000000 +0300
+++ h2-1.03/spider.hc	1997-09-11 11:34:40.000000000 +0300
@@ -83,10 +83,10 @@ void SpiderJumpOffWall();
 
 float SpiderHealth[4] =
 {
-	200,		// SPIDER_RED_LARGE
-	75,			// SPIDER_RED_SMALL
-	100,			// SPIDER_YELLOW_LARGE
-	50			// SPIDER_YELLOW_SMALL
+	175,		// SPIDER_RED_LARGE
+	50,			// SPIDER_RED_SMALL
+	75,			// SPIDER_YELLOW_LARGE
+	30			// SPIDER_YELLOW_SMALL
 };
 
 float SpiderExp[4] =
@@ -208,6 +208,19 @@ void spider_playdead (void)
 //
 //==========================================================================
 
+void spider_noise ()
+{
+float r;
+	r=random();
+	if(r<0.33)
+		self.noise="spider/step1.wav";
+	else if(r<0.66)
+		self.noise="spider/step2.wav";
+	else
+		self.noise="spider/step3.wav";
+	sound(self, CHAN_BODY, self.noise, random(0.7, 1), ATTN_NORM);
+}
+
 void spider_onwall_awakened ()
 {
 	self.use=monster_use;
@@ -246,6 +259,7 @@ void spider_onwall_wait () [++ $swait1..
 	
 void spider_onwall_wait_init ()
 {
+	total_monsters += 1;
 	if(self.angles_y==-2)
 		self.angles='90 0 0';	//face down
 	self.flags(+)FL_FLY;		//No gravity
@@ -275,13 +289,7 @@ void SpiderInit(float type)
 	}
 
 	if(!self.flags2&FL_SUMMONED)
-	{
-		precache_model ("models/spider.mdl");
-		precache_sound ("spider/scuttle.wav");
-		precache_sound ("spider/bite.wav");
-		precache_sound ("spider/pain.wav");
-		precache_sound ("spider/death.wav");
-	}
+		precache_spider();
 
 	setmodel(self, "models/spider.mdl");
 
@@ -347,7 +355,7 @@ void SpiderDie(void) [++ $sdeath1..$sdea
 {
 	if(self.frame == $sdeath1)
 	{
-		sound(self, CHAN_BODY, "spider/death.wav", 1, ATTN_NORM);
+		sound(self, CHAN_VOICE, "spider/death.wav", 1, ATTN_NORM);
 		self.flags(-)FL_FLY;
 		if(!self.flags&FL_ONGROUND)
 			self.movetype=MOVETYPE_BOUNCE;
@@ -357,7 +365,7 @@ void SpiderDie(void) [++ $sdeath1..$sdea
 	{
 		self.think=SpiderGone;
 	}
-	if(self.health<-40)
+	if(self.health<-20)
 		chunk_death();
 }
 
@@ -371,7 +379,7 @@ void SpiderPain(entity attacker, float t
 	if(random(self.health)>total_damage)
 		return;
 
-	sound(self, CHAN_BODY, "spider/pain.wav", 1, ATTN_NORM);
+	sound(self, CHAN_VOICE, "spider/pain.wav", 1, ATTN_NORM);
 	if(self.flags&FL_FLY)		//on wall
 	{
 		spider_onwall_awakened();
@@ -520,7 +528,7 @@ void SpiderMelee(void) [++ $sbite1..$sbi
 	}
 	if(self.frame == $sbite6)
 	{
-		sound(self, CHAN_BODY, "spider/bite.wav", 1, ATTN_NORM);
+		sound(self, CHAN_VOICE, "spider/bite.wav", 1, ATTN_NORM);
 	}
 	if(self.frame > $sbite5 && self.frame < $sbite9)
 	{
@@ -606,6 +614,7 @@ void SpiderRun(void) [++ $swalk1..$swalk
 	}
 	if(random()<0.2)
 	{
+		spider_noise();
 		pitch_roll_for_slope('0 0 0');
 	}
 
@@ -625,6 +634,7 @@ void SpiderWalk(void) [++ $swalk1..$swal
 	ai_walk(self.speed/2);
 	if(random()<0.1)
 	{
+		spider_noise();
 		pitch_roll_for_slope('0 0 0');
 	}
 }
diff -urNp h2-0.42-demo/stats.hc h2-1.03/stats.hc
--- h2-0.42-demo/stats.hc	1997-08-28 02:38:10.000000000 +0300
+++ h2-1.03/stats.hc	1997-09-04 21:57:40.000000000 +0300
@@ -344,6 +344,9 @@ void AwardExperience(entity ToEnt, entit
 	
 	if (!Amount) return;
 
+	if(ToEnt.deadflag>=DEAD_DYING)
+		return;
+		
 	IsPlayer = (ToEnt.classname == "player");
 
 	if (FromEnt != world && Amount == 0.0)
diff -urNp h2-0.42-demo/strings.hc h2-1.03/strings.hc
--- h2-0.42-demo/strings.hc	1997-08-28 02:38:10.000000000 +0300
+++ h2-1.03/strings.hc	1997-09-02 13:19:18.000000000 +0300
@@ -10,7 +10,7 @@
 string STR_THE;
 string STR_YOUGOTTHE;
 string STR_YOUHAVETHE;
-string STR_ISYOURS;
+string STR_YOUHAVEACQUIRED;
 string STR_YOUPOSSESS;
 
 string STR_VORPAL;
@@ -73,13 +73,14 @@ string STR_ARMORAMULET;
 string STR_ARMORBRACER;
 string STR_ARMORBREASTPLATE;
 string STR_ARMORHELMET;
+string STR_DONOTPOSSESS;
 
 void StringsInit(void)
 {
 	STR_THE					= "The ";
 	STR_YOUGOTTHE			= "You got the ";
 	STR_YOUHAVETHE			= "You have the ";
-	STR_ISYOURS			= " is yours!";
+	STR_YOUHAVEACQUIRED		= "You have acquired the ";
 	STR_YOUPOSSESS			= "You possess the ";
 
 	STR_VORPAL				= "Vorpal Sword";
@@ -137,8 +138,11 @@ void StringsInit(void)
 	STR_RINGREGENERATION	= "Ring of Regeneration";
 	STR_RINGTURNING			= "Ring of Turning";
 
-	STR_ARMORAMULET			= "Amulet of Projection";
+	STR_ARMORAMULET			= "Amulet of Protection";
 	STR_ARMORBRACER			= "Bracers";
 	STR_ARMORBREASTPLATE	= "Breastplate";
 	STR_ARMORHELMET			= "Helmet";
+
+	STR_DONOTPOSSESS		= "You do not possess this item.";
+
 }
diff -urNp h2-0.42-demo/subs.hc h2-1.03/subs.hc
--- h2-0.42-demo/subs.hc	1997-08-28 02:38:10.000000000 +0300
+++ h2-1.03/subs.hc	1997-08-29 17:49:44.000000000 +0300
@@ -200,10 +200,6 @@ void SUB_CalcAngleMoveDone()
  * SUB_CalcMoveAndAngleDone-Set angle and position in final states.
  */
 
-.float anglespeed;
-.float angletime;
-.float movetime;
-
 void SUB_CalcMoveAndAngleDone(void)
 {
 	setorigin(self, self.finaldest);
diff -urNp h2-0.42-demo/sunstaff.hc h2-1.03/sunstaff.hc
--- h2-0.42-demo/sunstaff.hc	1997-08-28 02:38:10.000000000 +0300
+++ h2-1.03/sunstaff.hc	1997-09-04 21:57:40.000000000 +0300
@@ -33,9 +33,6 @@ $frame idle21       idle22       idle23 
 $frame idle26       idle27       idle28       idle29       idle30       
 $frame idle31       
 
-// O.S.: what frame was here in original demo???  $select1 is 46, not 45.
-$frame UNKNOWN      
-
 //
 $frame select1      select2      select3      select4      select5      
 $frame select6      select7      select8      select9      select10     
@@ -68,9 +65,9 @@ float remainder, reflect_count,damg;
 
 	self.effects(+)EF_BRIGHTLIGHT;
 	if(self.artifact_active&ART_TOMEOFPOWER&&!ofs)
-		damg=10;
+		damg=17;
 	else
-		damg=5;
+		damg=7;
 
 //If powered up, start a quake
 	if(!ofs)
@@ -167,25 +164,25 @@ void sunstaff_fire_loop ()
 {
 	self.wfs = advanceweaponframe($fircyc1,$fircyc10);
 	self.th_weapon=sunstaff_fire_loop;
-	if(self.attack_finished<=time&&self.button0&&self.greenmana>=1&&self.bluemana>=1)
+	if(self.attack_finished<=time&&self.button0&&self.greenmana>=2&&self.bluemana>=2)
 	{
 		if(self.artifact_active&ART_TOMEOFPOWER)
 		{
 			FireSunstaffPower();
-			self.greenmana-=1;
-			self.bluemana-=1;
+			self.greenmana-=2;
+			self.bluemana-=2;
 		}
 		else
 		{
 			makevectors(self.v_angle);
 			FireSunstaff(v_forward,0);
-			self.greenmana-=0.25;
-			self.bluemana-=0.25;
+			self.greenmana-=0.35;
+			self.bluemana-=0.35;
 		}
 		self.attack_finished=time + 0.05;
 	}
 
-	if(self.wfs==WF_CYCLE_WRAPPED&&(!self.button0||self.greenmana<1||self.bluemana<1))
+	if(self.wfs==WF_CYCLE_WRAPPED&&(!self.button0||self.greenmana<2||self.bluemana<2))
 	{
 		self.effects(-)EF_BRIGHTLIGHT;
 		sunstaff_fire_settle();
diff -urNp h2-0.42-demo/torch.hc h2-1.03/torch.hc
--- h2-0.42-demo/torch.hc	1997-08-28 02:38:10.000000000 +0300
+++ h2-1.03/torch.hc	1997-09-04 21:57:40.000000000 +0300
@@ -44,6 +44,7 @@ void Init_Torch ()
 	}
 	else
 	{
+		self.drawflags(+)MLS_ABSLIGHT;
 		setmodel(self,self.weaponmodel);
 		if(self.health!=0||self.targetname!="")
 		{
@@ -78,7 +79,6 @@ void light_torch_eqypt()
 	precache_model2("models/eflmtrch.mdl");
 	precache_sound("raven/flame1.wav");
 
-	self.drawflags(+)MLS_ABSLIGHT;
 	self.abslight = .75;
 
 	self.mdl = "models/egtorch.mdl";
@@ -120,7 +120,6 @@ void light_torch_castle()
 	self.thingtype	= THINGTYPE_METAL;
 	setsize(self, '-6 -6 -8','6 6 8');
 
-	self.drawflags(+)MLS_ABSLIGHT;
 	self.abslight = .75;
 
 	Init_Torch();
@@ -154,7 +153,6 @@ void light_torch_meso()
 	self.weaponmodel="models/mflmtrch.mdl";
 	self.mdl	= "models/mesotrch.mdl";
 
-	self.drawflags(+)MLS_ABSLIGHT;
 	self.abslight = .75;
 
 	self.thingtype	= THINGTYPE_BROWNSTONE;
@@ -194,7 +192,6 @@ void light_torch_rome()
 	self.thingtype	= THINGTYPE_GREYSTONE;
 	setsize(self, '-6 -6 -8','6 6 8');
 
-	self.drawflags(+)MLS_ABSLIGHT;
 	self.abslight = .75;
 
 	Init_Torch();
diff -urNp h2-0.42-demo/triggers.hc h2-1.03/triggers.hc
--- h2-0.42-demo/triggers.hc	1997-08-28 02:38:10.000000000 +0300
+++ h2-1.03/triggers.hc	1997-09-04 21:57:40.000000000 +0300
@@ -84,7 +84,7 @@ void() multi_trigger =
 	else
 	{	// we can't just remove (self) here, because this is a touch function
 		// called while C code is looping through area links...
-		self.touch = self.think = SUB_Null;
+		self.touch = self.think = self.use = SUB_Null;
 		self.nextthink=-1;
 /*Don't want to remove- may be checked later
 		thinktime self : 0.1;
@@ -139,35 +139,53 @@ void client_remove_piece(entity client, 
 		client.puzzle_inv8 = string_null;
 }
 
-float check_puzzle_pieces(entity client, float remove_pieces)
+float check_puzzle_pieces(entity client, float remove_pieces, float inverse)
 {
+	float required, has;
+	entity found;
+
+	required = has = 0;
 	if (self.puzzle_piece_1)
 	{
-		if (!client_has_piece(client,self.puzzle_piece_1))
-			return 0;
+		required (+) 1;
+		if (client_has_piece(client,self.puzzle_piece_1))
+			has (+) 1;
 	}
 	if (self.puzzle_piece_2)
 	{
-		if (!client_has_piece(client,self.puzzle_piece_2)) 
-			return 0;
+		required (+) 2;
+		if (client_has_piece(client,self.puzzle_piece_2)) 
+			has (+) 2;
 	}
 	if (self.puzzle_piece_3)
 	{
-		if (!client_has_piece(client,self.puzzle_piece_3)) 
-			return 0;
+		required (+) 4;
+		if (client_has_piece(client,self.puzzle_piece_3)) 
+			has (+) 4;
 	}
 	if (self.puzzle_piece_4)
 	{
-		if (!client_has_piece(client,self.puzzle_piece_4)) 
-			return 0;
+		required (+) 8;
+		if (client_has_piece(client,self.puzzle_piece_4)) 
+			has (+) 8;
 	}
 
+	if (!inverse && required != has)
+		return 0;
+	else if (inverse && required == has)
+		return 0;
+
 	if (remove_pieces)
 	{
-		client_remove_piece(client,self.puzzle_piece_1);
-		client_remove_piece(client,self.puzzle_piece_2);
-		client_remove_piece(client,self.puzzle_piece_3);
-		client_remove_piece(client,self.puzzle_piece_4);
+		found = find(world, classname, "player");
+		while (found)
+		{
+			client_remove_piece(found,self.puzzle_piece_1);
+			client_remove_piece(found,self.puzzle_piece_2);
+			client_remove_piece(found,self.puzzle_piece_3);
+			client_remove_piece(found,self.puzzle_piece_4);
+			found = find(found, classname, "player");
+		}
 	}
 
 	return 1;
@@ -175,8 +193,8 @@ float check_puzzle_pieces(entity client,
 
 void() multi_use =
 {
-	entity found;
 	string temp;
+	float removepp, inversepp;
 
 	if (time < self.attack_finished)
 		return;
@@ -187,53 +205,19 @@ void() multi_use =
 		return;
 	}
 
-	if (self.spawnflags & SPAWNFLAG_NO_PP)
-	{
-		if (coop)
-		{
-			found = find(world, classname, "player");
-			while (found)
-			{
-				if (found != other)
-					check_puzzle_pieces(found, self.spawnflags & SPAWNFLAG_REMOVE_PP);
-				found = found.chain;
-			}
-		}
-		if (check_puzzle_pieces(other, self.spawnflags & SPAWNFLAG_REMOVE_PP))
-		{
-			if (self.no_puzzle_msg && !deathmatch)
-			{
-				temp = getstring(self.no_puzzle_msg);
-				if (!deathmatch)
-					centerprint(other, temp);
-				self.attack_finished = time + 2;
-			}
-			return;
-		}
-	}
-	else
+	removepp = (self.spawnflags & SPAWNFLAG_REMOVE_PP);
+	inversepp = (self.spawnflags & SPAWNFLAG_NO_PP);
+
+	if (!check_puzzle_pieces(other,removepp,inversepp))
 	{
-		if (coop)
+		if (self.no_puzzle_msg && !deathmatch)
 		{
-			found = find(world, classname, "player");
-			while (found)
-			{
-				if (found != other)
-					check_puzzle_pieces(found, self.spawnflags & SPAWNFLAG_REMOVE_PP);
-				found = found.chain;
-			}
-		}
-		if (!check_puzzle_pieces(other, self.spawnflags & SPAWNFLAG_REMOVE_PP))
-		{
-			if (self.no_puzzle_msg && !deathmatch)
-			{
-				temp = getstring(self.no_puzzle_msg);
-				if (!deathmatch)
-					centerprint(other, temp);
-				self.attack_finished = time + 2;
-			}
-			return;
+			temp = getstring(self.no_puzzle_msg);
+			if (!deathmatch)
+				centerprint (other, temp);
+			self.attack_finished = time + 2;
 		}
+		return;
 	}
 
 	self.enemy = activator;
@@ -242,8 +226,8 @@ void() multi_use =
 
 void() multi_touch =
 {
+	float removepp, inversepp;
 	string temp;
-	entity found;
 
 	if (time < self.attack_finished)
 		return;
@@ -273,53 +257,19 @@ void() multi_touch =
 			return;		// not facing the right way
 	}
 
-	if (self.spawnflags & SPAWNFLAG_NO_PP)
+	removepp = (self.spawnflags & SPAWNFLAG_REMOVE_PP);
+	inversepp = (self.spawnflags & SPAWNFLAG_NO_PP);
+
+	if (!check_puzzle_pieces(other,removepp,inversepp))
 	{
-		if (coop)
+		if (self.no_puzzle_msg && !deathmatch)
 		{
-			found = find(world, classname, "player");
-			while (found)
-			{
-				if (found != other)
-					check_puzzle_pieces(found, self.spawnflags & SPAWNFLAG_REMOVE_PP);
-				found = found.chain;
-			}
-		}
-		if (check_puzzle_pieces(other, self.spawnflags & SPAWNFLAG_REMOVE_PP))
-		{
-			if (self.no_puzzle_msg && !deathmatch)
-			{
-				temp = getstring(self.no_puzzle_msg);
-				if (!deathmatch)
-					centerprint(other, temp);
-				self.attack_finished = time + 2;
-			}
-			return;
-		}
-	}
-	else
-	{
-		if (coop)
-		{
-			found = find(world, classname, "player");
-			while (found)
-			{
-				if (found != other)
-					check_puzzle_pieces(found, self.spawnflags & SPAWNFLAG_REMOVE_PP);
-				found = found.chain;
-			}
-		}
-		if (!check_puzzle_pieces(other, self.spawnflags & SPAWNFLAG_REMOVE_PP))
-		{
-			if (self.no_puzzle_msg && !deathmatch)
-			{
-				temp = getstring(self.no_puzzle_msg);
-				if (!deathmatch)
-					centerprint(other, temp);
-				self.attack_finished = time + 2;
-			}
-			return;
+			temp = getstring(self.no_puzzle_msg);
+			if (!deathmatch)
+				centerprint (other, temp);
+			self.attack_finished = time + 2;
 		}
+		return;
 	}
 	
 	self.enemy = other;
@@ -561,7 +511,7 @@ void() counter_find_linked = 
 		 
 	if(t!=world && t!=starte)
 	{
-	 self.chain = t;
+	 self.lockentity = t;
 	 self = t;
 	}
   } 
@@ -571,7 +521,7 @@ void() counter_find_linked = 
 void counter_return_buttons ()
 {
 	entity t;
-	t = self.chain;
+	t = self.lockentity;
 	
 	while(t)
 	{
@@ -580,7 +530,7 @@ void counter_return_buttons ()
 			t.think = button_return;
 			t.nextthink = t.ltime + 1;
 		}
-		t = t.chain;
+		t = t.lockentity;
 	}
 }
 
@@ -690,6 +640,7 @@ void() counter_use =
 	&& (self.spawnflags & SPAWNFLAG_NOMESSAGE) == 0 && !deathmatch)
 	{
 		centerprint(activator, "Sequence completed!");
+		sound(activator,CHAN_ITEM,"misc/comm.wav",1,ATTN_NORM);
 	}
 	self.check_ok=TRUE;
 	self.enemy = activator;
@@ -874,21 +825,23 @@ entity player;
 	self.think = quake_shake_next;
 	thinktime self : 0.1;
 
-	if (self.ltime + self.lifespan < time) 
+	if (self.lifespan < time) 
 	{
 		self.nextthink = -1;
 		self.wait = -1;
 	}
 	else
-		self.nextthink = self.ltime + 0.1;
+		thinktime self : 0.1;
 };
 
 //Isn't this a great function name?
 void() quake_shake =
 {
- self.ltime = time;
+ sound(self,CHAN_AUTO,"weapons/explode.wav",1,ATTN_NONE);
+ sound(self,CHAN_AUTO,"fx/quake.wav",1,ATTN_NONE);
+
  self.think = quake_shake_next;
- self.nextthink = self.ltime + 0.1;
+ thinktime self : 0.1;
 
  SUB_UseTargets();
 
@@ -897,10 +850,13 @@ void() quake_shake =
 
 void() quake_use =
 {
-	if (self.nextthink >= time)
+	if (self.nextthink >= time||self.nextthink<0)
 		return;
    
 	self.think = quake_shake;
+	self.lifespan+=time;
+	if(!self.spawnflags&2)
+		self.use=SUB_Null;
 	thinktime self : self.wait;
 };
 
@@ -1496,6 +1452,28 @@ trigger_crosslevel
 
 void() trigger_crosslevel_use =
 {
+	if(other.classname=="trigger_check")
+		if(!other.check_ok)
+		{
+			self.check_ok=FALSE;
+			if (self.spawnflags & 1)
+				serverflags(-)SFL_CROSS_TRIGGER_1;
+			if (self.spawnflags & 2)
+				serverflags(-)SFL_CROSS_TRIGGER_2;
+			if (self.spawnflags & 4)
+				serverflags(-)SFL_CROSS_TRIGGER_3;
+			if (self.spawnflags & 8)
+				serverflags(-)SFL_CROSS_TRIGGER_4;
+			if (self.spawnflags & 16)
+				serverflags(-)SFL_CROSS_TRIGGER_5;
+			if (self.spawnflags & 32)
+				serverflags(-)SFL_CROSS_TRIGGER_6;
+			if (self.spawnflags & 64)
+				serverflags(-)SFL_CROSS_TRIGGER_7;
+			if (self.spawnflags & 128)
+				serverflags(-)SFL_CROSS_TRIGGER_8;
+			return;
+		}
 	if (self.spawnflags & 1)
 		serverflags(+)SFL_CROSS_TRIGGER_1;
 	if (self.spawnflags & 2)
@@ -1673,9 +1651,8 @@ void puzzle_touch(void)
 	}
 	else
 	{
-		sprint (other, STR_THE);
+		sprint (other, STR_YOUHAVEACQUIRED);
 		sprint (other, self.netname);
-		sprint (other, STR_ISYOURS);
 	}
 
 	sprint (other,"\n");
diff -urNp h2-0.42-demo/tripmine.hc h2-1.03/tripmine.hc
--- h2-0.42-demo/tripmine.hc	1997-08-28 02:38:10.000000000 +0300
+++ h2-1.03/tripmine.hc	1997-09-03 22:39:06.000000000 +0300
@@ -54,10 +54,7 @@ void()  b_explode10      =       [9,    
 void()  b_explode11     =       [10,             b_explode12] {T_RadiusDamage (self, self.owner, self.bloodloss, world);self.bloodloss=self.bloodloss - 1;
 		BoomCheck();
 };
-void()  b_explode12     =        [11,         b_explode13] {T_RadiusDamage (self, self.owner, self.bloodloss, world);self.bloodloss=self.bloodloss - 1;
-		BoomCheck();
-};
-void()  b_explode13      =       [12,             ShaBoom] {T_RadiusDamage (self, self.owner, self.bloodloss, world);self.bloodloss=self.bloodloss - 1;
+void()  b_explode12      =       [11,             ShaBoom] {T_RadiusDamage (self, self.owner, self.bloodloss, world);self.bloodloss=self.bloodloss - 1;
 		BoomCheck();
 };
 
diff -urNp h2-0.42-demo/vorpal.hc h2-1.03/vorpal.hc
--- h2-0.42-demo/vorpal.hc	1997-08-28 02:38:10.000000000 +0300
+++ h2-1.03/vorpal.hc	1997-09-04 21:57:40.000000000 +0300
@@ -435,6 +435,8 @@ void vorpal_melee (void)
 			sound (self, CHAN_WEAPON, "weapons/vorpht1.wav", 1, ATTN_NORM);
 
 		dir =  trace_ent.origin - self.origin;
+		if(trace_ent.solid!=SOLID_BSP&&trace_ent.movetype!=MOVETYPE_PUSH)
+		{
 			trace_ent.velocity = dir * VORP_PUSH*(1/inertia);
 			if(trace_ent.movetype==MOVETYPE_FLY)
 			{
@@ -444,6 +446,7 @@ void vorpal_melee (void)
 			else
 				trace_ent.velocity_z = 80/inertia;
 			trace_ent.flags (-) FL_ONGROUND;
+		}
 		T_Damage (trace_ent, self, self, damg);
 	}
 	else	// hit wall
diff -urNp h2-0.42-demo/warhamer.hc h2-1.03/warhamer.hc
--- h2-0.42-demo/warhamer.hc	1997-08-28 02:38:10.000000000 +0300
+++ h2-1.03/warhamer.hc	1997-09-04 21:57:40.000000000 +0300
@@ -95,6 +95,21 @@ float numstrikes, strikelength;
 	self.effects=EF_MUZZLEFLASH;
 }
 
+void hammer_bounce ()
+{
+	if(other.thingtype!=THINGTYPE_FLESH)
+		if(self.t_width<time)
+		{
+			self.t_width=time+0.3;
+			if(random()<0.3)
+				sound(self,CHAN_BODY,"weapons/met2stn.wav",0.5,ATTN_NORM);
+			else if(random()<0.5)
+				sound(self,CHAN_BODY,"weapons/vorpht2.wav",0.5,ATTN_NORM);
+			else
+				sound(self,CHAN_BODY,"paladin/axric1.wav",0.75,ATTN_NORM);
+		}
+}
+
 void() ThrowHammerThink =
 {
 vector destiny;
@@ -103,7 +118,7 @@ float distance;
 	destiny=self.controller.origin+self.controller.proj_ofs+v_right*7+'0 0 -7';
 	distance=vlen(self.origin-destiny);	
 
-	if(self.lifetime<time||(distance<16&&self.bloodloss<time))
+	if(self.lifetime<time||(distance<28&&self.bloodloss<time))
 	{
 //		spawn_tfog(self.controller.origin);
 		ThrowHammerReturn();
@@ -135,11 +150,20 @@ float distance;
 		self.pain_finished=time+0.3;
 	}
 	
-	if(self.controller.health<=0)
+	if(self.controller.health<=0||!self.controller.flags2&FL_ALIVE)
     {
-	MultiExplode();
         sound(self, CHAN_VOICE, "misc/null.wav", 0.3, ATTN_NORM);
-	remove(self);
+		if(pointcontents(self.origin)==CONTENT_SOLID)
+			remove(self);
+		else
+		{
+			self.touch=hammer_bounce;
+			self.avelocity=randomv('-400 -400 -400','400 400 400');
+			self.movetype=MOVETYPE_BOUNCE;
+			self.think=corpseblink;
+			thinktime self : 3;
+		}
+		return;
     }
 //	HammerZap();
     thinktime self : 0.1;
@@ -164,7 +188,7 @@ float inertia;
 	        other.punchangle_x = -20;
 		    self.enemy = other;  
 			CastLightning(3,10);
-			if(other.health)
+			if(other.health&&other.solid!=SOLID_BSP&&other.movetype!=MOVETYPE_PUSH)
 			{
 				if (other.mass<=10)
 					inertia=1;
diff -urNp h2-0.42-demo/weapons.hc h2-1.03/weapons.hc
--- h2-0.42-demo/weapons.hc	1997-08-28 02:38:10.000000000 +0300
+++ h2-1.03/weapons.hc	1997-09-04 21:57:40.000000000 +0300
@@ -235,7 +235,6 @@ void(vector org, vector dir) launch_spik
 };
 
 
-.float hit_z;
 
 void() spike_touch =
 {
@@ -473,12 +472,7 @@ float W_CheckNoAmmo (float check_weapon)
 	{
 		if (check_weapon==IT_WEAPON4)
 		{
-			if (self.artifact_active&ART_TOMEOFPOWER)
-			{
-				if (self.bluemana >= 1 && self.greenmana >= 1)
-					return TRUE;
-			}
-			else if(self.bluemana >= 1 && self.greenmana >= 1)
+			if(self.bluemana >= 2 && self.greenmana >= 2)
 				return TRUE;
 			self.effects(-)EF_BRIGHTLIGHT;
 		}
@@ -509,10 +503,10 @@ float W_CheckNoAmmo (float check_weapon)
 		{
 			if(self.artifact_active&ART_TOMEOFPOWER)
 			{
-				if(self.bluemana >= 8 && self.greenmana >= 8)
+				if(self.bluemana >= 16 && self.greenmana >= 16)
 					return TRUE;
 			}
-			else if(self.bluemana >= 2 && self.greenmana >= 2)
+			else if(self.bluemana >= 8 && self.greenmana >= 8)
 					return TRUE;
 		}
 		else if (check_weapon==IT_WEAPON3)
@@ -637,7 +631,7 @@ void() W_Attack =
 		return;
 	}
 
-	if(self.viewentity!=self)
+	if(self.viewentity!=self&&self.viewentity.classname!="chasecam")
 		return;
 
 	self.show_hostile = time + 1;	// wake monsters up
@@ -770,7 +764,10 @@ void() W_ChangeWeapon =
 	if(self.sheep_time>time)
 		return;
 
-	if(self.viewentity!=self)
+	if(self.viewentity!=self&&self.viewentity.classname!="chasecam")
+		return;
+
+	if(self.attack_finished>time)
 		return;
 
 float	it, am, fl;
@@ -837,10 +834,14 @@ void() CheatCommand =
 	self.bluemana = self.max_mana;
 	self.greenmana = self.max_mana;
 
+	self.impulse = 0;
+
+	if(self.attack_finished<time)
+	{
 		self.oldweapon = self.weapon;
 		self.weapon = IT_WEAPON4;
-		self.impulse = 0;
 		W_SetCurrentWeapon ();
+	}
 };
 
 /*
@@ -854,6 +855,9 @@ void() CycleWeaponCommand =
 {
 float	it, am;
 
+	if(self.attack_finished>time)
+		return;
+
 	self.impulse = 0;
 
 	self.items (+) IT_WEAPON1;
@@ -1095,6 +1099,9 @@ void ClassChangeWeapon(void)
 
 void W_SetCurrentWeapon (void) 
 {
+	if(self.attack_finished>time)
+		return;
+
 	if(self.sheep_time>time)
 		return;
 
diff -urNp h2-0.42-demo/weather.hc h2-1.03/weather.hc
--- h2-0.42-demo/weather.hc	1997-08-28 02:38:10.000000000 +0300
+++ h2-1.03/weather.hc	1997-09-04 21:57:40.000000000 +0300
@@ -111,7 +111,7 @@ void() weather_rain =
 {//MG&BL
 vector dir;
 float splat_count;
-	if (!(self.soundtype == 2))
+	if (!self.soundtype)
 	{
 		precache_sound2("ambience/rain.wav");
 		self.noise1="ambience/rain.wav";
diff -urNp h2-0.42-demo/world.hc h2-1.03/world.hc
--- h2-0.42-demo/world.hc	1997-08-28 02:38:10.000000000 +0300
+++ h2-1.03/world.hc	1997-09-04 21:57:40.000000000 +0300
@@ -7,19 +7,21 @@
 
 void() main =
 {
-	dprint ("main function\n");
-
 // these are just commands the the prog compiler to copy these files
 
-	precache_file ("progs.dat");
-	precache_file2 ("progs2.dat");
+//	precache_file ("progs.dat");
+//	precache_file2 ("progs2.dat");
 	precache_file ("gfx.wad");
-	precache_file ("hexen.rc");
+//	precache_file ("hexen.rc");
 	precache_file ("default.cfg");
 
 //	precache_file ("end1.bin");
 //	precache_file2 ("end2.bin");
 
+	precache_file ("demo1.dem");
+	precache_file ("demo2.dem");
+	precache_file ("demo3.dem");
+
 	Precache_lmp();
 
 // sounds loaded by C code
@@ -47,6 +49,7 @@ void() main =
 
 // registered
 	precache_file2 ("gfx/pop.lmp");
+	precache_file2 ("maps/demo3.bsp");
     precache_file2("maps/castle4.bsp");
     precache_file2("maps/castle5.bsp");
     precache_file2("maps/cath.bsp");
@@ -55,10 +58,13 @@ void() main =
     precache_file2("maps/egypt3.bsp");
     precache_file2("maps/egypt4.bsp");
     precache_file2("maps/egypt5.bsp");
+    precache_file2("maps/egypt6.bsp");
+    precache_file2("maps/egypt7.bsp");
     precache_file2("maps/meso1.bsp");
     precache_file2("maps/meso2.bsp");
     precache_file2("maps/meso3.bsp");
     precache_file2("maps/meso4.bsp");
+    precache_file2("maps/meso5.bsp");
     precache_file2("maps/meso6.bsp");
     precache_file2("maps/meso8.bsp");
     precache_file2("maps/meso9.bsp"); // death rider
@@ -71,6 +77,7 @@ void() main =
     precache_file2("maps/romeric4.bsp");
     precache_file2("maps/romeric5.bsp");
     precache_file2("maps/romeric6.bsp"); // war rider
+    precache_file2("maps/romeric7.bsp"); 
     precache_file2("maps/tower.bsp");
     precache_file2("maps/village1.bsp");
     precache_file2("maps/village2.bsp");
@@ -124,11 +131,24 @@ void() worldspawn =
 //	InitBodyQue ();
 
 // custom map attributes
-	if (self.model == "maps/eidolon.bsp")
-		cvar_set ("sv_sound_distance", "2000");//Small levels, don't cut sounds
+	if (self.model == "maps/eidolon.bsp"||
+		self.model == "maps/rider1a.bsp"||
+		self.model == "maps/meso9.bsp"||
+		self.model == "maps/rider2c.bsp"||
+		self.model == "maps/romeric6.bsp"||
+		self.model == "maps/mgtowers.bsp")
+		cvar_set ("sv_sound_distance", "0");//Small levels, don't cut sounds
 	else
 		cvar_set ("sv_sound_distance", "800");
 
+	if (self.model == "maps/mgtowers.bsp")
+	{
+		cvar_set ("sv_gravity", "100");
+		cvar_set ("r_ambient", "36");
+	}
+	else
+		cvar_set ("sv_gravity", "800");
+
 // the area based ambient sounds MUST be the first precache_sounds
 
 // player precaches	
